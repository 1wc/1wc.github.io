{"title":"contribute_to_Apache","slug":"contribute-to-Apache","date":"2019-10-16T07:52:42.000Z","updated":"2019-10-16T13:33:29.186Z","comments":true,"path":"api/articles/contribute-to-Apache.json","photos":[],"link":"","excerpt":"前言由于实验室里项目需求等原因，笔者的硕士开题方向将会偏向大数据平台的安全。前些日子在调研历史CVE和issue过程中发现了一个有趣的访问控制问题，一开始尝试联系Apache安全团队但杳无音讯，最终考虑到问题的严重性比较低，于是决定提一个issue，成为contributer👋。整个流程还是比较麻烦的，而且网上没有找到比较好的中文资料，在此整理一下自己的思路，如有错误，欢迎斧正。p.s.: 本文所述的步骤主要基于Apache Sentry 的Wiki中的说明，其他项目或者会有少许不同。","covers":["/image/image-20191016170814599.png","/image/image-20191016184817438.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于实验室里项目需求等原因，笔者的硕士开题方向将会偏向大数据平台的安全。前些日子在调研历史CVE和issue过程中发现了一个有趣的访问控制问题，一开始尝试联系Apache安全团队但杳无音讯，最终考虑到问题的严重性比较低，于是决定提一个issue，成为contributer👋。</p>\n<p>整个流程还是比较麻烦的，而且网上没有找到比较好的中文资料，在此整理一下自己的思路，如有错误，欢迎斧正。</p>\n<p>p.s.: 本文所述的步骤主要基于Apache Sentry 的Wiki中的说明，其他项目或者会有少许不同。</p>\n<a id=\"more\"></a>\n<p>##概述</p>\n<p>成为contributer的主要方式有如下几种：</p>\n<ul>\n<li>参与讨论：你可以订阅相应的mailing list，然后参与其中的讨论。</li>\n<li>报告bug：如果你确定你发现了一个bug，那么可以直接在相应项目的JIRA提交（JIRA是一款项目与事务追踪的工具）；不过如果你不确定的话，可以先在mailing list中提出这个issue，并与开发者们一齐讨论</li>\n<li>Review Code：如果你看到一个JIRA ticket变成了<code>Patch Available</code>状态，你可以去review相应的代码。</li>\n<li>提供补丁：你可以将assginee设置为自己，并且为解决此issue提供一个patch。这里的patch可以是代码、文档甚至编译的修改。</li>\n<li>文档：最后，你也可以帮忙维护项目的Wiki</li>\n</ul>\n<p>不过，我的目标主要是发现和解决安全问题，所以主要参与的是报告bug、编写补丁的工作。对开发和业务感兴趣的童鞋可以多关注下<code>mailing list</code>和<code>review board</code>。</p>\n<h2 id=\"一般流程\"><a href=\"#一般流程\" class=\"headerlink\" title=\"一般流程\"></a>一般流程</h2><h3 id=\"提交issue\"><a href=\"#提交issue\" class=\"headerlink\" title=\"提交issue\"></a>提交issue</h3><p>首先，当我们发现了一个bug或者缺陷时，我们需要在JIRA提交issue。当然了，首先需要注册一个账号并登录。</p>\n<p><img src=\"/image/image-20191016170814599.png\" alt=\"image-20191016170814599\"></p>\n<p>如图，需要设置所属的项目，issue的类型，还要用一句话做一个summary，然后设置优先级、影响版本等等内容。<strong>其中Assignee需要特别注意，它指的是这个issue的credit是属于谁的，也就是哪个开发者最终修复了这个issue。</strong>其实在开源社区中issue的reporter有时并不如assignee的“贡献”大：当你发现一个问题时，即使是严重的导致安全问题的缺陷，如果不给出patch，也不会获取像CVE编号那样具有效力的credit，因为issue是谁都可以提的。</p>\n<p>如果你有信心或者说想自己解决这个问题，不妨勾选Assign to me，这样别的开发者就不会抢着提供patch。</p>\n<p>然后，最好详细的描述问题和复现的步骤，也可以提供附件。最后点击Create就可以成功创建issue了。</p>\n<h3 id=\"提交patch和review请求\"><a href=\"#提交patch和review请求\" class=\"headerlink\" title=\"提交patch和review请求\"></a>提交patch和review请求</h3><p>当你开发完成issue的patch后，你就可以上传patch并请求review了。</p>\n<h4 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h4><p>首先要在本地测试编译是否通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install --DskipTests</span><br></pre></td></tr></table></figure>\n<p>提示<code>BUILD SUCCESS</code>则表示成功</p>\n<p>然后跑单元测试，注意如果patch提供了新特性或者修复了bug的话，最好要添加一个单元测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn test</span><br></pre></td></tr></table></figure>\n<p>如果没有错误的话，说明你的代码已通过测试。</p>\n<h4 id=\"创建patch\"><a href=\"#创建patch\" class=\"headerlink\" title=\"创建patch\"></a>创建patch</h4><p>一般来说，Apache的JIRA要求patch的命名规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ISSUE ID.补丁编号.patch</span><br></pre></td></tr></table></figure>\n<p>例如我所提交的patch命名为：<code>SENTRY-2533.001.patch</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt; /path/to/SENTRY-2533.001.patch</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交patch\"><a href=\"#提交patch\" class=\"headerlink\" title=\"提交patch\"></a>提交patch</h4><p>现在你可以在JIRA上将issue设置为<code>PATCH AVAILABLE</code>，并上传你的patch。上传成功后，将会在Jenkins上自动进行PreCommit的测试，也就是执行一次远程的build。整个过程无需手动操作，构建的结果会通过邮件发给你。这里我比较惨：我提交了好几次patch才远程编译成功，而报错并不是我的原因，是其他的单元测试没有通过。</p>\n<p>成功后的截图如下：</p>\n<p><img src=\"/image/image-20191016184817438.png\" alt=\"image-20191016184817438\"></p>\n<h4 id=\"提交review请求\"><a href=\"#提交review请求\" class=\"headerlink\" title=\"提交review请求\"></a>提交review请求</h4><p>此时我们需要在Apache的Review Board上提交review请求，只有开源社区内一个以上的reviewer给你ship it（也就是通过），我们才能够最终commit，并resolve issue。</p>\n<p>建议大家使用rbt工具来提交review请求，步骤如下：</p>\n<p>pip安装即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install -U RBTools</span><br></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.reviewboardrc</span><br><span class=\"line\"></span><br><span class=\"line\">REVIEWBOARD_URL = &quot;https://reviews.apache.org/&quot;</span><br><span class=\"line\">REPOSITORY = &apos;Sentry&apos; # 根据项目改</span><br><span class=\"line\">TARGET_GROUPS = &apos;sentry&apos; # 同上</span><br></pre></td></tr></table></figure>\n<p>然后git clone拉取代码仓库，再用rbt工具进行初始化（用你Review Board页面上的用户名和密码登录）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rbt setup-repo --username=xx --password=xx</span><br></pre></td></tr></table></figure>\n<p>将自己的修改commit到本地仓库，注意添加相应的message。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .（或者指定路径）</span><br><span class=\"line\">git commit -m “SENTRY-2533: The UDF in_file should be blacked default&quot;</span><br></pre></td></tr></table></figure>\n<p>然后运行rbt工具即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1wc@1wcsdeMacBook-Pro ./rbt post -g</span><br><span class=\"line\">Review request #71532 posted.</span><br><span class=\"line\">https://reviews.apache.org/r/71532/</span><br><span class=\"line\">https://reviews.apache.org/r/71532/diff/</span><br></pre></td></tr></table></figure>\n<p>这样就生成了相应的web链接，只需要手工访问上述链接，修改description、summary等条目。</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>最后一步，将rb的链接放在JIRA里，而将issue的链接放在rb里，即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>时间线主要是</p>\n<p>19/9/20：创建issue</p>\n<p>19/9/21：第一次上传patch</p>\n<p>19/9/22：PreCommit成功</p>\n<p>19/10/3：被Cloudera团队成员assign</p>\n<p>19/10/15: review通过</p>\n<p>继续努力！</p>\n","categories":[],"tags":[{"name":"Dev","slug":"Dev","count":3,"path":"api/tags/Dev.json"},{"name":"Big Data","slug":"Big-Data","count":1,"path":"api/tags/Big-Data.json"}]}