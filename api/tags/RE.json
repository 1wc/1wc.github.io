{"name":"RE","slug":"RE","count":2,"postlist":[{"title":"DDCTF2019-writeup","slug":"DDCTF2019-writeup","date":"2019-04-18T11:41:06.000Z","updated":"2019-09-21T08:33:04.441Z","comments":true,"path":"api/articles/DDCTF2019-writeup.json","excerpt":"<p>本次DDCTF2019抱着玩一玩的心态参与了一下，事先不知道Pwn的题目这么少，RE的题目也不算多（主要RE的难题我不会做，简单题又比较水），所以就一开始做了两天，后续没有再尝试，最后排名100多位。下面简单总结一下Pwn和RE几道题的writeup。</p>\n<h1 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h1><p>pwn只有一道题目</p>\n<h2 id=\"Strike\"><a href=\"#Strike\" class=\"headerlink\" title=\"Strike\"></a>Strike</h2><p>该题目提供了libc，防护如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/DDCTF2019$ checksec xpwn </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/DDCTF2019/xpwn&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<p>未开启canary和PIE，只开启了NX，且为32位，有栈利用的可能。</p>\n<p>简单运行程序发现程序首先要求输入用户名，然后在打印用户名的时候会出现一些不可见字符，这里可能存在信息泄漏漏洞。之后要求输入密码的长度，再输入密码。用IDA简单查看下：</p>\n<p>在向栈上写name时，由于写完就用格式化字符串的%s格式输出，所以只要不输入\\x00，就可以随意leak出栈上的数据。</p>","keywords":null,"cover":null,"content":null,"text":"本次DDCTF2019抱着玩一玩的心态参与了一下，事先不知道Pwn的题目这么少，RE的题目也不算多（主要RE的难题我不会做，简单题又比较水），所以就一开始做了两天，后续没有再尝试，最后排名100多位。下面简单总结一下Pwn和RE几道题的writeup。Pwnpwn只有一道题目St","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":9,"path":"api/tags/pwn.json"},{"name":"RE","slug":"RE","count":2,"path":"api/tags/RE.json"}]},{"title":"花指令去除wp","slug":"花指令去除wp","date":"2018-12-05T13:50:11.000Z","updated":"2019-09-21T08:34:17.670Z","comments":true,"path":"api/articles/花指令去除wp.json","excerpt":"<p>​    这学期《恶意代码分析》这门课的作业留了一道RE题，其中包含大量批量插入的花指令。在这里简单记录一下分析过程。</p>\n<h2 id=\"0x00-基本分析\"><a href=\"#0x00-基本分析\" class=\"headerlink\" title=\"0x00  基本分析\"></a>0x00  基本分析</h2><p>首先动态执行程序看一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\UCAS\\malware_analyse&gt;Anti.exe</span><br><span class=\"line\">The encypted flag in hex is:</span><br><span class=\"line\">3A3B3138233B3C3437300B3730073228393523062E2B242A</span><br><span class=\"line\">Please input cipher character:3</span><br><span class=\"line\">Hex result for encrypt string 'thisisasimplesamplestring' is:</span><br><span class=\"line\">7A6D6B7E63756C706D61766661796B62756067787271656B6B</span><br></pre></td></tr></table></figure>\n<p>输入点只有一个，要求输入一个加密字符，然后就会输出对<code>thisisasimplesamplestring</code>字符串的加密结果。那么显然，只要我们能够分析并逆向出加密算法，就能把加密后的flag解密得到原flag，当然这个加密算法应该是可逆的，否则就有点难办了。</p>\n<p>首先用IDA加载Anti.exe，并加载题目所给的pdb文件——应该说出题人还是很好的（谢谢师兄~_~）。之后粗略浏览反汇编代码，主要有两点发现：</p>\n<ul>\n<li>该程序应该由C++语言编写，因为有虚表和类层次关系</li>\n<li>代码中添加了大量花指令</li>\n</ul>\n<h2 id=\"0x01-花指令分析\"><a href=\"#0x01-花指令分析\" class=\"headerlink\" title=\"0x01  花指令分析\"></a>0x01  花指令分析</h2><p>下面对代码中涉及到的花指令作基本分析</p>\n<p>1.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A1B loc_401A1B:                             ; CODE XREF: .text:loc_401A1B↑j</span><br><span class=\"line\">.text:00401A1B                 jmp     short near ptr loc_401A1B+1</span><br><span class=\"line\">.text:00401A1D ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1D                 ror     byte ptr [eax-73h], 45h</span><br></pre></td></tr></table></figure>\n<p>这是因为两条顺序执行的指令使用了一个公共byte，而IDA在反汇编完一条指令后，会从这条指令的下一个地址处开始反汇编，所以无法表示这种情况。具体来说，0x401a1b处是<code>0xeb</code>,0x401a1c处是<code>0xff</code>，IDA首先把0xeb翻译成jmp指令，然后往下找操作数，是短跳转+1；之后，就会顺序反汇编0x401a1d处的内容。但是程序在执行时实际上跳转到0x1a1c处执行，这就导致一个矛盾。</p>\n<p>手工去掉花指令还原即可，暂时不用管那个垃圾字节，在脚本批量去除阶段可以Patch为NOP指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A14 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1B                 db 0EBh</span><br><span class=\"line\">.text:00401A1C ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1C                 inc     eax</span><br><span class=\"line\">.text:00401A1E                 dec     eax</span><br><span class=\"line\">.text:00401A1F                 lea     eax, [ebp-34h]</span><br></pre></td></tr></table></figure>\n<p>2.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:004019E5                 push    offset __ehhandler$?enc2@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@D@Z</span><br><span class=\"line\">.text:004019EA                 mov     eax, large fs:0</span><br><span class=\"line\">.text:004019F0                 push    eax</span><br><span class=\"line\">.text:004019F1                 mov     large fs:0, esp</span><br><span class=\"line\">......</span><br><span class=\"line\">.text:00401A4E                 xor     eax, eax</span><br><span class=\"line\">.text:00401A50                 idiv    eax</span><br><span class=\"line\">.text:00401A52                 retn</span><br><span class=\"line\">.text:00401A53                 db 8Bh</span><br><span class=\"line\">.text:00401A54                 dd 64082464h, 0A1h, 8B008B00h, 0A36400h, 83000000h, 5D5808C4h</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>这算是第二种花指令。0x4019e5处的四条指令首先将fs[0]压入堆栈，从而使得执行完成后，fs[0]指向栈顶。之后，构造一个err结构。在0x401a4e处，故意触发一个除零异常，然后就会进入异常处理流程。</p>\n<p>同时，由于除零后是一条retn指令，IDA在反汇编时不会将retn的下一个地址识别为指令，直到找到一个函数头<code>push    ebp; mov    ebp, esp</code> ，这又使得反汇编出错。</p>\n<p>详细的异常处理流程我们在静态分析阶段不好分析，如读者感兴趣可以详细查阅资料。但我们通过OD调试可以大体了解程序的控制流。</p>\n<p>在0x401a50处下断，并在调试选项中去掉所有忽略异常的勾选，点击确定后F9断到断点处，然后F8单步调试，到达如下位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C92E460    8B1C24          mov ebx,dword ptr ss:[esp]</span><br><span class=\"line\">7C92E463    51              push ecx</span><br><span class=\"line\">7C92E464    53              push ebx</span><br><span class=\"line\">7C92E465    E8 E6C40100     call ntdll.7C94A950</span><br></pre></td></tr></table></figure>\n<p>F7步入函数调用，然后继续单步跟，看到一个可疑位置，会将0x401a53的地址作为参数压栈，然后调用一个函数，步入函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C923261    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923265    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923269    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C92326D    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923271    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923275    E8 08000000     call ntdll.7C923282</span><br></pre></td></tr></table></figure>\n<p>果然，此处最终<code>call ecx</code>，使得eip跳转到0x401a53处执行。所以我们应该在0x401a53处按C识别为代码，修复反汇编。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C923289    64:FF35 0000000&gt;push dword ptr fs:[0]</span><br><span class=\"line\">7C923290    64:8925 0000000&gt;mov dword ptr fs:[0],esp</span><br><span class=\"line\">7C923297    FF75 14         push dword ptr ss:[ebp+0x14]</span><br><span class=\"line\">7C92329A    FF75 10         push dword ptr ss:[ebp+0x10]</span><br><span class=\"line\">7C92329D    FF75 0C         push dword ptr ss:[ebp+0xC]</span><br><span class=\"line\">7C9232A0    FF75 08         push dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">7C9232A3    8B4D 18         mov ecx,dword ptr ss:[ebp+0x18]          ; Anti.00401A53</span><br><span class=\"line\">7C9232A6    FFD1            call ecx                                 ; Anti.00401A53</span><br></pre></td></tr></table></figure>\n<p>3.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A8A                 jz      near ptr loc_401A96+4</span><br><span class=\"line\">.text:00401A90                 jnz     near ptr loc_401A96+4</span><br><span class=\"line\">.text:00401A96</span><br><span class=\"line\">.text:00401A96 loc_401A96:                             ; CODE XREF: .text:00401A8A↑j</span><br><span class=\"line\">.text:00401A96                                         ; .text:00401A90↑j</span><br><span class=\"line\">.text:00401A96                 call    near ptr 0F733CACh</span><br></pre></td></tr></table></figure>\n<p>比起上面两种花指令，这一种都算小菜啦。构造连续两个互补的条件跳转到同一位置。因为条件跳转为基本块出口，诱导IDA反汇编基本块邻接地址为新的基本块入口。实际上只是几个字节的垃圾数据。简单修复即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A8A                 jz      loc_401A9A</span><br><span class=\"line\">.text:00401A90                 jnz     loc_401A9A</span><br><span class=\"line\">.text:00401A90 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A96                 db 0E8h</span><br><span class=\"line\">.text:00401A97                 db  11h</span><br><span class=\"line\">.text:00401A98                 db  22h ; &quot;</span><br><span class=\"line\">.text:00401A99                 db  33h ; 3</span><br><span class=\"line\">.text:00401A9A ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A9A</span><br><span class=\"line\">.text:00401A9A loc_401A9A:                             ; CODE XREF: .text:00401A8A↑j</span><br><span class=\"line\">.text:00401A9A                                         ; .text:00401A90↑j</span><br></pre></td></tr></table></figure>\n<p>4.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401ACA                 xor     eax, eax</span><br><span class=\"line\">.text:00401ACC                 jz      near ptr loc_401AD2+1</span><br><span class=\"line\">.text:00401AD2</span><br><span class=\"line\">.text:00401AD2 loc_401AD2:                             ; CODE XREF: .text:00401ACC↑j</span><br><span class=\"line\">.text:00401AD2                 call    near ptr 0D085A62Fh</span><br></pre></td></tr></table></figure>\n<p>这种是构造一个恒真的条件跳转，再加上一个垃圾字节，很好理解。简单修复即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401ACA                 xor     eax, eax</span><br><span class=\"line\">.text:00401ACC                 jz      loc_401AD3</span><br><span class=\"line\">.text:00401ACC ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401AD2                 db 0E8h</span><br><span class=\"line\">.text:00401AD3 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401AD3</span><br><span class=\"line\">.text:00401AD3 loc_401AD3:                             ; CODE XREF: .text:00401ACC↑j</span><br><span class=\"line\">.text:00401AD3                 pop     eax</span><br><span class=\"line\">.text:00401AD4                 mov     eax, [ebp-30h]</span><br></pre></td></tr></table></figure>\n<p>分析到这里，第一个函数enc1的花指令我们已经完全去除了，在IDA中按F5可以进行反编译。不过在手动分析下一个函数后，按F5无法进行反编译。这是因为IDA没有将其识别为函数，我们在已修复的函数入口点处按P MakeProc即可。</p>","keywords":null,"cover":null,"content":null,"text":"​    这学期《恶意代码分析》这门课的作业留了一道RE题，其中包含大量批量插入的花指令。在这里简单记录一下分析过程。0x00  基本分析首先动态执行程序看一下1<br>2<br>3<br>4<br>5<br>6<br>D:\\UCAS\\malware_analyse&gt;Ant","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"RE","slug":"RE","count":2,"path":"api/tags/RE.json"}]}]}